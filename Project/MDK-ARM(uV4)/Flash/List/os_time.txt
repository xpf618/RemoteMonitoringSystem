; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_time.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_time.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\½øÐÐÊ±\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\os_time.crf ..\..\uCOS-III\uCOS-III\Source\os_time.c]
                          THUMB

                          AREA ||i.OSTimeDly||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;84     
;;;85     void  OSTimeDly (OS_TICK   dly,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;86                      OS_OPT    opt,
;;;87                      OS_ERR   *p_err)
;;;88     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;89     #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;90         CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;91     #endif
;;;92     
;;;93     
;;;94     #ifdef OS_SAFETY_CRITICAL
;;;95         if (p_err == DEF_NULL) {
;;;96             OS_SAFETY_CRITICAL_EXCEPTION();
;;;97             return;
;;;98         }
;;;99     #endif
;;;100    
;;;101    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;102        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
00000c  4828              LDR      r0,|L1.176|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000010  b120              CBZ      r0,|L1.28|
;;;103           *p_err = OS_ERR_TIME_DLY_ISR;
000012  f2472075          MOV      r0,#0x7275
000016  8020              STRH     r0,[r4,#0]
                  |L1.24|
;;;104            return;
;;;105        }
;;;106    #endif
;;;107    
;;;108    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;109        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;110           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;111            return;
;;;112        }
;;;113    #endif
;;;114    
;;;115        if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
;;;116           *p_err = OS_ERR_SCHED_LOCKED;
;;;117            return;
;;;118        }
;;;119    
;;;120        switch (opt) {
;;;121            case OS_OPT_TIME_DLY:
;;;122            case OS_OPT_TIME_TIMEOUT:
;;;123            case OS_OPT_TIME_PERIODIC:
;;;124                 if (dly == 0u) {                                   /* 0 means no delay!                                    */
;;;125                    *p_err = OS_ERR_TIME_ZERO_DLY;
;;;126                     return;
;;;127                 }
;;;128                 break;
;;;129    
;;;130            case OS_OPT_TIME_MATCH:
;;;131                 break;
;;;132    
;;;133            default:
;;;134                *p_err = OS_ERR_OPT_INVALID;
;;;135                 return;
;;;136        }
;;;137    
;;;138    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;139        OS_CRITICAL_ENTER();
;;;140        OS_TickListInsertDly(OSTCBCurPtr,
;;;141                             dly,
;;;142                             opt,
;;;143                             p_err);
;;;144        if (*p_err != OS_ERR_NONE) {
;;;145             OS_CRITICAL_EXIT_NO_SCHED();
;;;146             return;
;;;147        }
;;;148    
;;;149    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;150        TRACE_OS_TASK_DLY(dly);                                     /* Record the event.                                    */
;;;151    #endif
;;;152        OS_RdyListRemove(OSTCBCurPtr);                              /* Remove current task from ready list                  */
;;;153        OS_CRITICAL_EXIT_NO_SCHED();
;;;154        OSSched();                                                  /* Find next task to run!                               */
;;;155    #endif
;;;156    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  4825              LDR      r0,|L1.180|
00001e  7800              LDRB     r0,[r0,#0]            ;115  ; OSSchedLockNestingCtr
000020  b118              CBZ      r0,|L1.42|
000022  f6465063          MOV      r0,#0x6d63            ;116
000026  8020              STRH     r0,[r4,#0]            ;116
000028  e7f6              B        |L1.24|
                  |L1.42|
00002a  b136              CBZ      r6,|L1.58|
00002c  2e02              CMP      r6,#2                 ;120
00002e  d005              BEQ      |L1.60|
000030  2e04              CMP      r6,#4                 ;120
000032  d00a              BEQ      |L1.74|
000034  2e08              CMP      r6,#8                 ;120
000036  d109              BNE      |L1.76|
000038  e001              B        |L1.62|
                  |L1.58|
00003a  bf00              NOP                            ;122
                  |L1.60|
00003c  bf00              NOP                            ;123
                  |L1.62|
00003e  b91d              CBNZ     r5,|L1.72|
000040  f247207e          MOV      r0,#0x727e            ;125
000044  8020              STRH     r0,[r4,#0]            ;125
000046  e7e7              B        |L1.24|
                  |L1.72|
000048  e004              B        |L1.84|
                  |L1.74|
00004a  e003              B        |L1.84|
                  |L1.76|
00004c  f6456025          MOV      r0,#0x5e25            ;134
000050  8020              STRH     r0,[r4,#0]            ;134
000052  e7e1              B        |L1.24|
                  |L1.84|
000054  bf00              NOP                            ;128
000056  bf00              NOP                            ;139
000058  bf00              NOP                            ;139
00005a  f7fffffe          BL       CPU_SR_Save
00005e  4607              MOV      r7,r0                 ;139
000060  bf00              NOP                            ;139
000062  f7fffffe          BL       CPU_IntDisMeasStart
000066  bf00              NOP                            ;139
000068  4623              MOV      r3,r4                 ;140
00006a  4632              MOV      r2,r6                 ;140
00006c  4629              MOV      r1,r5                 ;140
00006e  4812              LDR      r0,|L1.184|
000070  6800              LDR      r0,[r0,#0]            ;140  ; OSTCBCurPtr
000072  f7fffffe          BL       OS_TickListInsertDly
000076  8820              LDRH     r0,[r4,#0]            ;144
000078  b148              CBZ      r0,|L1.142|
00007a  bf00              NOP                            ;145
00007c  f7fffffe          BL       CPU_IntDisMeasStop
000080  bf00              NOP                            ;145
000082  4638              MOV      r0,r7                 ;145
000084  f7fffffe          BL       CPU_SR_Restore
000088  bf00              NOP                            ;145
00008a  bf00              NOP                            ;145
00008c  e7c4              B        |L1.24|
                  |L1.142|
00008e  480a              LDR      r0,|L1.184|
000090  6800              LDR      r0,[r0,#0]            ;152  ; OSTCBCurPtr
000092  f7fffffe          BL       OS_RdyListRemove
000096  bf00              NOP                            ;153
000098  f7fffffe          BL       CPU_IntDisMeasStop
00009c  bf00              NOP                            ;153
00009e  4638              MOV      r0,r7                 ;153
0000a0  f7fffffe          BL       CPU_SR_Restore
0000a4  bf00              NOP                            ;153
0000a6  bf00              NOP                            ;153
0000a8  f7fffffe          BL       OSSched
0000ac  bf00              NOP      
0000ae  e7b3              B        |L1.24|
;;;157    
                          ENDP

                  |L1.176|
                          DCD      OSIntNestingCtr
                  |L1.180|
                          DCD      OSSchedLockNestingCtr
                  |L1.184|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeDlyHMSM||, CODE, READONLY, ALIGN=2

                  OSTimeDlyHMSM PROC
;;;217    #if (OS_CFG_TIME_DLY_HMSM_EN == DEF_ENABLED)
;;;218    void  OSTimeDlyHMSM (CPU_INT16U   hours,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;219                         CPU_INT16U   minutes,
;;;220                         CPU_INT16U   seconds,
;;;221                         CPU_INT32U   milli,
;;;222                         OS_OPT       opt,
;;;223                         OS_ERR      *p_err)
;;;224    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dda40e          LDRD     r10,r4,[sp,#0x38]
;;;225    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;226        CPU_BOOLEAN  opt_invalid;
;;;227        CPU_BOOLEAN  opt_non_strict;
;;;228    #endif
;;;229        OS_OPT       opt_time;
;;;230        OS_RATE_HZ   tick_rate;
;;;231        OS_TICK      ticks;
;;;232    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;233        CPU_SR_ALLOC();
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;234    #endif
;;;235    
;;;236    
;;;237    
;;;238    #ifdef OS_SAFETY_CRITICAL
;;;239        if (p_err == DEF_NULL) {
;;;240            OS_SAFETY_CRITICAL_EXCEPTION();
;;;241            return;
;;;242        }
;;;243    #endif
;;;244    
;;;245    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;246        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
000014  4860              LDR      r0,|L2.408|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000018  b120              CBZ      r0,|L2.36|
;;;247           *p_err = OS_ERR_TIME_DLY_ISR;
00001a  f2472075          MOV      r0,#0x7275
00001e  8020              STRH     r0,[r4,#0]
                  |L2.32|
;;;248            return;
;;;249        }
;;;250    #endif
;;;251    
;;;252    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;253        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;254           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;255            return;
;;;256        }
;;;257    #endif
;;;258    
;;;259        if (OSSchedLockNestingCtr > 0u) {                           /* Can't delay when the scheduler is locked             */
;;;260           *p_err = OS_ERR_SCHED_LOCKED;
;;;261            return;
;;;262        }
;;;263    
;;;264        opt_time = opt & OS_OPT_TIME_MASK;                          /* Retrieve time options only.                          */
;;;265        switch (opt_time) {
;;;266            case OS_OPT_TIME_DLY:
;;;267            case OS_OPT_TIME_TIMEOUT:
;;;268            case OS_OPT_TIME_PERIODIC:
;;;269                 if (milli == 0u) {                                 /* Make sure we didn't specify a 0 delay                */
;;;270                     if (seconds == 0u) {
;;;271                         if (minutes == 0u) {
;;;272                             if (hours == 0u) {
;;;273                                *p_err = OS_ERR_TIME_ZERO_DLY;
;;;274                                 return;
;;;275                             }
;;;276                         }
;;;277                     }
;;;278                 }
;;;279                 break;
;;;280    
;;;281            case OS_OPT_TIME_MATCH:
;;;282                 break;
;;;283    
;;;284            default:
;;;285                *p_err = OS_ERR_OPT_INVALID;
;;;286                 return;
;;;287        }
;;;288    
;;;289    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)                          /* Validate arguments to be within range                */
;;;290        opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
;;;291        if (opt_invalid == DEF_YES) {
;;;292           *p_err = OS_ERR_OPT_INVALID;
;;;293            return;
;;;294        }
;;;295    
;;;296        opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
;;;297        if (opt_non_strict != DEF_YES) {
;;;298             if (milli   > 999u) {
;;;299                *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
;;;300                 return;
;;;301             }
;;;302             if (seconds > 59u) {
;;;303                *p_err = OS_ERR_TIME_INVALID_SECONDS;
;;;304                 return;
;;;305             }
;;;306             if (minutes > 59u) {
;;;307                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;308                 return;
;;;309             }
;;;310             if (hours   > 99u) {
;;;311                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;312                 return;
;;;313             }
;;;314        } else {
;;;315             if (minutes > 9999u) {
;;;316                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;317                 return;
;;;318             }
;;;319             if (hours   > 999u) {
;;;320                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;321                 return;
;;;322             }
;;;323        }
;;;324    #endif
;;;325    
;;;326                                                                    /* Compute the total number of clock ticks required..   */
;;;327                                                                    /* .. (rounded to the nearest tick)                     */
;;;328        tick_rate = OSCfg_TickRate_Hz;
;;;329        ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
;;;330                  + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
;;;331    
;;;332        if (ticks > 0u) {
;;;333    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;334            OS_CRITICAL_ENTER();
;;;335            OS_TickListInsertDly(OSTCBCurPtr,
;;;336                                 ticks,
;;;337                                 opt_time,
;;;338                                 p_err);
;;;339            if (*p_err != OS_ERR_NONE) {
;;;340                 OS_CRITICAL_EXIT_NO_SCHED();
;;;341                 return;
;;;342            }
;;;343    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;344            TRACE_OS_TASK_DLY(ticks);                               /* Record the event.                                    */
;;;345    #endif
;;;346            OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                  */
;;;347            OS_CRITICAL_EXIT_NO_SCHED();
;;;348            OSSched();                                              /* Find next task to run!                               */
;;;349    #endif
;;;350           *p_err = OS_ERR_NONE;
;;;351        } else {
;;;352           *p_err = OS_ERR_TIME_ZERO_DLY;
;;;353        }
;;;354    }
000020  e8bd9fff          POP      {r0-r12,pc}
                  |L2.36|
000024  485d              LDR      r0,|L2.412|
000026  7800              LDRB     r0,[r0,#0]            ;259  ; OSSchedLockNestingCtr
000028  b118              CBZ      r0,|L2.50|
00002a  f6465063          MOV      r0,#0x6d63            ;260
00002e  8020              STRH     r0,[r4,#0]            ;260
000030  e7f6              B        |L2.32|
                  |L2.50|
000032  f00a0b0e          AND      r11,r10,#0xe          ;264
000036  f1bb0f00          CMP      r11,#0                ;265
00003a  d009              BEQ      |L2.80|
00003c  f1bb0f02          CMP      r11,#2                ;265
000040  d007              BEQ      |L2.82|
000042  f1bb0f04          CMP      r11,#4                ;265
000046  d010              BEQ      |L2.106|
000048  f1bb0f08          CMP      r11,#8                ;265
00004c  d10e              BNE      |L2.108|
00004e  e001              B        |L2.84|
                  |L2.80|
000050  bf00              NOP                            ;267
                  |L2.82|
000052  bf00              NOP                            ;268
                  |L2.84|
000054  f1b80f00          CMP      r8,#0                 ;269
000058  d106              BNE      |L2.104|
00005a  b92f              CBNZ     r7,|L2.104|
00005c  b926              CBNZ     r6,|L2.104|
00005e  b91d              CBNZ     r5,|L2.104|
000060  f247207e          MOV      r0,#0x727e            ;273
000064  8020              STRH     r0,[r4,#0]            ;273
000066  e7db              B        |L2.32|
                  |L2.104|
000068  e004              B        |L2.116|
                  |L2.106|
00006a  e003              B        |L2.116|
                  |L2.108|
00006c  f6456025          MOV      r0,#0x5e25            ;285
000070  8020              STRH     r0,[r4,#0]            ;285
000072  e7d5              B        |L2.32|
                  |L2.116|
000074  bf00              NOP                            ;279
000076  f02a001e          BIC      r0,r10,#0x1e          ;290
00007a  b108              CBZ      r0,|L2.128|
00007c  2001              MOVS     r0,#1                 ;290
00007e  e000              B        |L2.130|
                  |L2.128|
000080  2000              MOVS     r0,#0                 ;290
                  |L2.130|
000082  9003              STR      r0,[sp,#0xc]          ;290
000084  9803              LDR      r0,[sp,#0xc]          ;291
000086  2801              CMP      r0,#1                 ;291
000088  d103              BNE      |L2.146|
00008a  f6456025          MOV      r0,#0x5e25            ;292
00008e  8020              STRH     r0,[r4,#0]            ;292
000090  e7c6              B        |L2.32|
                  |L2.146|
000092  f00a0010          AND      r0,r10,#0x10          ;296
000096  2810              CMP      r0,#0x10              ;296
000098  d102              BNE      |L2.160|
00009a  bf00              NOP                            ;296
00009c  2001              MOVS     r0,#1                 ;296
00009e  e000              B        |L2.162|
                  |L2.160|
0000a0  2000              MOVS     r0,#0                 ;296
                  |L2.162|
0000a2  9002              STR      r0,[sp,#8]            ;296
0000a4  9802              LDR      r0,[sp,#8]            ;297
0000a6  2801              CMP      r0,#1                 ;297
0000a8  d018              BEQ      |L2.220|
0000aa  f5b87f7a          CMP      r8,#0x3e8             ;298
0000ae  d303              BCC      |L2.184|
0000b0  f247207b          MOV      r0,#0x727b            ;299
0000b4  8020              STRH     r0,[r4,#0]            ;299
0000b6  e7b3              B        |L2.32|
                  |L2.184|
0000b8  2f3b              CMP      r7,#0x3b              ;302
0000ba  d903              BLS      |L2.196|
0000bc  f247207a          MOV      r0,#0x727a            ;303
0000c0  8020              STRH     r0,[r4,#0]            ;303
0000c2  e7ad              B        |L2.32|
                  |L2.196|
0000c4  2e3b              CMP      r6,#0x3b              ;306
0000c6  d903              BLS      |L2.208|
0000c8  f2472079          MOV      r0,#0x7279            ;307
0000cc  8020              STRH     r0,[r4,#0]            ;307
0000ce  e7a7              B        |L2.32|
                  |L2.208|
0000d0  2d63              CMP      r5,#0x63              ;310
0000d2  d912              BLS      |L2.250|
0000d4  f2472078          MOV      r0,#0x7278            ;311
0000d8  8020              STRH     r0,[r4,#0]            ;311
0000da  e7a1              B        |L2.32|
                  |L2.220|
0000dc  f242700f          MOV      r0,#0x270f            ;315
0000e0  4286              CMP      r6,r0                 ;315
0000e2  d903              BLS      |L2.236|
0000e4  f2472079          MOV      r0,#0x7279            ;316
0000e8  8020              STRH     r0,[r4,#0]            ;316
0000ea  e799              B        |L2.32|
                  |L2.236|
0000ec  f5b57f7a          CMP      r5,#0x3e8             ;319
0000f0  d303              BCC      |L2.250|
0000f2  f2472078          MOV      r0,#0x7278            ;320
0000f6  8020              STRH     r0,[r4,#0]            ;320
0000f8  e792              B        |L2.32|
                  |L2.250|
0000fa  4829              LDR      r0,|L2.416|
0000fc  f8d09000          LDR      r9,[r0,#0]            ;328  ; OSCfg_TickRate_Hz
000100  f44f70fa          MOV      r0,#0x1f4             ;329
000104  fbb0f0f9          UDIV     r0,r0,r9              ;329
000108  4440              ADD      r0,r0,r8              ;329
00010a  fb00f009          MUL      r0,r0,r9              ;329
00010e  f44f717a          MOV      r1,#0x3e8             ;329
000112  fbb0f1f1          UDIV     r1,r0,r1              ;329
000116  f44f6061          MOV      r0,#0xe10             ;329
00011a  4368              MULS     r0,r5,r0              ;329
00011c  ebc61206          RSB      r2,r6,r6,LSL #4       ;329
000120  eb000082          ADD      r0,r0,r2,LSL #2       ;329
000124  4438              ADD      r0,r0,r7              ;329
000126  fb001009          MLA      r0,r0,r9,r1           ;329
00012a  9001              STR      r0,[sp,#4]            ;329
00012c  9801              LDR      r0,[sp,#4]            ;332
00012e  b368              CBZ      r0,|L2.396|
000130  bf00              NOP                            ;334
000132  bf00              NOP                            ;334
000134  f7fffffe          BL       CPU_SR_Save
000138  9000              STR      r0,[sp,#0]            ;334
00013a  bf00              NOP                            ;334
00013c  f7fffffe          BL       CPU_IntDisMeasStart
000140  bf00              NOP                            ;334
000142  4623              MOV      r3,r4                 ;335
000144  465a              MOV      r2,r11                ;335
000146  4817              LDR      r0,|L2.420|
000148  9901              LDR      r1,[sp,#4]            ;335
00014a  6800              LDR      r0,[r0,#0]            ;335  ; OSTCBCurPtr
00014c  f7fffffe          BL       OS_TickListInsertDly
000150  8820              LDRH     r0,[r4,#0]            ;339
000152  b148              CBZ      r0,|L2.360|
000154  bf00              NOP                            ;340
000156  f7fffffe          BL       CPU_IntDisMeasStop
00015a  bf00              NOP                            ;340
00015c  9800              LDR      r0,[sp,#0]            ;340
00015e  f7fffffe          BL       CPU_SR_Restore
000162  bf00              NOP                            ;340
000164  bf00              NOP                            ;340
000166  e75b              B        |L2.32|
                  |L2.360|
000168  480e              LDR      r0,|L2.420|
00016a  6800              LDR      r0,[r0,#0]            ;346  ; OSTCBCurPtr
00016c  f7fffffe          BL       OS_RdyListRemove
000170  bf00              NOP                            ;347
000172  f7fffffe          BL       CPU_IntDisMeasStop
000176  bf00              NOP                            ;347
000178  9800              LDR      r0,[sp,#0]            ;347
00017a  f7fffffe          BL       CPU_SR_Restore
00017e  bf00              NOP                            ;347
000180  bf00              NOP                            ;347
000182  f7fffffe          BL       OSSched
000186  2000              MOVS     r0,#0                 ;350
000188  8020              STRH     r0,[r4,#0]            ;350
00018a  e002              B        |L2.402|
                  |L2.396|
00018c  f247207e          MOV      r0,#0x727e            ;352
000190  8020              STRH     r0,[r4,#0]            ;352
                  |L2.402|
000192  bf00              NOP      
000194  e744              B        |L2.32|
;;;355    #endif
                          ENDP

000196  0000              DCW      0x0000
                  |L2.408|
                          DCD      OSIntNestingCtr
                  |L2.412|
                          DCD      OSSchedLockNestingCtr
                  |L2.416|
                          DCD      OSCfg_TickRate_Hz
                  |L2.420|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeGet||, CODE, READONLY, ALIGN=2

                  OSTimeGet PROC
;;;478    
;;;479    OS_TICK  OSTimeGet (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;480    {
000002  4604              MOV      r4,r0
;;;481        OS_TICK  ticks;
;;;482    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;483        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;484    #endif
;;;485    
;;;486    
;;;487    #ifdef OS_SAFETY_CRITICAL
;;;488        if (p_err == DEF_NULL) {
;;;489            OS_SAFETY_CRITICAL_EXCEPTION();
;;;490            return (0u);
;;;491        }
;;;492    #endif
;;;493    
;;;494    
;;;495    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;496        CPU_CRITICAL_ENTER();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4606              MOV      r6,r0
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_IntDisMeasStart
000016  bf00              NOP      
;;;497    #if (OS_CFG_DYN_TICK_EN == DEF_ENABLED)
;;;498        if (OSRunning == OS_STATE_OS_RUNNING) {
;;;499            ticks = BSP_OS_TickGet();
;;;500        } else {
;;;501            ticks = OSTickCtr;
;;;502        }
;;;503    #else
;;;504        ticks = OSTickCtr;
000018  4807              LDR      r0,|L3.56|
00001a  6805              LDR      r5,[r0,#0]  ; OSTickCtr
;;;505    #endif
;;;506        CPU_CRITICAL_EXIT();
00001c  bf00              NOP      
00001e  f7fffffe          BL       CPU_IntDisMeasStop
000022  bf00              NOP      
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       CPU_SR_Restore
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;507    #else
;;;508        ticks = 0u;
;;;509    #endif
;;;510    
;;;511    
;;;512       *p_err = OS_ERR_NONE;
00002e  2000              MOVS     r0,#0
000030  8020              STRH     r0,[r4,#0]
;;;513        return (ticks);
000032  4628              MOV      r0,r5
;;;514    }
000034  bd70              POP      {r4-r6,pc}
;;;515    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeSet||, CODE, READONLY, ALIGN=2

                  OSTimeSet PROC
;;;533    
;;;534    void  OSTimeSet (OS_TICK   ticks,
000000  b570              PUSH     {r4-r6,lr}
;;;535                     OS_ERR   *p_err)
;;;536    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;537    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;538        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;539    #endif
;;;540    
;;;541    
;;;542    #ifdef OS_SAFETY_CRITICAL
;;;543        if (p_err == DEF_NULL) {
;;;544            OS_SAFETY_CRITICAL_EXCEPTION();
;;;545            return;
;;;546        }
;;;547    #endif
;;;548    
;;;549    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;550        CPU_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4606              MOV      r6,r0
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_IntDisMeasStart
000018  bf00              NOP      
;;;551        OSTickCtr = ticks;
00001a  4807              LDR      r0,|L4.56|
00001c  6004              STR      r4,[r0,#0]  ; OSTickCtr
;;;552        CPU_CRITICAL_EXIT();
00001e  bf00              NOP      
000020  f7fffffe          BL       CPU_IntDisMeasStop
000024  bf00              NOP      
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       CPU_SR_Restore
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;553    #endif
;;;554    
;;;555       *p_err     = OS_ERR_NONE;
000030  2000              MOVS     r0,#0
000032  8028              STRH     r0,[r5,#0]
;;;556    }
000034  bd70              POP      {r4-r6,pc}
;;;557    
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeTick||, CODE, READONLY, ALIGN=2

                  OSTimeTick PROC
;;;573    
;;;574    void  OSTimeTick (void)
000000  b508              PUSH     {r3,lr}
;;;575    {
;;;576    #if ((OS_CFG_TASK_TICK_EN == DEF_ENABLED) || (OS_CFG_TMR_EN == DEF_ENABLED))
;;;577        OS_ERR  err;
;;;578    #endif
;;;579    #if ((OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED) && (OS_CFG_TASK_TICK_EN == DEF_ENABLED))
;;;580        CPU_TS  ts;
;;;581    #endif
;;;582    
;;;583        if (OSRunning != OS_STATE_OS_RUNNING) {
000002  480f              LDR      r0,|L5.64|
000004  7800              LDRB     r0,[r0,#0]  ; OSRunning
000006  2801              CMP      r0,#1
000008  d000              BEQ      |L5.12|
                  |L5.10|
;;;584            return;
;;;585        }
;;;586    
;;;587        OSTimeTickHook();                                           /* Call user definable hook                             */
;;;588    
;;;589    #if (OS_CFG_TASK_TICK_EN == DEF_ENABLED)
;;;590    #if (OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED)
;;;591    
;;;592        ts = OS_TS_GET();                                           /* Get timestamp                                        */
;;;593        OS_IntQPost(OS_OBJ_TYPE_TICK,                               /* Post to ISR queue                                    */
;;;594                    (void      *)&OSRdyList[OSPrioCur],
;;;595                    DEF_NULL,
;;;596                    0u,
;;;597                    0u,
;;;598                    0u,
;;;599                    ts,
;;;600                    &err);
;;;601    
;;;602    #else
;;;603    
;;;604       (void)OSTaskSemPost(&OSTickTaskTCB,                          /* Signal tick task                                     */
;;;605                            OS_OPT_POST_NONE,
;;;606                           &err);
;;;607    
;;;608       (void)err;
;;;609    
;;;610    #if (OS_CFG_SCHED_ROUND_ROBIN_EN == DEF_ENABLED)
;;;611        OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
;;;612    #endif
;;;613    
;;;614    #if (OS_CFG_TMR_EN == DEF_ENABLED)
;;;615        OSTmrUpdateCtr--;
;;;616        if (OSTmrUpdateCtr == 0u) {
;;;617            OSTmrUpdateCtr = OSTmrUpdateCnt;
;;;618            (void)OSTaskSemPost(&OSTmrTaskTCB,                      /* Signal timer task                                    */
;;;619                                 OS_OPT_POST_NONE,
;;;620                                &err);
;;;621            (void)err;
;;;622        }
;;;623    #endif
;;;624    #endif
;;;625    #endif
;;;626    }
00000a  bd08              POP      {r3,pc}
                  |L5.12|
00000c  f7fffffe          BL       OSTimeTickHook
000010  466a              MOV      r2,sp                 ;604
000012  2100              MOVS     r1,#0                 ;604
000014  480b              LDR      r0,|L5.68|
000016  f7fffffe          BL       OSTaskSemPost
00001a  480b              LDR      r0,|L5.72|
00001c  6800              LDR      r0,[r0,#0]            ;615  ; OSTmrUpdateCtr
00001e  1e40              SUBS     r0,r0,#1              ;615
000020  4909              LDR      r1,|L5.72|
000022  6008              STR      r0,[r1,#0]            ;615  ; OSTmrUpdateCtr
000024  4608              MOV      r0,r1                 ;616
000026  6800              LDR      r0,[r0,#0]            ;616  ; OSTmrUpdateCtr
000028  b940              CBNZ     r0,|L5.60|
00002a  4808              LDR      r0,|L5.76|
00002c  6800              LDR      r0,[r0,#0]            ;617  ; OSTmrUpdateCnt
00002e  6008              STR      r0,[r1,#0]            ;617  ; OSTmrUpdateCtr
000030  466a              MOV      r2,sp                 ;618
000032  2100              MOVS     r1,#0                 ;618
000034  4806              LDR      r0,|L5.80|
000036  f7fffffe          BL       OSTaskSemPost
00003a  bf00              NOP                            ;621
                  |L5.60|
00003c  bf00              NOP      
00003e  e7e4              B        |L5.10|
;;;627    
                          ENDP

                  |L5.64|
                          DCD      OSRunning
                  |L5.68|
                          DCD      OSTickTaskTCB
                  |L5.72|
                          DCD      OSTmrUpdateCtr
                  |L5.76|
                          DCD      OSTmrUpdateCnt
                  |L5.80|
                          DCD      OSTmrTaskTCB
