; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_sem.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_sem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\½øÐÐÊ±\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\os_sem.crf ..\..\uCOS-III\uCOS-III\Source\os_sem.c]
                          THUMB

                          AREA ||i.OSSemCreate||, CODE, READONLY, ALIGN=2

                  OSSemCreate PROC
;;;72     
;;;73     void  OSSemCreate (OS_SEM      *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74                        CPU_CHAR    *p_name,
;;;75                        OS_SEM_CTR   cnt,
;;;76                        OS_ERR      *p_err)
;;;77     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;78         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;79     
;;;80     
;;;81     
;;;82     #ifdef OS_SAFETY_CRITICAL
;;;83         if (p_err == DEF_NULL) {
;;;84             OS_SAFETY_CRITICAL_EXCEPTION();
;;;85             return;
;;;86         }
;;;87     #endif
;;;88     
;;;89     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;90         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;91            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;92             return;
;;;93         }
;;;94     #endif
;;;95     
;;;96     #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;97         if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
000010  481a              LDR      r0,|L1.124|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  b120              CBZ      r0,|L1.32|
;;;98            *p_err = OS_ERR_CREATE_ISR;
000016  f64260e1          MOV      r0,#0x2ee1
00001a  8028              STRH     r0,[r5,#0]
                  |L1.28|
;;;99             return;
;;;100        }
;;;101    #endif
;;;102    
;;;103    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;104        if (p_sem == DEF_NULL) {                                    /* Validate 'p_sem'                                     */
;;;105           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;106            return;
;;;107        }
;;;108    #endif
;;;109    
;;;110        OS_CRITICAL_ENTER();
;;;111    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;112        p_sem->Type    = OS_OBJ_TYPE_SEM;                           /* Mark the data structure as a semaphore               */
;;;113    #endif
;;;114        p_sem->Ctr     = cnt;                                       /* Set semaphore value                                  */
;;;115    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;116        p_sem->TS      = 0u;
;;;117    #endif
;;;118    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;119        p_sem->NamePtr = p_name;                                    /* Save the name of the semaphore                       */
;;;120    #else
;;;121        (void)&p_name;
;;;122    #endif
;;;123        OS_PendListInit(&p_sem->PendList);                          /* Initialize the waiting list                          */
;;;124    
;;;125    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;126        OS_SemDbgListAdd(p_sem);
;;;127        OSSemQty++;
;;;128    #endif
;;;129    
;;;130    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;131        TRACE_OS_SEM_CREATE(p_sem, p_name);                         /* Record the event.                                    */
;;;132    #endif
;;;133    
;;;134        OS_CRITICAL_EXIT_NO_SCHED();
;;;135       *p_err = OS_ERR_NONE;
;;;136    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  b91c              CBNZ     r4,|L1.42|
000022  f64550c3          MOV      r0,#0x5dc3            ;105
000026  8028              STRH     r0,[r5,#0]            ;105
000028  e7f8              B        |L1.28|
                  |L1.42|
00002a  bf00              NOP                            ;110
00002c  bf00              NOP                            ;110
00002e  f7fffffe          BL       CPU_SR_Save
000032  4680              MOV      r8,r0                 ;110
000034  bf00              NOP                            ;110
000036  f7fffffe          BL       CPU_IntDisMeasStart
00003a  bf00              NOP                            ;110
00003c  4810              LDR      r0,|L1.128|
00003e  6020              STR      r0,[r4,#0]            ;112
000040  6227              STR      r7,[r4,#0x20]         ;114
000042  2000              MOVS     r0,#0                 ;116
000044  6260              STR      r0,[r4,#0x24]         ;116
000046  6066              STR      r6,[r4,#4]            ;119
000048  f1040008          ADD      r0,r4,#8              ;123
00004c  f7fffffe          BL       OS_PendListInit
000050  4620              MOV      r0,r4                 ;126
000052  f7fffffe          BL       OS_SemDbgListAdd
000056  480b              LDR      r0,|L1.132|
000058  8800              LDRH     r0,[r0,#0]            ;127  ; OSSemQty
00005a  1c40              ADDS     r0,r0,#1              ;127
00005c  4909              LDR      r1,|L1.132|
00005e  8008              STRH     r0,[r1,#0]            ;127
000060  bf00              NOP                            ;134
000062  f7fffffe          BL       CPU_IntDisMeasStop
000066  bf00              NOP                            ;134
000068  4640              MOV      r0,r8                 ;134
00006a  f7fffffe          BL       CPU_SR_Restore
00006e  bf00              NOP                            ;134
000070  bf00              NOP                            ;134
000072  2000              MOVS     r0,#0                 ;135
000074  8028              STRH     r0,[r5,#0]            ;135
000076  bf00              NOP      
000078  e7d0              B        |L1.28|
;;;137    
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      OSIntNestingCtr
                  |L1.128|
                          DCD      0x414d4553
                  |L1.132|
                          DCD      OSSemQty

                          AREA ||i.OSSemDel||, CODE, READONLY, ALIGN=2

                  OSSemDel PROC
;;;176    #if (OS_CFG_SEM_DEL_EN == DEF_ENABLED)
;;;177    OS_OBJ_QTY  OSSemDel (OS_SEM  *p_sem,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;178                          OS_OPT   opt,
;;;179                          OS_ERR  *p_err)
;;;180    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;181        OS_OBJ_QTY     nbr_tasks;
;;;182        OS_PEND_DATA  *p_pend_data;
;;;183        OS_PEND_LIST  *p_pend_list;
;;;184        OS_TCB        *p_tcb;
;;;185        CPU_TS         ts;
;;;186        CPU_SR_ALLOC();
00000a  f04f0b00          MOV      r11,#0
;;;187    
;;;188    
;;;189    
;;;190    #ifdef OS_SAFETY_CRITICAL
;;;191        if (p_err == DEF_NULL) {
;;;192            OS_SAFETY_CRITICAL_EXCEPTION();
;;;193            return (0u);
;;;194        }
;;;195    #endif
;;;196    
;;;197    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;198        if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;199           *p_err = OS_ERR_ILLEGAL_DEL_RUN_TIME;
;;;200            return (0u);
;;;201        }
;;;202    #endif
;;;203    
;;;204    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;205        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to delete a semaphore from an ISR        */
00000e  4846              LDR      r0,|L2.296|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  b128              CBZ      r0,|L2.32|
;;;206           *p_err = OS_ERR_DEL_ISR;
000014  f24320c9          MOV      r0,#0x32c9
000018  8020              STRH     r0,[r4,#0]
;;;207            return (0u);
00001a  2000              MOVS     r0,#0
                  |L2.28|
;;;208        }
;;;209    #endif
;;;210    
;;;211    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;212        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;213           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;214            return (0u);
;;;215        }
;;;216    #endif
;;;217    
;;;218    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;219        if (p_sem == DEF_NULL) {                                    /* Validate 'p_sem'                                     */
;;;220           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;221            return (0u);
;;;222        }
;;;223    #endif
;;;224    
;;;225    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;226        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                       /* Make sure semaphore was created                      */
;;;227           *p_err = OS_ERR_OBJ_TYPE;
;;;228            return (0u);
;;;229        }
;;;230    #endif
;;;231    
;;;232        CPU_CRITICAL_ENTER();
;;;233        p_pend_list = &p_sem->PendList;
;;;234        nbr_tasks   = 0u;
;;;235        switch (opt) {
;;;236            case OS_OPT_DEL_NO_PEND:                                /* Delete semaphore only if no task waiting             */
;;;237                 if (p_pend_list->HeadPtr == DEF_NULL) {
;;;238    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;239                     OS_SemDbgListRemove(p_sem);
;;;240                     OSSemQty--;
;;;241    #endif
;;;242    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;243                     TRACE_OS_SEM_DEL(p_sem);                       /* Record the event.                                    */
;;;244    #endif
;;;245                     OS_SemClr(p_sem);
;;;246                     CPU_CRITICAL_EXIT();
;;;247                    *p_err = OS_ERR_NONE;
;;;248                 } else {
;;;249                     CPU_CRITICAL_EXIT();
;;;250                    *p_err = OS_ERR_TASK_WAITING;
;;;251                 }
;;;252                 break;
;;;253    
;;;254            case OS_OPT_DEL_ALWAYS:                                 /* Always delete the semaphore                          */
;;;255                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;256    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;257                 ts = OS_TS_GET();                                  /* Get local time stamp so all tasks get the same time  */
;;;258    #else
;;;259                 ts = 0u;
;;;260    #endif
;;;261                 while (p_pend_list->HeadPtr != DEF_NULL) {         /* Remove all tasks on the pend list                    */
;;;262                     p_pend_data = p_pend_list->HeadPtr;
;;;263                     p_tcb       = p_pend_data->TCBPtr;
;;;264                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_sem),
;;;265                                   p_tcb,
;;;266                                   ts);
;;;267                     nbr_tasks++;
;;;268                 }
;;;269    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;270                 OS_SemDbgListRemove(p_sem);
;;;271                 OSSemQty--;
;;;272    #endif
;;;273    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;274                 TRACE_OS_SEM_DEL(p_sem);                           /* Record the event.                                    */
;;;275    #endif
;;;276                 OS_SemClr(p_sem);
;;;277                 OS_CRITICAL_EXIT_NO_SCHED();
;;;278                 OSSched();                                         /* Find highest priority task ready to run              */
;;;279                *p_err = OS_ERR_NONE;
;;;280                 break;
;;;281    
;;;282            default:
;;;283                 CPU_CRITICAL_EXIT();
;;;284                *p_err = OS_ERR_OPT_INVALID;
;;;285                 break;
;;;286        }
;;;287        return (nbr_tasks);
;;;288    }
00001c  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.32|
000020  b925              CBNZ     r5,|L2.44|
000022  f64550c3          MOV      r0,#0x5dc3            ;220
000026  8020              STRH     r0,[r4,#0]            ;220
000028  2000              MOVS     r0,#0                 ;221
00002a  e7f7              B        |L2.28|
                  |L2.44|
00002c  493f              LDR      r1,|L2.300|
00002e  6828              LDR      r0,[r5,#0]            ;226
000030  4288              CMP      r0,r1                 ;226
000032  d004              BEQ      |L2.62|
000034  f64550c4          MOV      r0,#0x5dc4            ;227
000038  8020              STRH     r0,[r4,#0]            ;227
00003a  2000              MOVS     r0,#0                 ;228
00003c  e7ee              B        |L2.28|
                  |L2.62|
00003e  bf00              NOP                            ;232
000040  bf00              NOP                            ;232
000042  f7fffffe          BL       CPU_SR_Save
000046  4683              MOV      r11,r0                ;232
000048  bf00              NOP                            ;232
00004a  f7fffffe          BL       CPU_IntDisMeasStart
00004e  bf00              NOP                            ;232
000050  f1050608          ADD      r6,r5,#8              ;233
000054  2700              MOVS     r7,#0                 ;234
000056  f1b80f00          CMP      r8,#0                 ;235
00005a  d003              BEQ      |L2.100|
00005c  f1b80f01          CMP      r8,#1                 ;235
000060  d151              BNE      |L2.262|
000062  e025              B        |L2.176|
                  |L2.100|
000064  6830              LDR      r0,[r6,#0]            ;237
000066  b9b0              CBNZ     r0,|L2.150|
000068  4628              MOV      r0,r5                 ;239
00006a  f7fffffe          BL       OS_SemDbgListRemove
00006e  4830              LDR      r0,|L2.304|
000070  8800              LDRH     r0,[r0,#0]            ;240  ; OSSemQty
000072  1e40              SUBS     r0,r0,#1              ;240
000074  492e              LDR      r1,|L2.304|
000076  8008              STRH     r0,[r1,#0]            ;240
000078  4628              MOV      r0,r5                 ;245
00007a  f7fffffe          BL       OS_SemClr
00007e  bf00              NOP                            ;246
000080  f7fffffe          BL       CPU_IntDisMeasStop
000084  bf00              NOP                            ;246
000086  4658              MOV      r0,r11                ;246
000088  f7fffffe          BL       CPU_SR_Restore
00008c  bf00              NOP                            ;246
00008e  bf00              NOP                            ;246
000090  2000              MOVS     r0,#0                 ;247
000092  8020              STRH     r0,[r4,#0]            ;247
000094  e00b              B        |L2.174|
                  |L2.150|
000096  bf00              NOP                            ;249
000098  f7fffffe          BL       CPU_IntDisMeasStop
00009c  bf00              NOP                            ;249
00009e  4658              MOV      r0,r11                ;249
0000a0  f7fffffe          BL       CPU_SR_Restore
0000a4  bf00              NOP                            ;249
0000a6  bf00              NOP                            ;249
0000a8  f247105f          MOV      r0,#0x715f            ;250
0000ac  8020              STRH     r0,[r4,#0]            ;250
                  |L2.174|
0000ae  e037              B        |L2.288|
                  |L2.176|
0000b0  f7fffffe          BL       CPU_TS_TmrRd
0000b4  9000              STR      r0,[sp,#0]            ;257
0000b6  e00a              B        |L2.206|
                  |L2.184|
0000b8  f8d69000          LDR      r9,[r6,#0]            ;262
0000bc  f8d9a008          LDR      r10,[r9,#8]           ;263
0000c0  4651              MOV      r1,r10                ;264
0000c2  4628              MOV      r0,r5                 ;264
0000c4  9a00              LDR      r2,[sp,#0]            ;264
0000c6  f7fffffe          BL       OS_PendObjDel
0000ca  1c78              ADDS     r0,r7,#1              ;267
0000cc  b287              UXTH     r7,r0                 ;267
                  |L2.206|
0000ce  6830              LDR      r0,[r6,#0]            ;261
0000d0  2800              CMP      r0,#0                 ;261
0000d2  d1f1              BNE      |L2.184|
0000d4  4628              MOV      r0,r5                 ;270
0000d6  f7fffffe          BL       OS_SemDbgListRemove
0000da  4815              LDR      r0,|L2.304|
0000dc  8800              LDRH     r0,[r0,#0]            ;271  ; OSSemQty
0000de  1e40              SUBS     r0,r0,#1              ;271
0000e0  4913              LDR      r1,|L2.304|
0000e2  8008              STRH     r0,[r1,#0]            ;271
0000e4  4628              MOV      r0,r5                 ;276
0000e6  f7fffffe          BL       OS_SemClr
0000ea  bf00              NOP                            ;277
0000ec  f7fffffe          BL       CPU_IntDisMeasStop
0000f0  bf00              NOP                            ;277
0000f2  4658              MOV      r0,r11                ;277
0000f4  f7fffffe          BL       CPU_SR_Restore
0000f8  bf00              NOP                            ;277
0000fa  bf00              NOP                            ;277
0000fc  f7fffffe          BL       OSSched
000100  2000              MOVS     r0,#0                 ;279
000102  8020              STRH     r0,[r4,#0]            ;279
000104  e00c              B        |L2.288|
                  |L2.262|
000106  bf00              NOP                            ;283
000108  f7fffffe          BL       CPU_IntDisMeasStop
00010c  bf00              NOP                            ;283
00010e  4658              MOV      r0,r11                ;283
000110  f7fffffe          BL       CPU_SR_Restore
000114  bf00              NOP                            ;283
000116  bf00              NOP                            ;283
000118  f6456025          MOV      r0,#0x5e25            ;284
00011c  8020              STRH     r0,[r4,#0]            ;284
00011e  bf00              NOP                            ;285
                  |L2.288|
000120  bf00              NOP                            ;252
000122  4638              MOV      r0,r7                 ;287
000124  e77a              B        |L2.28|
;;;289    #endif
                          ENDP

000126  0000              DCW      0x0000
                  |L2.296|
                          DCD      OSIntNestingCtr
                  |L2.300|
                          DCD      0x414d4553
                  |L2.304|
                          DCD      OSSemQty

                          AREA ||i.OSSemPend||, CODE, READONLY, ALIGN=2

                  OSSemPend PROC
;;;340    
;;;341    OS_SEM_CTR  OSSemPend (OS_SEM   *p_sem,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;342                           OS_TICK   timeout,
;;;343                           OS_OPT    opt,
;;;344                           CPU_TS   *p_ts,
;;;345                           OS_ERR   *p_err)
;;;346    {
000004  b088              SUB      sp,sp,#0x20
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461c              MOV      r4,r3
00000e  9d10              LDR      r5,[sp,#0x40]
;;;347        OS_SEM_CTR    ctr;
;;;348        OS_PEND_DATA  pend_data;
;;;349        CPU_SR_ALLOC();
000010  f04f0a00          MOV      r10,#0
;;;350    
;;;351    
;;;352    #if (OS_CFG_TS_EN == DEF_DISABLED)
;;;353        (void)&p_ts;                                                /* Prevent compiler warning for not using 'ts'          */
;;;354    #endif
;;;355    
;;;356    #ifdef OS_SAFETY_CRITICAL
;;;357        if (p_err == DEF_NULL) {
;;;358            OS_SAFETY_CRITICAL_EXCEPTION();
;;;359            return (0u);
;;;360        }
;;;361    #endif
;;;362    
;;;363    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;364        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
000014  4868              LDR      r0,|L3.440|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000018  b130              CBZ      r0,|L3.40|
;;;365    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;366            TRACE_OS_SEM_PEND_FAILED(p_sem);                        /* Record the event.                                    */
;;;367    #endif
;;;368           *p_err = OS_ERR_PEND_ISR;
00001a  f24610ae          MOV      r0,#0x61ae
00001e  8028              STRH     r0,[r5,#0]
;;;369            return (0u);
000020  2000              MOVS     r0,#0
                  |L3.34|
;;;370        }
;;;371    #endif
;;;372    
;;;373    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;374        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;375           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;376            return (0u);
;;;377        }
;;;378    #endif
;;;379    
;;;380    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;381        if (p_sem == DEF_NULL) {                                    /* Validate 'p_sem'                                     */
;;;382           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;383            return (0u);
;;;384        }
;;;385        switch (opt) {                                              /* Validate 'opt'                                       */
;;;386            case OS_OPT_PEND_BLOCKING:
;;;387            case OS_OPT_PEND_NON_BLOCKING:
;;;388                 break;
;;;389    
;;;390            default:
;;;391    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;392                 TRACE_OS_SEM_PEND_FAILED(p_sem);                   /* Record the event.                                    */
;;;393    #endif
;;;394                *p_err = OS_ERR_OPT_INVALID;
;;;395                 return (0u);
;;;396        }
;;;397    #endif
;;;398    
;;;399    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;400        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                       /* Make sure semaphore was created                      */
;;;401    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;402            TRACE_OS_SEM_PEND_FAILED(p_sem);                        /* Record the event.                                    */
;;;403    #endif
;;;404           *p_err = OS_ERR_OBJ_TYPE;
;;;405            return (0u);
;;;406        }
;;;407    #endif
;;;408    
;;;409    
;;;410        CPU_CRITICAL_ENTER();
;;;411        if (p_sem->Ctr > 0u) {                                      /* Resource available?                                  */
;;;412            p_sem->Ctr--;                                           /* Yes, caller may proceed                              */
;;;413    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;414            if (p_ts != DEF_NULL) {
;;;415               *p_ts = p_sem->TS;                                   /* get timestamp of last post                           */
;;;416            }
;;;417    #endif
;;;418            ctr   = p_sem->Ctr;
;;;419            CPU_CRITICAL_EXIT();
;;;420           *p_err = OS_ERR_NONE;
;;;421    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;422            TRACE_OS_SEM_PEND(p_sem);                               /* Record the event.                                    */
;;;423    #endif
;;;424            return (ctr);
;;;425        }
;;;426    
;;;427        if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
;;;428    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;429            if (p_ts != DEF_NULL) {
;;;430               *p_ts = 0u;
;;;431            }
;;;432    #endif
;;;433            ctr   = p_sem->Ctr;                                     /* No                                                   */
;;;434            CPU_CRITICAL_EXIT();
;;;435           *p_err = OS_ERR_PEND_WOULD_BLOCK;
;;;436    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;437            TRACE_OS_SEM_PEND_FAILED(p_sem);                        /* Record the event.                                    */
;;;438    #endif
;;;439            return (ctr);
;;;440        } else {                                                    /* Yes                                                  */
;;;441            if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
;;;442    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;443                if (p_ts != DEF_NULL) {
;;;444                   *p_ts = 0u;
;;;445                }
;;;446    #endif
;;;447                CPU_CRITICAL_EXIT();
;;;448    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;449                TRACE_OS_SEM_PEND_FAILED(p_sem);                    /* Record the event.                                    */
;;;450    #endif
;;;451               *p_err = OS_ERR_SCHED_LOCKED;
;;;452                return (0u);
;;;453            }
;;;454        }
;;;455                                                                    /* Lock the scheduler/re-enable interrupts              */
;;;456        OS_CRITICAL_ENTER_CPU_EXIT();
;;;457        OS_Pend(&pend_data,                                         /* Block task pending on Semaphore                      */
;;;458                (OS_PEND_OBJ *)((void *)p_sem),
;;;459                OS_TASK_PEND_ON_SEM,
;;;460                timeout);
;;;461        OS_CRITICAL_EXIT_NO_SCHED();
;;;462    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;463        TRACE_OS_SEM_PEND_BLOCK(p_sem);                             /* Record the event.                                    */
;;;464    #endif
;;;465        OSSched();                                                  /* Find the next highest priority task ready to run     */
;;;466    
;;;467        CPU_CRITICAL_ENTER();
;;;468        switch (OSTCBCurPtr->PendStatus) {
;;;469            case OS_STATUS_PEND_OK:                                 /* We got the semaphore                                 */
;;;470    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;471                 if (p_ts != DEF_NULL) {
;;;472                    *p_ts = OSTCBCurPtr->TS;
;;;473                 }
;;;474    #endif
;;;475    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;476                 TRACE_OS_SEM_PEND(p_sem);                          /* Record the event.                                    */
;;;477    #endif
;;;478                *p_err = OS_ERR_NONE;
;;;479                 break;
;;;480    
;;;481            case OS_STATUS_PEND_ABORT:                              /* Indicate that we aborted                             */
;;;482    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;483                 if (p_ts != DEF_NULL) {
;;;484                    *p_ts = OSTCBCurPtr->TS;
;;;485                 }
;;;486    #endif
;;;487    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;488                 TRACE_OS_SEM_PEND_FAILED(p_sem);                   /* Record the event.                                    */
;;;489    #endif
;;;490                *p_err = OS_ERR_PEND_ABORT;
;;;491                 break;
;;;492    
;;;493            case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get semaphore within timeout */
;;;494    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;495                 if (p_ts != DEF_NULL) {
;;;496                    *p_ts = 0u;
;;;497                 }
;;;498    #endif
;;;499    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;500                 TRACE_OS_SEM_PEND_FAILED(p_sem);                   /* Record the event.                                    */
;;;501    #endif
;;;502                *p_err = OS_ERR_TIMEOUT;
;;;503                 break;
;;;504    
;;;505            case OS_STATUS_PEND_DEL:                                /* Indicate that object pended on has been deleted      */
;;;506    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;507                 if (p_ts != DEF_NULL) {
;;;508                    *p_ts = OSTCBCurPtr->TS;
;;;509                 }
;;;510    #endif
;;;511    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;512                 TRACE_OS_SEM_PEND_FAILED(p_sem);                   /* Record the event.                                    */
;;;513    #endif
;;;514                *p_err = OS_ERR_OBJ_DEL;
;;;515                 break;
;;;516    
;;;517            default:
;;;518    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;519                 TRACE_OS_SEM_PEND_FAILED(p_sem);                   /* Record the event.                                    */
;;;520    #endif
;;;521                *p_err = OS_ERR_STATUS_INVALID;
;;;522                 CPU_CRITICAL_EXIT();
;;;523                 return (0u);
;;;524        }
;;;525        ctr = p_sem->Ctr;
;;;526        CPU_CRITICAL_EXIT();
;;;527        return (ctr);
;;;528    }
000022  b008              ADD      sp,sp,#0x20
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L3.40|
000028  b926              CBNZ     r6,|L3.52|
00002a  f64550c3          MOV      r0,#0x5dc3            ;382
00002e  8028              STRH     r0,[r5,#0]            ;382
000030  2000              MOVS     r0,#0                 ;383
000032  e7f6              B        |L3.34|
                  |L3.52|
000034  f1b80f00          CMP      r8,#0                 ;385
000038  d003              BEQ      |L3.66|
00003a  f5b84f00          CMP      r8,#0x8000            ;385
00003e  d102              BNE      |L3.70|
000040  e000              B        |L3.68|
                  |L3.66|
000042  bf00              NOP                            ;387
                  |L3.68|
000044  e004              B        |L3.80|
                  |L3.70|
000046  f6456025          MOV      r0,#0x5e25            ;394
00004a  8028              STRH     r0,[r5,#0]            ;394
00004c  2000              MOVS     r0,#0                 ;395
00004e  e7e8              B        |L3.34|
                  |L3.80|
000050  bf00              NOP                            ;388
000052  495a              LDR      r1,|L3.444|
000054  6830              LDR      r0,[r6,#0]            ;400
000056  4288              CMP      r0,r1                 ;400
000058  d004              BEQ      |L3.100|
00005a  f64550c4          MOV      r0,#0x5dc4            ;404
00005e  8028              STRH     r0,[r5,#0]            ;404
000060  2000              MOVS     r0,#0                 ;405
000062  e7de              B        |L3.34|
                  |L3.100|
000064  bf00              NOP                            ;410
000066  bf00              NOP                            ;410
000068  f7fffffe          BL       CPU_SR_Save
00006c  4682              MOV      r10,r0                ;410
00006e  bf00              NOP                            ;410
000070  f7fffffe          BL       CPU_IntDisMeasStart
000074  bf00              NOP                            ;410
000076  6a30              LDR      r0,[r6,#0x20]         ;411
000078  b198              CBZ      r0,|L3.162|
00007a  6a30              LDR      r0,[r6,#0x20]         ;412
00007c  1e40              SUBS     r0,r0,#1              ;412
00007e  6230              STR      r0,[r6,#0x20]         ;412
000080  b10c              CBZ      r4,|L3.134|
000082  6a70              LDR      r0,[r6,#0x24]         ;415
000084  6020              STR      r0,[r4,#0]            ;415
                  |L3.134|
000086  6a37              LDR      r7,[r6,#0x20]         ;418
000088  bf00              NOP                            ;419
00008a  f7fffffe          BL       CPU_IntDisMeasStop
00008e  bf00              NOP                            ;419
000090  4650              MOV      r0,r10                ;419
000092  f7fffffe          BL       CPU_SR_Restore
000096  bf00              NOP                            ;419
000098  bf00              NOP                            ;419
00009a  2000              MOVS     r0,#0                 ;420
00009c  8028              STRH     r0,[r5,#0]            ;420
00009e  4638              MOV      r0,r7                 ;424
0000a0  e7bf              B        |L3.34|
                  |L3.162|
0000a2  f4084000          AND      r0,r8,#0x8000         ;427
0000a6  b188              CBZ      r0,|L3.204|
0000a8  b10c              CBZ      r4,|L3.174|
0000aa  2000              MOVS     r0,#0                 ;430
0000ac  6020              STR      r0,[r4,#0]            ;430
                  |L3.174|
0000ae  6a37              LDR      r7,[r6,#0x20]         ;433
0000b0  bf00              NOP                            ;434
0000b2  f7fffffe          BL       CPU_IntDisMeasStop
0000b6  bf00              NOP                            ;434
0000b8  4650              MOV      r0,r10                ;434
0000ba  f7fffffe          BL       CPU_SR_Restore
0000be  bf00              NOP                            ;434
0000c0  bf00              NOP                            ;434
0000c2  f24610b0          MOV      r0,#0x61b0            ;435
0000c6  8028              STRH     r0,[r5,#0]            ;435
0000c8  4638              MOV      r0,r7                 ;439
0000ca  e7aa              B        |L3.34|
                  |L3.204|
0000cc  483c              LDR      r0,|L3.448|
0000ce  7800              LDRB     r0,[r0,#0]            ;441  ; OSSchedLockNestingCtr
0000d0  b180              CBZ      r0,|L3.244|
0000d2  b10c              CBZ      r4,|L3.216|
0000d4  2000              MOVS     r0,#0                 ;444
0000d6  6020              STR      r0,[r4,#0]            ;444
                  |L3.216|
0000d8  bf00              NOP                            ;447
0000da  f7fffffe          BL       CPU_IntDisMeasStop
0000de  bf00              NOP                            ;447
0000e0  4650              MOV      r0,r10                ;447
0000e2  f7fffffe          BL       CPU_SR_Restore
0000e6  bf00              NOP                            ;447
0000e8  bf00              NOP                            ;447
0000ea  f6465063          MOV      r0,#0x6d63            ;451
0000ee  8028              STRH     r0,[r5,#0]            ;451
0000f0  2000              MOVS     r0,#0                 ;452
0000f2  e796              B        |L3.34|
                  |L3.244|
0000f4  464b              MOV      r3,r9                 ;457
0000f6  2206              MOVS     r2,#6                 ;457
0000f8  4631              MOV      r1,r6                 ;457
0000fa  4668              MOV      r0,sp                 ;457
0000fc  f7fffffe          BL       OS_Pend
000100  bf00              NOP                            ;461
000102  f7fffffe          BL       CPU_IntDisMeasStop
000106  bf00              NOP                            ;461
000108  4650              MOV      r0,r10                ;461
00010a  f7fffffe          BL       CPU_SR_Restore
00010e  bf00              NOP                            ;461
000110  bf00              NOP                            ;461
000112  f7fffffe          BL       OSSched
000116  bf00              NOP                            ;467
000118  bf00              NOP                            ;467
00011a  f7fffffe          BL       CPU_SR_Save
00011e  4682              MOV      r10,r0                ;467
000120  bf00              NOP                            ;467
000122  f7fffffe          BL       CPU_IntDisMeasStart
000126  bf00              NOP                            ;467
000128  4826              LDR      r0,|L3.452|
00012a  6800              LDR      r0,[r0,#0]            ;468  ; OSTCBCurPtr
00012c  f8900035          LDRB     r0,[r0,#0x35]         ;468
000130  b130              CBZ      r0,|L3.320|
000132  2801              CMP      r0,#1                 ;468
000134  d00c              BEQ      |L3.336|
000136  2802              CMP      r0,#2                 ;468
000138  d01a              BEQ      |L3.368|
00013a  2803              CMP      r0,#3                 ;468
00013c  d121              BNE      |L3.386|
00013e  e010              B        |L3.354|
                  |L3.320|
000140  b11c              CBZ      r4,|L3.330|
000142  4820              LDR      r0,|L3.452|
000144  6800              LDR      r0,[r0,#0]            ;472  ; OSTCBCurPtr
000146  6c80              LDR      r0,[r0,#0x48]         ;472
000148  6020              STR      r0,[r4,#0]            ;472
                  |L3.330|
00014a  2000              MOVS     r0,#0                 ;478
00014c  8028              STRH     r0,[r5,#0]            ;478
00014e  e026              B        |L3.414|
                  |L3.336|
000150  b11c              CBZ      r4,|L3.346|
000152  481c              LDR      r0,|L3.452|
000154  6800              LDR      r0,[r0,#0]            ;484  ; OSTCBCurPtr
000156  6c80              LDR      r0,[r0,#0x48]         ;484
000158  6020              STR      r0,[r4,#0]            ;484
                  |L3.346|
00015a  f24610a9          MOV      r0,#0x61a9            ;490
00015e  8028              STRH     r0,[r5,#0]            ;490
000160  e01d              B        |L3.414|
                  |L3.354|
000162  b10c              CBZ      r4,|L3.360|
000164  2000              MOVS     r0,#0                 ;496
000166  6020              STR      r0,[r4,#0]            ;496
                  |L3.360|
000168  f24720d9          MOV      r0,#0x72d9            ;502
00016c  8028              STRH     r0,[r5,#0]            ;502
00016e  e016              B        |L3.414|
                  |L3.368|
000170  b11c              CBZ      r4,|L3.378|
000172  4814              LDR      r0,|L3.452|
000174  6800              LDR      r0,[r0,#0]            ;508  ; OSTCBCurPtr
000176  6c80              LDR      r0,[r0,#0x48]         ;508
000178  6020              STR      r0,[r4,#0]            ;508
                  |L3.378|
00017a  f64550c2          MOV      r0,#0x5dc2            ;514
00017e  8028              STRH     r0,[r5,#0]            ;514
000180  e00d              B        |L3.414|
                  |L3.386|
000182  f646602e          MOV      r0,#0x6e2e            ;521
000186  8028              STRH     r0,[r5,#0]            ;521
000188  bf00              NOP                            ;522
00018a  f7fffffe          BL       CPU_IntDisMeasStop
00018e  bf00              NOP                            ;522
000190  4650              MOV      r0,r10                ;522
000192  f7fffffe          BL       CPU_SR_Restore
000196  bf00              NOP                            ;522
000198  bf00              NOP                            ;522
00019a  2000              MOVS     r0,#0                 ;523
00019c  e741              B        |L3.34|
                  |L3.414|
00019e  bf00              NOP                            ;479
0001a0  6a37              LDR      r7,[r6,#0x20]         ;525
0001a2  bf00              NOP                            ;526
0001a4  f7fffffe          BL       CPU_IntDisMeasStop
0001a8  bf00              NOP                            ;526
0001aa  4650              MOV      r0,r10                ;526
0001ac  f7fffffe          BL       CPU_SR_Restore
0001b0  bf00              NOP                            ;526
0001b2  bf00              NOP                            ;526
0001b4  4638              MOV      r0,r7                 ;527
0001b6  e734              B        |L3.34|
;;;529    
                          ENDP

                  |L3.440|
                          DCD      OSIntNestingCtr
                  |L3.444|
                          DCD      0x414d4553
                  |L3.448|
                          DCD      OSSchedLockNestingCtr
                  |L3.452|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSSemPendAbort||, CODE, READONLY, ALIGN=2

                  OSSemPendAbort PROC
;;;565    #if (OS_CFG_SEM_PEND_ABORT_EN == DEF_ENABLED)
;;;566    OS_OBJ_QTY  OSSemPendAbort (OS_SEM  *p_sem,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;567                                OS_OPT   opt,
;;;568                                OS_ERR  *p_err)
;;;569    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;570        OS_PEND_LIST  *p_pend_list;
;;;571        OS_TCB        *p_tcb;
;;;572        CPU_TS         ts;
;;;573        OS_OBJ_QTY     nbr_tasks;
;;;574        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;575    
;;;576    
;;;577    
;;;578    #ifdef OS_SAFETY_CRITICAL
;;;579        if (p_err == DEF_NULL) {
;;;580            OS_SAFETY_CRITICAL_EXCEPTION();
;;;581            return (0u);
;;;582        }
;;;583    #endif
;;;584    
;;;585    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;586        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to Pend Abort from an ISR                */
00000e  483a              LDR      r0,|L4.248|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  b128              CBZ      r0,|L4.32|
;;;587           *p_err =  OS_ERR_PEND_ABORT_ISR;
000014  f24610aa          MOV      r0,#0x61aa
000018  8020              STRH     r0,[r4,#0]
;;;588            return (0u);
00001a  2000              MOVS     r0,#0
                  |L4.28|
;;;589        }
;;;590    #endif
;;;591    
;;;592    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;593        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;594           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;595            return (0u);
;;;596        }
;;;597    #endif
;;;598    
;;;599    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;600        if (p_sem == DEF_NULL) {                                    /* Validate 'p_sem'                                     */
;;;601           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;602            return (0u);
;;;603        }
;;;604        switch (opt) {                                              /* Validate 'opt'                                       */
;;;605            case OS_OPT_PEND_ABORT_1:
;;;606            case OS_OPT_PEND_ABORT_ALL:
;;;607            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;608            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;609                 break;
;;;610    
;;;611            default:
;;;612                *p_err =  OS_ERR_OPT_INVALID;
;;;613                 return (0u);
;;;614        }
;;;615    #endif
;;;616    
;;;617    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;618        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                       /* Make sure semaphore was created                      */
;;;619           *p_err =  OS_ERR_OBJ_TYPE;
;;;620            return (0u);
;;;621        }
;;;622    #endif
;;;623    
;;;624        CPU_CRITICAL_ENTER();
;;;625        p_pend_list = &p_sem->PendList;
;;;626        if (p_pend_list->HeadPtr == DEF_NULL) {                     /* Any task waiting on semaphore?                       */
;;;627            CPU_CRITICAL_EXIT();                                    /* No                                                   */
;;;628           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;629            return (0u);
;;;630        }
;;;631    
;;;632        OS_CRITICAL_ENTER_CPU_EXIT();
;;;633        nbr_tasks = 0u;
;;;634    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;635        ts        = OS_TS_GET();                                    /* Get local time stamp so all tasks get the same time  */
;;;636    #else
;;;637        ts        = 0u;
;;;638    #endif
;;;639        while (p_pend_list->HeadPtr != DEF_NULL) {
;;;640            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;641            OS_PendAbort((OS_PEND_OBJ *)((void *)p_sem),
;;;642                         p_tcb,
;;;643                         ts);
;;;644            nbr_tasks++;
;;;645            if (opt != OS_OPT_PEND_ABORT_ALL) {                     /* Pend abort all tasks waiting?                        */
;;;646                break;                                              /* No                                                   */
;;;647            }
;;;648        }
;;;649        OS_CRITICAL_EXIT_NO_SCHED();
;;;650    
;;;651        if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
;;;652            OSSched();                                              /* Run the scheduler                                    */
;;;653        }
;;;654    
;;;655       *p_err = OS_ERR_NONE;
;;;656        return (nbr_tasks);
;;;657    }
00001c  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.32|
000020  b925              CBNZ     r5,|L4.44|
000022  f64550c3          MOV      r0,#0x5dc3            ;601
000026  8020              STRH     r0,[r4,#0]            ;601
000028  2000              MOVS     r0,#0                 ;602
00002a  e7f7              B        |L4.28|
                  |L4.44|
00002c  b14e              CBZ      r6,|L4.66|
00002e  f5b67f80          CMP      r6,#0x100             ;604
000032  d007              BEQ      |L4.68|
000034  f5b64f00          CMP      r6,#0x8000            ;604
000038  d005              BEQ      |L4.70|
00003a  f5b64f01          CMP      r6,#0x8100            ;604
00003e  d104              BNE      |L4.74|
000040  e002              B        |L4.72|
                  |L4.66|
000042  bf00              NOP                            ;606
                  |L4.68|
000044  bf00              NOP                            ;607
                  |L4.70|
000046  bf00              NOP                            ;608
                  |L4.72|
000048  e004              B        |L4.84|
                  |L4.74|
00004a  f6456025          MOV      r0,#0x5e25            ;612
00004e  8020              STRH     r0,[r4,#0]            ;612
000050  2000              MOVS     r0,#0                 ;613
000052  e7e3              B        |L4.28|
                  |L4.84|
000054  bf00              NOP                            ;609
000056  4929              LDR      r1,|L4.252|
000058  6828              LDR      r0,[r5,#0]            ;618
00005a  4288              CMP      r0,r1                 ;618
00005c  d004              BEQ      |L4.104|
00005e  f64550c4          MOV      r0,#0x5dc4            ;619
000062  8020              STRH     r0,[r4,#0]            ;619
000064  2000              MOVS     r0,#0                 ;620
000066  e7d9              B        |L4.28|
                  |L4.104|
000068  bf00              NOP                            ;624
00006a  bf00              NOP                            ;624
00006c  f7fffffe          BL       CPU_SR_Save
000070  4682              MOV      r10,r0                ;624
000072  bf00              NOP                            ;624
000074  f7fffffe          BL       CPU_IntDisMeasStart
000078  bf00              NOP                            ;624
00007a  f1050708          ADD      r7,r5,#8              ;625
00007e  6838              LDR      r0,[r7,#0]            ;626
000080  b968              CBNZ     r0,|L4.158|
000082  bf00              NOP                            ;627
000084  f7fffffe          BL       CPU_IntDisMeasStop
000088  bf00              NOP                            ;627
00008a  4650              MOV      r0,r10                ;627
00008c  f7fffffe          BL       CPU_SR_Restore
000090  bf00              NOP                            ;627
000092  bf00              NOP                            ;627
000094  f24610ab          MOV      r0,#0x61ab            ;628
000098  8020              STRH     r0,[r4,#0]            ;628
00009a  2000              MOVS     r0,#0                 ;629
00009c  e7be              B        |L4.28|
                  |L4.158|
00009e  f04f0800          MOV      r8,#0                 ;633
0000a2  f7fffffe          BL       CPU_TS_TmrRd
0000a6  4683              MOV      r11,r0                ;635
0000a8  e00f              B        |L4.202|
                  |L4.170|
0000aa  6838              LDR      r0,[r7,#0]            ;640
0000ac  f8d09008          LDR      r9,[r0,#8]            ;640
0000b0  465a              MOV      r2,r11                ;641
0000b2  4649              MOV      r1,r9                 ;641
0000b4  4628              MOV      r0,r5                 ;641
0000b6  f7fffffe          BL       OS_PendAbort
0000ba  f1080001          ADD      r0,r8,#1              ;644
0000be  fa1ff880          UXTH     r8,r0                 ;644
0000c2  f5b67f80          CMP      r6,#0x100             ;645
0000c6  d000              BEQ      |L4.202|
0000c8  e002              B        |L4.208|
                  |L4.202|
0000ca  6838              LDR      r0,[r7,#0]            ;639
0000cc  2800              CMP      r0,#0                 ;639
0000ce  d1ec              BNE      |L4.170|
                  |L4.208|
0000d0  bf00              NOP                            ;646
0000d2  bf00              NOP                            ;649
0000d4  f7fffffe          BL       CPU_IntDisMeasStop
0000d8  bf00              NOP                            ;649
0000da  4650              MOV      r0,r10                ;649
0000dc  f7fffffe          BL       CPU_SR_Restore
0000e0  bf00              NOP                            ;649
0000e2  bf00              NOP                            ;649
0000e4  f4064000          AND      r0,r6,#0x8000         ;651
0000e8  b908              CBNZ     r0,|L4.238|
0000ea  f7fffffe          BL       OSSched
                  |L4.238|
0000ee  2000              MOVS     r0,#0                 ;655
0000f0  8020              STRH     r0,[r4,#0]            ;655
0000f2  4640              MOV      r0,r8                 ;656
0000f4  e792              B        |L4.28|
;;;658    #endif
                          ENDP

0000f6  0000              DCW      0x0000
                  |L4.248|
                          DCD      OSIntNestingCtr
                  |L4.252|
                          DCD      0x414d4553

                          AREA ||i.OSSemPost||, CODE, READONLY, ALIGN=2

                  OSSemPost PROC
;;;694    
;;;695    OS_SEM_CTR  OSSemPost (OS_SEM  *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;696                           OS_OPT   opt,
;;;697                           OS_ERR  *p_err)
;;;698    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;699        OS_SEM_CTR  ctr;
;;;700        CPU_TS      ts;
;;;701    
;;;702    
;;;703    
;;;704    #ifdef OS_SAFETY_CRITICAL
;;;705        if (p_err == DEF_NULL) {
;;;706            OS_SAFETY_CRITICAL_EXCEPTION();
;;;707            return (0u);
;;;708        }
;;;709    #endif
;;;710    
;;;711    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;712        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;713           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;714            return (0u);
;;;715        }
;;;716    #endif
;;;717    
;;;718    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;719        if (p_sem == DEF_NULL) {                                    /* Validate 'p_sem'                                     */
00000a  b92d              CBNZ     r5,|L5.24|
;;;720    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;721            TRACE_OS_SEM_POST_FAILED(p_sem);                        /* Record the event.                                    */
;;;722    #endif
;;;723           *p_err  = OS_ERR_OBJ_PTR_NULL;
00000c  f64550c3          MOV      r0,#0x5dc3
000010  8020              STRH     r0,[r4,#0]
;;;724            return (0u);
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;725        }
;;;726        switch (opt) {                                              /* Validate 'opt'                                       */
;;;727            case OS_OPT_POST_1:
;;;728            case OS_OPT_POST_ALL:
;;;729            case OS_OPT_POST_1   | OS_OPT_POST_NO_SCHED:
;;;730            case OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;731                 break;
;;;732    
;;;733            default:
;;;734    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;735                 TRACE_OS_SEM_POST_FAILED(p_sem);                   /* Record the event.                                    */
;;;736    #endif
;;;737                *p_err =  OS_ERR_OPT_INVALID;
;;;738                 return (0u);
;;;739        }
;;;740    #endif
;;;741    
;;;742    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;743        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                       /* Make sure semaphore was created                      */
;;;744    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;745            TRACE_OS_SEM_POST_FAILED(p_sem);                        /* Record the event.                                    */
;;;746    #endif
;;;747           *p_err = OS_ERR_OBJ_TYPE;
;;;748            return (0u);
;;;749        }
;;;750    #endif
;;;751    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;752        ts = OS_TS_GET();                                           /* Get timestamp                                        */
;;;753    #else
;;;754        ts = 0u;
;;;755    #endif
;;;756    
;;;757    #if (OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED)
;;;758        if (OSIntNestingCtr > 0u) {                                 /* See if called from an ISR                            */
;;;759            OS_IntQPost(OS_OBJ_TYPE_SEM,                            /* Post to ISR queue                                    */
;;;760                        (void      *)p_sem,
;;;761                        DEF_NULL,
;;;762                        0u,
;;;763                        0u,
;;;764                        opt,
;;;765                        ts,
;;;766                        p_err);
;;;767            return (0u);
;;;768        }
;;;769    #endif
;;;770    
;;;771    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;772        TRACE_OS_SEM_POST(p_sem);                                   /* Record the event.                                    */
;;;773    #endif
;;;774    
;;;775        ctr = OS_SemPost(p_sem,                                     /* Post to semaphore                                    */
;;;776                         opt,
;;;777                         ts,
;;;778                         p_err);
;;;779    
;;;780        return (ctr);
;;;781    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L5.24|
000018  b14e              CBZ      r6,|L5.46|
00001a  f5b67f00          CMP      r6,#0x200             ;726
00001e  d007              BEQ      |L5.48|
000020  f5b64f00          CMP      r6,#0x8000            ;726
000024  d005              BEQ      |L5.50|
000026  f5b64f02          CMP      r6,#0x8200            ;726
00002a  d104              BNE      |L5.54|
00002c  e002              B        |L5.52|
                  |L5.46|
00002e  bf00              NOP                            ;728
                  |L5.48|
000030  bf00              NOP                            ;729
                  |L5.50|
000032  bf00              NOP                            ;730
                  |L5.52|
000034  e004              B        |L5.64|
                  |L5.54|
000036  f6456025          MOV      r0,#0x5e25            ;737
00003a  8020              STRH     r0,[r4,#0]            ;737
00003c  2000              MOVS     r0,#0                 ;738
00003e  e7e9              B        |L5.20|
                  |L5.64|
000040  bf00              NOP                            ;731
000042  490a              LDR      r1,|L5.108|
000044  6828              LDR      r0,[r5,#0]            ;743
000046  4288              CMP      r0,r1                 ;743
000048  d004              BEQ      |L5.84|
00004a  f64550c4          MOV      r0,#0x5dc4            ;747
00004e  8020              STRH     r0,[r4,#0]            ;747
000050  2000              MOVS     r0,#0                 ;748
000052  e7df              B        |L5.20|
                  |L5.84|
000054  f7fffffe          BL       CPU_TS_TmrRd
000058  4680              MOV      r8,r0                 ;752
00005a  4623              MOV      r3,r4                 ;775
00005c  4642              MOV      r2,r8                 ;775
00005e  4631              MOV      r1,r6                 ;775
000060  4628              MOV      r0,r5                 ;775
000062  f7fffffe          BL       OS_SemPost
000066  4607              MOV      r7,r0                 ;775
000068  4638              MOV      r0,r7                 ;780
00006a  e7d3              B        |L5.20|
;;;782    
                          ENDP

                  |L5.108|
                          DCD      0x414d4553

                          AREA ||i.OSSemSet||, CODE, READONLY, ALIGN=2

                  OSSemSet PROC
;;;812    #if (OS_CFG_SEM_SET_EN == DEF_ENABLED)
;;;813    void  OSSemSet (OS_SEM      *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;814                    OS_SEM_CTR   cnt,
;;;815                    OS_ERR      *p_err)
;;;816    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;817        OS_PEND_LIST  *p_pend_list;
;;;818        CPU_SR_ALLOC();
00000a  f04f0800          MOV      r8,#0
;;;819    
;;;820    
;;;821    
;;;822    #ifdef OS_SAFETY_CRITICAL
;;;823        if (p_err == DEF_NULL) {
;;;824            OS_SAFETY_CRITICAL_EXCEPTION();
;;;825            return;
;;;826        }
;;;827    #endif
;;;828    
;;;829    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;830        if (OSIntNestingCtr > 0u) {                                 /* Can't call this function from an ISR                 */
00000e  481c              LDR      r0,|L6.128|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  b120              CBZ      r0,|L6.30|
;;;831           *p_err = OS_ERR_SET_ISR;
000014  f64650c6          MOV      r0,#0x6dc6
000018  8028              STRH     r0,[r5,#0]
                  |L6.26|
;;;832            return;
;;;833        }
;;;834    #endif
;;;835    
;;;836    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;837        if (p_sem == DEF_NULL) {                                    /* Validate 'p_sem'                                     */
;;;838           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;839            return;
;;;840        }
;;;841    #endif
;;;842    
;;;843    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;844        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                       /* Make sure semaphore was created                      */
;;;845           *p_err = OS_ERR_OBJ_TYPE;
;;;846            return;
;;;847        }
;;;848    #endif
;;;849    
;;;850       *p_err = OS_ERR_NONE;
;;;851        CPU_CRITICAL_ENTER();
;;;852        if (p_sem->Ctr > 0u) {                                      /* See if semaphore already has a count                 */
;;;853            p_sem->Ctr = cnt;                                       /* Yes, set it to the new value specified.              */
;;;854        } else {
;;;855            p_pend_list = &p_sem->PendList;                         /* No                                                   */
;;;856            if (p_pend_list->HeadPtr == DEF_NULL) {                 /* See if task(s) waiting?                              */
;;;857                p_sem->Ctr = cnt;                                   /* No, OK to set the value                              */
;;;858            } else {
;;;859               *p_err      = OS_ERR_TASK_WAITING;
;;;860            }
;;;861        }
;;;862        CPU_CRITICAL_EXIT();
;;;863    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.30|
00001e  b91c              CBNZ     r4,|L6.40|
000020  f64550c3          MOV      r0,#0x5dc3            ;838
000024  8028              STRH     r0,[r5,#0]            ;838
000026  e7f8              B        |L6.26|
                  |L6.40|
000028  4916              LDR      r1,|L6.132|
00002a  6820              LDR      r0,[r4,#0]            ;844
00002c  4288              CMP      r0,r1                 ;844
00002e  d003              BEQ      |L6.56|
000030  f64550c4          MOV      r0,#0x5dc4            ;845
000034  8028              STRH     r0,[r5,#0]            ;845
000036  e7f0              B        |L6.26|
                  |L6.56|
000038  2000              MOVS     r0,#0                 ;850
00003a  8028              STRH     r0,[r5,#0]            ;850
00003c  bf00              NOP                            ;851
00003e  bf00              NOP                            ;851
000040  f7fffffe          BL       CPU_SR_Save
000044  4680              MOV      r8,r0                 ;851
000046  bf00              NOP                            ;851
000048  f7fffffe          BL       CPU_IntDisMeasStart
00004c  bf00              NOP                            ;851
00004e  6a20              LDR      r0,[r4,#0x20]         ;852
000050  b108              CBZ      r0,|L6.86|
000052  6226              STR      r6,[r4,#0x20]         ;853
000054  e008              B        |L6.104|
                  |L6.86|
000056  f1040708          ADD      r7,r4,#8              ;855
00005a  6838              LDR      r0,[r7,#0]            ;856
00005c  b908              CBNZ     r0,|L6.98|
00005e  6226              STR      r6,[r4,#0x20]         ;857
000060  e002              B        |L6.104|
                  |L6.98|
000062  f247105f          MOV      r0,#0x715f            ;859
000066  8028              STRH     r0,[r5,#0]            ;859
                  |L6.104|
000068  bf00              NOP                            ;862
00006a  f7fffffe          BL       CPU_IntDisMeasStop
00006e  bf00              NOP                            ;862
000070  4640              MOV      r0,r8                 ;862
000072  f7fffffe          BL       CPU_SR_Restore
000076  bf00              NOP                            ;862
000078  bf00              NOP                            ;862
00007a  bf00              NOP      
00007c  e7cd              B        |L6.26|
;;;864    #endif
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      OSIntNestingCtr
                  |L6.132|
                          DCD      0x414d4553

                          AREA ||i.OS_SemClr||, CODE, READONLY, ALIGN=2

                  OS_SemClr PROC
;;;882    
;;;883    void  OS_SemClr (OS_SEM  *p_sem)
000000  b510              PUSH     {r4,lr}
;;;884    {
000002  4604              MOV      r4,r0
;;;885    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;886        p_sem->Type    = OS_OBJ_TYPE_NONE;                          /* Mark the data structure as a NONE                    */
000004  4805              LDR      r0,|L7.28|
000006  6020              STR      r0,[r4,#0]
;;;887    #endif
;;;888        p_sem->Ctr     = 0u;                                        /* Set semaphore value                                  */
000008  2000              MOVS     r0,#0
00000a  6220              STR      r0,[r4,#0x20]
;;;889    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;890        p_sem->TS      = 0u;                                        /* Clear the time stamp                                 */
00000c  6260              STR      r0,[r4,#0x24]
;;;891    #endif
;;;892    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;893        p_sem->NamePtr = (CPU_CHAR *)((void *)"?SEM");
00000e  a004              ADR      r0,|L7.32|
000010  6060              STR      r0,[r4,#4]
;;;894    #endif
;;;895        OS_PendListInit(&p_sem->PendList);                          /* Initialize the waiting list                          */
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       OS_PendListInit
;;;896    }
00001a  bd10              POP      {r4,pc}
;;;897    
                          ENDP

                  |L7.28|
                          DCD      0x454e4f4e
                  |L7.32|
000020  3f53454d          DCB      "?SEM",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.OS_SemDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_SemDbgListAdd PROC
;;;914    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;915    void  OS_SemDbgListAdd (OS_SEM  *p_sem)
000000  a109              ADR      r1,|L8.40|
;;;916    {
;;;917        p_sem->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;918        p_sem->DbgPrevPtr               = DEF_NULL;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;919        if (OSSemDbgListPtr == DEF_NULL) {
000008  4908              LDR      r1,|L8.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
00000c  b911              CBNZ     r1,|L8.20|
;;;920            p_sem->DbgNextPtr           = DEF_NULL;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L8.32|
                  |L8.20|
;;;921        } else {
;;;922            p_sem->DbgNextPtr           =  OSSemDbgListPtr;
000014  4905              LDR      r1,|L8.44|
000016  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;923            OSSemDbgListPtr->DbgPrevPtr =  p_sem;
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L8.32|
;;;924        }
;;;925        OSSemDbgListPtr                 =  p_sem;
000020  4902              LDR      r1,|L8.44|
000022  6008              STR      r0,[r1,#0]  ; OSSemDbgListPtr
;;;926    }
000024  4770              BX       lr
;;;927    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L8.44|
                          DCD      OSSemDbgListPtr

                          AREA ||i.OS_SemDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_SemDbgListRemove PROC
;;;929    
;;;930    void  OS_SemDbgListRemove (OS_SEM  *p_sem)
000000  6942              LDR      r2,[r0,#0x14]
;;;931    {
;;;932        OS_SEM  *p_sem_next;
;;;933        OS_SEM  *p_sem_prev;
;;;934    
;;;935    
;;;936        p_sem_prev = p_sem->DbgPrevPtr;
;;;937        p_sem_next = p_sem->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;938    
;;;939        if (p_sem_prev == DEF_NULL) {
000004  b93a              CBNZ     r2,|L9.22|
;;;940            OSSemDbgListPtr = p_sem_next;
000006  4b09              LDR      r3,|L9.44|
000008  6019              STR      r1,[r3,#0]  ; OSSemDbgListPtr
;;;941            if (p_sem_next != DEF_NULL) {
00000a  b109              CBZ      r1,|L9.16|
;;;942                p_sem_next->DbgPrevPtr = DEF_NULL;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L9.16|
;;;943            }
;;;944            p_sem->DbgNextPtr = DEF_NULL;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L9.42|
                  |L9.22|
;;;945    
;;;946        } else if (p_sem_next == DEF_NULL) {
000016  b919              CBNZ     r1,|L9.32|
;;;947            p_sem_prev->DbgNextPtr = DEF_NULL;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;948            p_sem->DbgPrevPtr      = DEF_NULL;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L9.42|
                  |L9.32|
;;;949    
;;;950        } else {
;;;951            p_sem_prev->DbgNextPtr =  p_sem_next;
000020  6191              STR      r1,[r2,#0x18]
;;;952            p_sem_next->DbgPrevPtr =  p_sem_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;953            p_sem->DbgNextPtr      = DEF_NULL;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;954            p_sem->DbgPrevPtr      = DEF_NULL;
000028  6143              STR      r3,[r0,#0x14]
                  |L9.42|
;;;955        }
;;;956    }
00002a  4770              BX       lr
;;;957    #endif
                          ENDP

                  |L9.44|
                          DCD      OSSemDbgListPtr

                          AREA ||i.OS_SemPost||, CODE, READONLY, ALIGN=1

                  OS_SemPost PROC
;;;989    
;;;990    OS_SEM_CTR  OS_SemPost (OS_SEM  *p_sem,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;991                            OS_OPT   opt,
;;;992                            CPU_TS   ts,
;;;993                            OS_ERR  *p_err)
;;;994    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;995        OS_SEM_CTR     ctr;
;;;996        OS_PEND_LIST  *p_pend_list;
;;;997        OS_PEND_DATA  *p_pend_data;
;;;998        OS_PEND_DATA  *p_pend_data_next;
;;;999        OS_TCB        *p_tcb;
;;;1000       CPU_SR_ALLOC();
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;1001   
;;;1002   
;;;1003       CPU_CRITICAL_ENTER();
000010  bf00              NOP      
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SR_Save
000018  9001              STR      r0,[sp,#4]
00001a  bf00              NOP      
00001c  f7fffffe          BL       CPU_IntDisMeasStart
000020  bf00              NOP      
;;;1004       p_pend_list = &p_sem->PendList;
000022  f1040908          ADD      r9,r4,#8
;;;1005       if (p_pend_list->HeadPtr == DEF_NULL) {                     /* Any task waiting on semaphore?                       */
000026  f8d90000          LDR      r0,[r9,#0]
00002a  bb28              CBNZ     r0,|L10.120|
;;;1006           if (p_sem->Ctr == (OS_SEM_CTR)-1) {
00002c  6a20              LDR      r0,[r4,#0x20]
00002e  1c40              ADDS     r0,r0,#1
000030  b970              CBNZ     r0,|L10.80|
;;;1007              CPU_CRITICAL_EXIT();
000032  bf00              NOP      
000034  f7fffffe          BL       CPU_IntDisMeasStop
000038  bf00              NOP      
00003a  9801              LDR      r0,[sp,#4]
00003c  f7fffffe          BL       CPU_SR_Restore
000040  bf00              NOP      
000042  bf00              NOP      
;;;1008             *p_err = OS_ERR_SEM_OVF;
000044  f64650c5          MOV      r0,#0x6dc5
000048  8028              STRH     r0,[r5,#0]
;;;1009              return (0u);
00004a  2000              MOVS     r0,#0
                  |L10.76|
;;;1010           }
;;;1011           p_sem->Ctr++;                                           /* No                                                   */
;;;1012           ctr       = p_sem->Ctr;
;;;1013   #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;1014           p_sem->TS = ts;                                         /* Save timestamp in semaphore control block            */
;;;1015   #endif
;;;1016           CPU_CRITICAL_EXIT();
;;;1017          *p_err     = OS_ERR_NONE;
;;;1018           return (ctr);
;;;1019       }
;;;1020   
;;;1021       OS_CRITICAL_ENTER_CPU_EXIT();
;;;1022       p_pend_data = p_pend_list->HeadPtr;
;;;1023       while (p_pend_data != DEF_NULL) {
;;;1024           p_tcb            = p_pend_data->TCBPtr;
;;;1025           p_pend_data_next = p_pend_data->NextPtr;
;;;1026           OS_Post((OS_PEND_OBJ *)((void *)p_sem),
;;;1027                   p_tcb,
;;;1028                   DEF_NULL,
;;;1029                   0u,
;;;1030                   ts);
;;;1031           if ((opt & OS_OPT_POST_ALL) == 0) {                     /* Post to all tasks waiting?                           */
;;;1032               break;                                              /* No                                                   */
;;;1033           }
;;;1034           p_pend_data = p_pend_data_next;
;;;1035       }
;;;1036       OS_CRITICAL_EXIT_NO_SCHED();
;;;1037       if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
;;;1038           OSSched();                                              /* Run the scheduler                                    */
;;;1039       }
;;;1040      *p_err = OS_ERR_NONE;
;;;1041       return (0u);
;;;1042   }
00004c  e8bd8ffe          POP      {r1-r11,pc}
                  |L10.80|
000050  6a20              LDR      r0,[r4,#0x20]         ;1011
000052  1c40              ADDS     r0,r0,#1              ;1011
000054  6220              STR      r0,[r4,#0x20]         ;1011
000056  f8d4a020          LDR      r10,[r4,#0x20]        ;1012
00005a  f8c48024          STR      r8,[r4,#0x24]         ;1014
00005e  bf00              NOP                            ;1016
000060  f7fffffe          BL       CPU_IntDisMeasStop
000064  bf00              NOP                            ;1016
000066  9801              LDR      r0,[sp,#4]            ;1016
000068  f7fffffe          BL       CPU_SR_Restore
00006c  bf00              NOP                            ;1016
00006e  bf00              NOP                            ;1016
000070  2000              MOVS     r0,#0                 ;1017
000072  8028              STRH     r0,[r5,#0]            ;1017
000074  4650              MOV      r0,r10                ;1018
000076  e7e9              B        |L10.76|
                  |L10.120|
000078  f8d96000          LDR      r6,[r9,#0]            ;1022
00007c  e010              B        |L10.160|
                  |L10.126|
00007e  68b0              LDR      r0,[r6,#8]            ;1024
000080  9002              STR      r0,[sp,#8]            ;1024
000082  f8d6b004          LDR      r11,[r6,#4]           ;1025
000086  2300              MOVS     r3,#0                 ;1026
000088  461a              MOV      r2,r3                 ;1026
00008a  f8cd8000          STR      r8,[sp,#0]            ;1026
00008e  4620              MOV      r0,r4                 ;1026
000090  9902              LDR      r1,[sp,#8]            ;1026
000092  f7fffffe          BL       OS_Post
000096  f4077000          AND      r0,r7,#0x200          ;1031
00009a  b900              CBNZ     r0,|L10.158|
00009c  e002              B        |L10.164|
                  |L10.158|
00009e  465e              MOV      r6,r11                ;1034
                  |L10.160|
0000a0  2e00              CMP      r6,#0                 ;1023
0000a2  d1ec              BNE      |L10.126|
                  |L10.164|
0000a4  bf00              NOP                            ;1032
0000a6  bf00              NOP                            ;1036
0000a8  f7fffffe          BL       CPU_IntDisMeasStop
0000ac  bf00              NOP                            ;1036
0000ae  9801              LDR      r0,[sp,#4]            ;1036
0000b0  f7fffffe          BL       CPU_SR_Restore
0000b4  bf00              NOP                            ;1036
0000b6  bf00              NOP                            ;1036
0000b8  f4074000          AND      r0,r7,#0x8000         ;1037
0000bc  b908              CBNZ     r0,|L10.194|
0000be  f7fffffe          BL       OSSched
                  |L10.194|
0000c2  2000              MOVS     r0,#0                 ;1040
0000c4  8028              STRH     r0,[r5,#0]            ;1040
0000c6  bf00              NOP                            ;1041
0000c8  e7c0              B        |L10.76|
;;;1043   
                          ENDP

