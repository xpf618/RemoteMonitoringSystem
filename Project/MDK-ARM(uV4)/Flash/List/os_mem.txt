; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_mem.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_mem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\½øÐÐÊ±\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\os_mem.crf ..\..\uCOS-III\uCOS-III\Source\os_mem.c]
                          THUMB

                          AREA ||i.OSMemCreate||, CODE, READONLY, ALIGN=2

                  OSMemCreate PROC
;;;79     
;;;80     void  OSMemCreate (OS_MEM       *p_mem,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;81                        CPU_CHAR     *p_name,
;;;82                        void         *p_addr,
;;;83                        OS_MEM_QTY    n_blks,
;;;84                        OS_MEM_SIZE   blk_size,
;;;85                        OS_ERR       *p_err)
;;;86     {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9610          LDRD     r9,r6,[sp,#0x40]
;;;87     #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;88         CPU_DATA       align_msk;
;;;89     #endif
;;;90         OS_MEM_QTY     i;
;;;91         OS_MEM_QTY     loops;
;;;92         CPU_INT08U    *p_blk;
;;;93         void         **p_link;
;;;94         CPU_SR_ALLOC();
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;95     
;;;96     
;;;97     
;;;98     #ifdef OS_SAFETY_CRITICAL
;;;99         if (p_err == DEF_NULL) {
;;;100            OS_SAFETY_CRITICAL_EXCEPTION();
;;;101            return;
;;;102        }
;;;103    #endif
;;;104    
;;;105    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;106        if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;107           *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;108            return;
;;;109        }
;;;110    #endif
;;;111    
;;;112    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;113        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
000014  4836              LDR      r0,|L1.240|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000018  b128              CBZ      r0,|L1.38|
;;;114           *p_err = OS_ERR_MEM_CREATE_ISR;
00001a  f24560b9          MOV      r0,#0x56b9
00001e  8030              STRH     r0,[r6,#0]
                  |L1.32|
;;;115            return;
;;;116        }
;;;117    #endif
;;;118    
;;;119    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;120        if (p_addr == DEF_NULL) {                                   /* Must pass a valid address for the memory part.       */
;;;121           *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
;;;122            return;
;;;123        }
;;;124        if (n_blks < 2u) {                                          /* Must have at least 2 blocks per partition            */
;;;125           *p_err = OS_ERR_MEM_INVALID_BLKS;
;;;126            return;
;;;127        }
;;;128        if (blk_size < sizeof(void *)) {                            /* Must contain space for at least a pointer            */
;;;129           *p_err = OS_ERR_MEM_INVALID_SIZE;
;;;130            return;
;;;131        }
;;;132        align_msk = sizeof(void *) - 1u;
;;;133        if (align_msk > 0u) {
;;;134            if (((CPU_ADDR)p_addr & align_msk) != 0u){              /* Must be pointer size aligned                         */
;;;135               *p_err = OS_ERR_MEM_INVALID_P_ADDR;
;;;136                return;
;;;137            }
;;;138            if ((blk_size & align_msk) != 0u) {                     /* Block size must be a multiple address size           */
;;;139               *p_err = OS_ERR_MEM_INVALID_SIZE;
;;;140                return;
;;;141            }
;;;142        }
;;;143    #endif
;;;144    
;;;145        p_link = (void **)p_addr;                                   /* Create linked list of free memory blocks             */
;;;146        p_blk  = (CPU_INT08U *)p_addr;
;;;147        loops  = n_blks - 1u;
;;;148        for (i = 0u; i < loops; i++) {
;;;149            p_blk +=  blk_size;
;;;150           *p_link = (void  *)p_blk;                                /* Save pointer to NEXT block in CURRENT block          */
;;;151            p_link = (void **)(void *)p_blk;                        /* Position     to NEXT block                           */
;;;152        }
;;;153       *p_link             = DEF_NULL;                              /* Last memory block points to NULL                     */
;;;154    
;;;155        OS_CRITICAL_ENTER();
;;;156    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;157        p_mem->Type        = OS_OBJ_TYPE_MEM;                       /* Set the type of object                               */
;;;158    #endif
;;;159    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;160        p_mem->NamePtr     = p_name;                                /* Save name of memory partition                        */
;;;161    #else
;;;162        (void)&p_name;
;;;163    #endif
;;;164        p_mem->AddrPtr     = p_addr;                                /* Store start address of memory partition              */
;;;165        p_mem->FreeListPtr = p_addr;                                /* Initialize pointer to pool of free blocks            */
;;;166        p_mem->NbrFree     = n_blks;                                /* Store number of free blocks in MCB                   */
;;;167        p_mem->NbrMax      = n_blks;
;;;168        p_mem->BlkSize     = blk_size;                              /* Store block size of each memory blocks               */
;;;169    
;;;170    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;171        OS_MemDbgListAdd(p_mem);
;;;172        OSMemQty++;
;;;173    #endif
;;;174    
;;;175    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;176        TRACE_OS_MEM_CREATE(p_mem, p_name);                         /* Record the event.                                    */
;;;177    #endif
;;;178    
;;;179        OS_CRITICAL_EXIT_NO_SCHED();
;;;180       *p_err = OS_ERR_NONE;
;;;181    }
000020  b007              ADD      sp,sp,#0x1c
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.38|
000026  b91d              CBNZ     r5,|L1.48|
000028  f24560bb          MOV      r0,#0x56bb            ;121
00002c  8030              STRH     r0,[r6,#0]            ;121
00002e  e7f7              B        |L1.32|
                  |L1.48|
000030  2f02              CMP      r7,#2                 ;124
000032  d203              BCS      |L1.60|
000034  f24560bc          MOV      r0,#0x56bc            ;125
000038  8030              STRH     r0,[r6,#0]            ;125
00003a  e7f1              B        |L1.32|
                  |L1.60|
00003c  f1b90f04          CMP      r9,#4                 ;128
000040  d203              BCS      |L1.74|
000042  f24560c1          MOV      r0,#0x56c1            ;129
000046  8030              STRH     r0,[r6,#0]            ;129
000048  e7ea              B        |L1.32|
                  |L1.74|
00004a  f04f0a03          MOV      r10,#3                ;132
00004e  f1ba0f00          CMP      r10,#0                ;133
000052  d00d              BEQ      |L1.112|
000054  ea05000a          AND      r0,r5,r10             ;134
000058  b118              CBZ      r0,|L1.98|
00005a  f24560bb          MOV      r0,#0x56bb            ;135
00005e  8030              STRH     r0,[r6,#0]            ;135
000060  e7de              B        |L1.32|
                  |L1.98|
000062  ea09000a          AND      r0,r9,r10             ;138
000066  b118              CBZ      r0,|L1.112|
000068  f24560c1          MOV      r0,#0x56c1            ;139
00006c  8030              STRH     r0,[r6,#0]            ;139
00006e  e7d7              B        |L1.32|
                  |L1.112|
000070  46ab              MOV      r11,r5                ;145
000072  46a8              MOV      r8,r5                 ;146
000074  1e78              SUBS     r0,r7,#1              ;147
000076  b280              UXTH     r0,r0                 ;147
000078  9001              STR      r0,[sp,#4]            ;147
00007a  2000              MOVS     r0,#0                 ;148
00007c  9002              STR      r0,[sp,#8]            ;148
00007e  e007              B        |L1.144|
                  |L1.128|
000080  44c8              ADD      r8,r8,r9              ;149
000082  f8cb8000          STR      r8,[r11,#0]           ;150
000086  46c3              MOV      r11,r8                ;151
000088  9802              LDR      r0,[sp,#8]            ;148
00008a  1c40              ADDS     r0,r0,#1              ;148
00008c  b280              UXTH     r0,r0                 ;148
00008e  9002              STR      r0,[sp,#8]            ;148
                  |L1.144|
000090  e9dd1001          LDRD     r1,r0,[sp,#4]         ;148
000094  4288              CMP      r0,r1                 ;148
000096  dbf3              BLT      |L1.128|
000098  2000              MOVS     r0,#0                 ;153
00009a  f8cb0000          STR      r0,[r11,#0]           ;153
00009e  bf00              NOP                            ;155
0000a0  bf00              NOP                            ;155
0000a2  f7fffffe          BL       CPU_SR_Save
0000a6  9000              STR      r0,[sp,#0]            ;155
0000a8  bf00              NOP                            ;155
0000aa  f7fffffe          BL       CPU_IntDisMeasStart
0000ae  bf00              NOP                            ;155
0000b0  4810              LDR      r0,|L1.244|
0000b2  6020              STR      r0,[r4,#0]            ;157
0000b4  9804              LDR      r0,[sp,#0x10]         ;160
0000b6  6060              STR      r0,[r4,#4]            ;160
0000b8  60a5              STR      r5,[r4,#8]            ;164
0000ba  60e5              STR      r5,[r4,#0xc]          ;165
0000bc  82a7              STRH     r7,[r4,#0x14]         ;166
0000be  8267              STRH     r7,[r4,#0x12]         ;167
0000c0  f8a49010          STRH     r9,[r4,#0x10]         ;168
0000c4  4620              MOV      r0,r4                 ;171
0000c6  f7fffffe          BL       OS_MemDbgListAdd
0000ca  480b              LDR      r0,|L1.248|
0000cc  8800              LDRH     r0,[r0,#0]            ;172  ; OSMemQty
0000ce  1c40              ADDS     r0,r0,#1              ;172
0000d0  4909              LDR      r1,|L1.248|
0000d2  8008              STRH     r0,[r1,#0]            ;172
0000d4  bf00              NOP                            ;179
0000d6  f7fffffe          BL       CPU_IntDisMeasStop
0000da  bf00              NOP                            ;179
0000dc  9800              LDR      r0,[sp,#0]            ;179
0000de  f7fffffe          BL       CPU_SR_Restore
0000e2  bf00              NOP                            ;179
0000e4  bf00              NOP                            ;179
0000e6  2000              MOVS     r0,#0                 ;180
0000e8  8030              STRH     r0,[r6,#0]            ;180
0000ea  bf00              NOP      
0000ec  e798              B        |L1.32|
;;;182    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      OSIntNestingCtr
                  |L1.244|
                          DCD      0x204d454d
                  |L1.248|
                          DCD      OSMemQty

                          AREA ||i.OSMemGet||, CODE, READONLY, ALIGN=2

                  OSMemGet PROC
;;;206    
;;;207    void  *OSMemGet (OS_MEM  *p_mem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;208                     OS_ERR  *p_err)
;;;209    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;210        void    *p_blk;
;;;211        CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;212    
;;;213    
;;;214    
;;;215    #ifdef OS_SAFETY_CRITICAL
;;;216        if (p_err == DEF_NULL) {
;;;217            OS_SAFETY_CRITICAL_EXCEPTION();
;;;218            return (DEF_NULL);
;;;219        }
;;;220    #endif
;;;221    
;;;222    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;223        if (p_mem == DEF_NULL) {                                    /* Must point to a valid memory partition               */
00000a  b92c              CBNZ     r4,|L2.24|
;;;224    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;225            TRACE_OS_MEM_GET_FAILED(p_mem);                         /* Record the event.                                    */
;;;226    #endif
;;;227           *p_err  = OS_ERR_MEM_INVALID_P_MEM;
00000c  f24560bf          MOV      r0,#0x56bf
000010  8028              STRH     r0,[r5,#0]
;;;228            return (DEF_NULL);
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;229        }
;;;230    #endif
;;;231    
;;;232    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;233        if (p_mem->Type != OS_OBJ_TYPE_MEM) {                       /* Make sure the memory block was created               */
;;;234           *p_err = OS_ERR_OBJ_TYPE;
;;;235            return (DEF_NULL);
;;;236        }
;;;237    #endif
;;;238    
;;;239    
;;;240        CPU_CRITICAL_ENTER();
;;;241        if (p_mem->NbrFree == 0u) {                                 /* See if there are any free memory blocks              */
;;;242            CPU_CRITICAL_EXIT();
;;;243    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;244            TRACE_OS_MEM_GET_FAILED(p_mem);                         /* Record the event.                                    */
;;;245    #endif
;;;246           *p_err = OS_ERR_MEM_NO_FREE_BLKS;                        /* No,  Notify caller of empty memory partition         */
;;;247            return (DEF_NULL);                                      /* Return NULL pointer to caller                        */
;;;248        }
;;;249        p_blk              = p_mem->FreeListPtr;                    /* Yes, point to next free memory block                 */
;;;250        p_mem->FreeListPtr = *(void **)p_blk;                       /* Adjust pointer to new free list                      */
;;;251        p_mem->NbrFree--;                                           /* One less memory block in this partition              */
;;;252        CPU_CRITICAL_EXIT();
;;;253    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;254        TRACE_OS_MEM_GET(p_mem);                                    /* Record the event.                                    */
;;;255    #endif
;;;256       *p_err = OS_ERR_NONE;                                        /* No error                                             */
;;;257        return (p_blk);                                             /* Return memory block to caller                        */
;;;258    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L2.24|
000018  491a              LDR      r1,|L2.132|
00001a  6820              LDR      r0,[r4,#0]            ;233
00001c  4288              CMP      r0,r1                 ;233
00001e  d004              BEQ      |L2.42|
000020  f64550c4          MOV      r0,#0x5dc4            ;234
000024  8028              STRH     r0,[r5,#0]            ;234
000026  2000              MOVS     r0,#0                 ;235
000028  e7f4              B        |L2.20|
                  |L2.42|
00002a  bf00              NOP                            ;240
00002c  bf00              NOP                            ;240
00002e  f7fffffe          BL       CPU_SR_Save
000032  4607              MOV      r7,r0                 ;240
000034  bf00              NOP                            ;240
000036  f7fffffe          BL       CPU_IntDisMeasStart
00003a  bf00              NOP                            ;240
00003c  8aa0              LDRH     r0,[r4,#0x14]         ;241
00003e  b968              CBNZ     r0,|L2.92|
000040  bf00              NOP                            ;242
000042  f7fffffe          BL       CPU_IntDisMeasStop
000046  bf00              NOP                            ;242
000048  4638              MOV      r0,r7                 ;242
00004a  f7fffffe          BL       CPU_SR_Restore
00004e  bf00              NOP                            ;242
000050  bf00              NOP                            ;242
000052  f24560c2          MOV      r0,#0x56c2            ;246
000056  8028              STRH     r0,[r5,#0]            ;246
000058  2000              MOVS     r0,#0                 ;247
00005a  e7db              B        |L2.20|
                  |L2.92|
00005c  68e6              LDR      r6,[r4,#0xc]          ;249
00005e  6830              LDR      r0,[r6,#0]            ;250
000060  60e0              STR      r0,[r4,#0xc]          ;250
000062  8aa0              LDRH     r0,[r4,#0x14]         ;251
000064  1e40              SUBS     r0,r0,#1              ;251
000066  82a0              STRH     r0,[r4,#0x14]         ;251
000068  bf00              NOP                            ;252
00006a  f7fffffe          BL       CPU_IntDisMeasStop
00006e  bf00              NOP                            ;252
000070  4638              MOV      r0,r7                 ;252
000072  f7fffffe          BL       CPU_SR_Restore
000076  bf00              NOP                            ;252
000078  bf00              NOP                            ;252
00007a  2000              MOVS     r0,#0                 ;256
00007c  8028              STRH     r0,[r5,#0]            ;256
00007e  4630              MOV      r0,r6                 ;257
000080  e7c8              B        |L2.20|
;;;259    
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
                          DCD      0x204d454d

                          AREA ||i.OSMemPut||, CODE, READONLY, ALIGN=2

                  OSMemPut PROC
;;;285    
;;;286    void  OSMemPut (OS_MEM  *p_mem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;287                    void    *p_blk,
;;;288                    OS_ERR  *p_err)
;;;289    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;290        CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;291    
;;;292    
;;;293    
;;;294    #ifdef OS_SAFETY_CRITICAL
;;;295        if (p_err == DEF_NULL) {
;;;296            OS_SAFETY_CRITICAL_EXCEPTION();
;;;297            return;
;;;298        }
;;;299    #endif
;;;300    
;;;301    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;302        if (p_mem == DEF_NULL) {                                    /* Must point to a valid memory partition               */
00000c  b924              CBNZ     r4,|L3.24|
;;;303    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;304            TRACE_OS_MEM_PUT_FAILED(p_mem);                         /* Record the event.                                    */
;;;305    #endif
;;;306           *p_err  = OS_ERR_MEM_INVALID_P_MEM;
00000e  f24560bf          MOV      r0,#0x56bf
000012  8028              STRH     r0,[r5,#0]
                  |L3.20|
;;;307            return;
;;;308        }
;;;309        if (p_blk == DEF_NULL) {                                    /* Must release a valid block                           */
;;;310    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;311            TRACE_OS_MEM_PUT_FAILED(p_mem);                         /* Record the event.                                    */
;;;312    #endif
;;;313           *p_err  = OS_ERR_MEM_INVALID_P_BLK;
;;;314            return;
;;;315        }
;;;316    #endif
;;;317    
;;;318    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;319        if (p_mem->Type != OS_OBJ_TYPE_MEM) {                       /* Make sure the memory block was created               */
;;;320           *p_err = OS_ERR_OBJ_TYPE;
;;;321            return;
;;;322        }
;;;323    #endif
;;;324    
;;;325    
;;;326        CPU_CRITICAL_ENTER();
;;;327        if (p_mem->NbrFree >= p_mem->NbrMax) {                      /* Make sure all blocks not already returned            */
;;;328            CPU_CRITICAL_EXIT();
;;;329    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;330            TRACE_OS_MEM_PUT_FAILED(p_mem);                         /* Record the event.                                    */
;;;331    #endif
;;;332           *p_err = OS_ERR_MEM_FULL;
;;;333            return;
;;;334        }
;;;335        *(void **)p_blk    = p_mem->FreeListPtr;                    /* Insert released block into free block list           */
;;;336        p_mem->FreeListPtr = p_blk;
;;;337        p_mem->NbrFree++;                                           /* One more memory block in this partition              */
;;;338        CPU_CRITICAL_EXIT();
;;;339    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;340        TRACE_OS_MEM_PUT(p_mem);                                    /* Record the event.                                    */
;;;341    #endif
;;;342       *p_err              = OS_ERR_NONE;                           /* Notify caller that memory block was released         */
;;;343    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  b91e              CBNZ     r6,|L3.34|
00001a  f24560be          MOV      r0,#0x56be            ;313
00001e  8028              STRH     r0,[r5,#0]            ;313
000020  e7f8              B        |L3.20|
                  |L3.34|
000022  491a              LDR      r1,|L3.140|
000024  6820              LDR      r0,[r4,#0]            ;319
000026  4288              CMP      r0,r1                 ;319
000028  d003              BEQ      |L3.50|
00002a  f64550c4          MOV      r0,#0x5dc4            ;320
00002e  8028              STRH     r0,[r5,#0]            ;320
000030  e7f0              B        |L3.20|
                  |L3.50|
000032  bf00              NOP                            ;326
000034  bf00              NOP                            ;326
000036  f7fffffe          BL       CPU_SR_Save
00003a  4607              MOV      r7,r0                 ;326
00003c  bf00              NOP                            ;326
00003e  f7fffffe          BL       CPU_IntDisMeasStart
000042  bf00              NOP                            ;326
000044  8aa0              LDRH     r0,[r4,#0x14]         ;327
000046  8a61              LDRH     r1,[r4,#0x12]         ;327
000048  4288              CMP      r0,r1                 ;327
00004a  db0c              BLT      |L3.102|
00004c  bf00              NOP                            ;328
00004e  f7fffffe          BL       CPU_IntDisMeasStop
000052  bf00              NOP                            ;328
000054  4638              MOV      r0,r7                 ;328
000056  f7fffffe          BL       CPU_SR_Restore
00005a  bf00              NOP                            ;328
00005c  bf00              NOP                            ;328
00005e  f24560ba          MOV      r0,#0x56ba            ;332
000062  8028              STRH     r0,[r5,#0]            ;332
000064  e7d6              B        |L3.20|
                  |L3.102|
000066  68e0              LDR      r0,[r4,#0xc]          ;335
000068  6030              STR      r0,[r6,#0]            ;335
00006a  60e6              STR      r6,[r4,#0xc]          ;336
00006c  8aa0              LDRH     r0,[r4,#0x14]         ;337
00006e  1c40              ADDS     r0,r0,#1              ;337
000070  82a0              STRH     r0,[r4,#0x14]         ;337
000072  bf00              NOP                            ;338
000074  f7fffffe          BL       CPU_IntDisMeasStop
000078  bf00              NOP                            ;338
00007a  4638              MOV      r0,r7                 ;338
00007c  f7fffffe          BL       CPU_SR_Restore
000080  bf00              NOP                            ;338
000082  bf00              NOP                            ;338
000084  2000              MOVS     r0,#0                 ;342
000086  8028              STRH     r0,[r5,#0]            ;342
000088  bf00              NOP      
00008a  e7c3              B        |L3.20|
;;;344    
                          ENDP

                  |L3.140|
                          DCD      0x204d454d

                          AREA ||i.OS_MemDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_MemDbgListAdd PROC
;;;360    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;361    void  OS_MemDbgListAdd (OS_MEM  *p_mem)
000000  2100              MOVS     r1,#0
;;;362    {
;;;363        p_mem->DbgPrevPtr               = DEF_NULL;
000002  6181              STR      r1,[r0,#0x18]
;;;364        if (OSMemDbgListPtr == DEF_NULL) {
000004  4907              LDR      r1,|L4.36|
000006  6809              LDR      r1,[r1,#0]  ; OSMemDbgListPtr
000008  b911              CBNZ     r1,|L4.16|
;;;365            p_mem->DbgNextPtr           = DEF_NULL;
00000a  2100              MOVS     r1,#0
00000c  61c1              STR      r1,[r0,#0x1c]
00000e  e005              B        |L4.28|
                  |L4.16|
;;;366        } else {
;;;367            p_mem->DbgNextPtr           =  OSMemDbgListPtr;
000010  4904              LDR      r1,|L4.36|
000012  6809              LDR      r1,[r1,#0]  ; OSMemDbgListPtr
000014  61c1              STR      r1,[r0,#0x1c]
;;;368            OSMemDbgListPtr->DbgPrevPtr =  p_mem;
000016  4903              LDR      r1,|L4.36|
000018  6809              LDR      r1,[r1,#0]  ; OSMemDbgListPtr
00001a  6188              STR      r0,[r1,#0x18]
                  |L4.28|
;;;369        }
;;;370        OSMemDbgListPtr                 =  p_mem;
00001c  4901              LDR      r1,|L4.36|
00001e  6008              STR      r0,[r1,#0]  ; OSMemDbgListPtr
;;;371    }
000020  4770              BX       lr
;;;372    #endif
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      OSMemDbgListPtr

                          AREA ||i.OS_MemInit||, CODE, READONLY, ALIGN=2

                  OS_MemInit PROC
;;;389    
;;;390    void  OS_MemInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;391    {
;;;392    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;393        OSMemDbgListPtr = DEF_NULL;
000002  4a03              LDR      r2,|L5.16|
000004  6011              STR      r1,[r2,#0]  ; OSMemDbgListPtr
;;;394        OSMemQty        = 0u;
000006  4a03              LDR      r2,|L5.20|
000008  8011              STRH     r1,[r2,#0]
;;;395    #endif
;;;396       *p_err           = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;397    }
00000c  4770              BX       lr
;;;398    #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      OSMemDbgListPtr
                  |L5.20|
                          DCD      OSMemQty
