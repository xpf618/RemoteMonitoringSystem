; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_q.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\½øÐÐÊ±\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\os_q.crf ..\..\uCOS-III\uCOS-III\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;72     
;;;73     void  OSQCreate (OS_Q        *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74                      CPU_CHAR    *p_name,
;;;75                      OS_MSG_QTY   max_qty,
;;;76                      OS_ERR      *p_err)
;;;77     
;;;78     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;79         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;80     
;;;81     
;;;82     
;;;83     #ifdef OS_SAFETY_CRITICAL
;;;84         if (p_err == DEF_NULL) {
;;;85             OS_SAFETY_CRITICAL_EXCEPTION();
;;;86             return;
;;;87         }
;;;88     #endif
;;;89     
;;;90     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;91         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;92            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;93             return;
;;;94         }
;;;95     #endif
;;;96     
;;;97     #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;98         if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
000010  481d              LDR      r0,|L1.136|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  b120              CBZ      r0,|L1.32|
;;;99            *p_err = OS_ERR_CREATE_ISR;
000016  f64260e1          MOV      r0,#0x2ee1
00001a  8028              STRH     r0,[r5,#0]
                  |L1.28|
;;;100            return;
;;;101        }
;;;102    #endif
;;;103    
;;;104    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;105        if (p_q == DEF_NULL) {                                      /* Validate arguments                                   */
;;;106           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;107            return;
;;;108        }
;;;109        if (max_qty == 0u) {                                        /* Cannot specify a zero size queue                     */
;;;110           *p_err = OS_ERR_Q_SIZE;
;;;111            return;
;;;112        }
;;;113    #endif
;;;114    
;;;115        OS_CRITICAL_ENTER();
;;;116    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;117        p_q->Type    = OS_OBJ_TYPE_Q;                               /* Mark the data structure as a message queue           */
;;;118    #endif
;;;119    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;120        p_q->NamePtr = p_name;
;;;121    #else
;;;122        (void)&p_name;
;;;123    #endif
;;;124        OS_MsgQInit(&p_q->MsgQ,                                     /* Initialize the queue                                 */
;;;125                    max_qty);
;;;126        OS_PendListInit(&p_q->PendList);                            /* Initialize the waiting list                          */
;;;127    
;;;128    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;129        OS_QDbgListAdd(p_q);
;;;130        OSQQty++;                                                   /* One more queue created                               */
;;;131    #endif
;;;132    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;133        TRACE_OS_Q_CREATE(p_q, p_name);                             /* Record the event.                                    */
;;;134    #endif
;;;135        OS_CRITICAL_EXIT_NO_SCHED();
;;;136       *p_err = OS_ERR_NONE;
;;;137    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  b91c              CBNZ     r4,|L1.42|
000022  f64550c3          MOV      r0,#0x5dc3            ;106
000026  8028              STRH     r0,[r5,#0]            ;106
000028  e7f8              B        |L1.28|
                  |L1.42|
00002a  b91e              CBNZ     r6,|L1.52|
00002c  f2465094          MOV      r0,#0x6594            ;110
000030  8028              STRH     r0,[r5,#0]            ;110
000032  e7f3              B        |L1.28|
                  |L1.52|
000034  bf00              NOP                            ;115
000036  bf00              NOP                            ;115
000038  f7fffffe          BL       CPU_SR_Save
00003c  4680              MOV      r8,r0                 ;115
00003e  bf00              NOP                            ;115
000040  f7fffffe          BL       CPU_IntDisMeasStart
000044  bf00              NOP                            ;115
000046  4811              LDR      r0,|L1.140|
000048  6020              STR      r0,[r4,#0]            ;117
00004a  6067              STR      r7,[r4,#4]            ;120
00004c  4631              MOV      r1,r6                 ;124
00004e  f1040020          ADD      r0,r4,#0x20           ;124
000052  f7fffffe          BL       OS_MsgQInit
000056  f1040008          ADD      r0,r4,#8              ;126
00005a  f7fffffe          BL       OS_PendListInit
00005e  4620              MOV      r0,r4                 ;129
000060  f7fffffe          BL       OS_QDbgListAdd
000064  480a              LDR      r0,|L1.144|
000066  8800              LDRH     r0,[r0,#0]            ;130  ; OSQQty
000068  1c40              ADDS     r0,r0,#1              ;130
00006a  4909              LDR      r1,|L1.144|
00006c  8008              STRH     r0,[r1,#0]            ;130
00006e  bf00              NOP                            ;135
000070  f7fffffe          BL       CPU_IntDisMeasStop
000074  bf00              NOP                            ;135
000076  4640              MOV      r0,r8                 ;135
000078  f7fffffe          BL       CPU_SR_Restore
00007c  bf00              NOP                            ;135
00007e  bf00              NOP                            ;135
000080  2000              MOVS     r0,#0                 ;136
000082  8028              STRH     r0,[r5,#0]            ;136
000084  bf00              NOP      
000086  e7c9              B        |L1.28|
;;;138    
                          ENDP

                  |L1.136|
                          DCD      OSIntNestingCtr
                  |L1.140|
                          DCD      0x55455551
                  |L1.144|
                          DCD      OSQQty

                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;423    
;;;424    void  *OSQPend (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;425                    OS_TICK       timeout,
;;;426                    OS_OPT        opt,
;;;427                    OS_MSG_SIZE  *p_msg_size,
;;;428                    CPU_TS       *p_ts,
;;;429                    OS_ERR       *p_err)
;;;430    {
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461e              MOV      r6,r3
00000e  e9dd5412          LDRD     r5,r4,[sp,#0x48]
;;;431        OS_PEND_DATA  pend_data;
;;;432        void         *p_void;
;;;433        CPU_SR_ALLOC();
000012  f04f0b00          MOV      r11,#0
;;;434    
;;;435    
;;;436    #ifdef OS_SAFETY_CRITICAL
;;;437        if (p_err == DEF_NULL) {
;;;438            OS_SAFETY_CRITICAL_EXCEPTION();
;;;439            return (DEF_NULL);
;;;440        }
;;;441    #endif
;;;442    
;;;443    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;444        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to call from an ISR                      */
000016  4870              LDR      r0,|L2.472|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00001a  b130              CBZ      r0,|L2.42|
;;;445    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;446            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;447    #endif
;;;448           *p_err = OS_ERR_PEND_ISR;
00001c  f24610ae          MOV      r0,#0x61ae
000020  8020              STRH     r0,[r4,#0]
;;;449            return (DEF_NULL);
000022  2000              MOVS     r0,#0
                  |L2.36|
;;;450        }
;;;451    #endif
;;;452    
;;;453    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;454        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;455           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;456            return (DEF_NULL);
;;;457        }
;;;458    #endif
;;;459    
;;;460    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;461        if (p_q == DEF_NULL) {                                      /* Validate arguments                                   */
;;;462    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;463            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;464    #endif
;;;465           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;466            return (DEF_NULL);
;;;467        }
;;;468        if (p_msg_size == DEF_NULL) {
;;;469    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;470            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;471    #endif
;;;472           *p_err = OS_ERR_PTR_INVALID;
;;;473            return (DEF_NULL);
;;;474        }
;;;475        switch (opt) {
;;;476            case OS_OPT_PEND_BLOCKING:
;;;477            case OS_OPT_PEND_NON_BLOCKING:
;;;478                 break;
;;;479    
;;;480            default:
;;;481    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;482                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;483    #endif
;;;484                *p_err = OS_ERR_OPT_INVALID;
;;;485                 return (DEF_NULL);
;;;486        }
;;;487    #endif
;;;488    
;;;489    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;490        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
;;;491    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;492            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;493    #endif
;;;494           *p_err = OS_ERR_OBJ_TYPE;
;;;495            return (DEF_NULL);
;;;496        }
;;;497    #endif
;;;498    
;;;499        if (p_ts != DEF_NULL) {
;;;500           *p_ts = 0u;                                              /* Initialize the returned timestamp                    */
;;;501        }
;;;502    
;;;503        CPU_CRITICAL_ENTER();
;;;504        p_void = OS_MsgQGet(&p_q->MsgQ,                             /* Any message waiting in the message queue?            */
;;;505                            p_msg_size,
;;;506                            p_ts,
;;;507                            p_err);
;;;508        if (*p_err == OS_ERR_NONE) {
;;;509            CPU_CRITICAL_EXIT();
;;;510    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;511            TRACE_OS_Q_PEND(p_q);                                   /* Record the event.                                    */
;;;512    #endif
;;;513            return (p_void);                                        /* Yes, Return message received                         */
;;;514        }
;;;515    
;;;516        if ((opt & OS_OPT_PEND_NON_BLOCKING) != 0u) {               /* Caller wants to block if not available?              */
;;;517            CPU_CRITICAL_EXIT();
;;;518    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;519            TRACE_OS_Q_PEND_FAILED(p_q);                            /* Record the event.                                    */
;;;520    #endif
;;;521           *p_err = OS_ERR_PEND_WOULD_BLOCK;                        /* No                                                   */
;;;522            return (DEF_NULL);
;;;523        } else {
;;;524            if (OSSchedLockNestingCtr > 0u) {                       /* Can't pend when the scheduler is locked              */
;;;525                CPU_CRITICAL_EXIT();
;;;526    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;527                TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                    */
;;;528    #endif
;;;529               *p_err = OS_ERR_SCHED_LOCKED;
;;;530                return (DEF_NULL);
;;;531            }
;;;532        }
;;;533                                                                    /* Lock the scheduler/re-enable interrupts              */
;;;534        OS_CRITICAL_ENTER_CPU_EXIT();
;;;535        OS_Pend(&pend_data,                                         /* Block task pending on Message Queue                  */
;;;536                (OS_PEND_OBJ *)((void *)p_q),
;;;537                OS_TASK_PEND_ON_Q,
;;;538                timeout);
;;;539        OS_CRITICAL_EXIT_NO_SCHED();
;;;540    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;541        TRACE_OS_Q_PEND_BLOCK(p_q);                                 /* Record the event.                                    */
;;;542    #endif
;;;543        OSSched();                                                  /* Find the next highest priority task ready to run     */
;;;544    
;;;545        CPU_CRITICAL_ENTER();
;;;546        switch (OSTCBCurPtr->PendStatus) {
;;;547            case OS_STATUS_PEND_OK:                                 /* Extract message from TCB (Put there by Post)         */
;;;548                 p_void     = OSTCBCurPtr->MsgPtr;
;;;549                *p_msg_size = OSTCBCurPtr->MsgSize;
;;;550    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;551                 if (p_ts  != DEF_NULL) {
;;;552                    *p_ts  =  OSTCBCurPtr->TS;
;;;553                 }
;;;554    #endif
;;;555    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;556                 TRACE_OS_Q_PEND(p_q);                              /* Record the event.                                    */
;;;557    #endif
;;;558                *p_err      = OS_ERR_NONE;
;;;559                 break;
;;;560    
;;;561            case OS_STATUS_PEND_ABORT:                              /* Indicate that we aborted                             */
;;;562                 p_void     = DEF_NULL;
;;;563                *p_msg_size = 0u;
;;;564    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;565                 if (p_ts  != DEF_NULL) {
;;;566                    *p_ts  =  OSTCBCurPtr->TS;
;;;567                 }
;;;568    #endif
;;;569    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;570                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;571    #endif
;;;572                *p_err      = OS_ERR_PEND_ABORT;
;;;573                 break;
;;;574    
;;;575            case OS_STATUS_PEND_TIMEOUT:                            /* Indicate that we didn't get event within TO          */
;;;576                 p_void     = DEF_NULL;
;;;577                *p_msg_size = 0u;
;;;578                 if (p_ts  != DEF_NULL) {
;;;579                    *p_ts  = 0u;
;;;580                 }
;;;581    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;582                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;583    #endif
;;;584                *p_err      = OS_ERR_TIMEOUT;
;;;585                 break;
;;;586    
;;;587            case OS_STATUS_PEND_DEL:                                /* Indicate that object pended on has been deleted      */
;;;588                 p_void     = DEF_NULL;
;;;589                *p_msg_size = 0u;
;;;590    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;591                 if (p_ts  != DEF_NULL) {
;;;592                    *p_ts  =  OSTCBCurPtr->TS;
;;;593                 }
;;;594    #endif
;;;595    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;596                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;597    #endif
;;;598                *p_err      = OS_ERR_OBJ_DEL;
;;;599                 break;
;;;600    
;;;601            default:
;;;602                 p_void     = DEF_NULL;
;;;603                *p_msg_size = 0u;
;;;604    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;605                 TRACE_OS_Q_PEND_FAILED(p_q);                       /* Record the event.                                    */
;;;606    #endif
;;;607                *p_err      = OS_ERR_STATUS_INVALID;
;;;608                 break;
;;;609        }
;;;610        CPU_CRITICAL_EXIT();
;;;611        return (p_void);
;;;612    }
000024  b009              ADD      sp,sp,#0x24
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.42|
00002a  b927              CBNZ     r7,|L2.54|
00002c  f64550c3          MOV      r0,#0x5dc3            ;465
000030  8020              STRH     r0,[r4,#0]            ;465
000032  2000              MOVS     r0,#0                 ;466
000034  e7f6              B        |L2.36|
                  |L2.54|
000036  b926              CBNZ     r6,|L2.66|
000038  f24620d5          MOV      r0,#0x62d5            ;472
00003c  8020              STRH     r0,[r4,#0]            ;472
00003e  2000              MOVS     r0,#0                 ;473
000040  e7f0              B        |L2.36|
                  |L2.66|
000042  f1b80f00          CMP      r8,#0                 ;475
000046  d003              BEQ      |L2.80|
000048  f5b84f00          CMP      r8,#0x8000            ;475
00004c  d102              BNE      |L2.84|
00004e  e000              B        |L2.82|
                  |L2.80|
000050  bf00              NOP                            ;477
                  |L2.82|
000052  e004              B        |L2.94|
                  |L2.84|
000054  f6456025          MOV      r0,#0x5e25            ;484
000058  8020              STRH     r0,[r4,#0]            ;484
00005a  2000              MOVS     r0,#0                 ;485
00005c  e7e2              B        |L2.36|
                  |L2.94|
00005e  bf00              NOP                            ;478
000060  495e              LDR      r1,|L2.476|
000062  6838              LDR      r0,[r7,#0]            ;490
000064  4288              CMP      r0,r1                 ;490
000066  d004              BEQ      |L2.114|
000068  f64550c4          MOV      r0,#0x5dc4            ;494
00006c  8020              STRH     r0,[r4,#0]            ;494
00006e  2000              MOVS     r0,#0                 ;495
000070  e7d8              B        |L2.36|
                  |L2.114|
000072  b10d              CBZ      r5,|L2.120|
000074  2000              MOVS     r0,#0                 ;500
000076  6028              STR      r0,[r5,#0]            ;500
                  |L2.120|
000078  bf00              NOP                            ;503
00007a  bf00              NOP                            ;503
00007c  f7fffffe          BL       CPU_SR_Save
000080  4683              MOV      r11,r0                ;503
000082  bf00              NOP                            ;503
000084  f7fffffe          BL       CPU_IntDisMeasStart
000088  bf00              NOP                            ;503
00008a  4623              MOV      r3,r4                 ;504
00008c  462a              MOV      r2,r5                 ;504
00008e  4631              MOV      r1,r6                 ;504
000090  f1070020          ADD      r0,r7,#0x20           ;504
000094  f7fffffe          BL       OS_MsgQGet
000098  4682              MOV      r10,r0                ;504
00009a  8820              LDRH     r0,[r4,#0]            ;508
00009c  b950              CBNZ     r0,|L2.180|
00009e  bf00              NOP                            ;509
0000a0  f7fffffe          BL       CPU_IntDisMeasStop
0000a4  bf00              NOP                            ;509
0000a6  4658              MOV      r0,r11                ;509
0000a8  f7fffffe          BL       CPU_SR_Restore
0000ac  bf00              NOP                            ;509
0000ae  bf00              NOP                            ;509
0000b0  4650              MOV      r0,r10                ;513
0000b2  e7b7              B        |L2.36|
                  |L2.180|
0000b4  f4084000          AND      r0,r8,#0x8000         ;516
0000b8  b168              CBZ      r0,|L2.214|
0000ba  bf00              NOP                            ;517
0000bc  f7fffffe          BL       CPU_IntDisMeasStop
0000c0  bf00              NOP                            ;517
0000c2  4658              MOV      r0,r11                ;517
0000c4  f7fffffe          BL       CPU_SR_Restore
0000c8  bf00              NOP                            ;517
0000ca  bf00              NOP                            ;517
0000cc  f24610b0          MOV      r0,#0x61b0            ;521
0000d0  8020              STRH     r0,[r4,#0]            ;521
0000d2  2000              MOVS     r0,#0                 ;522
0000d4  e7a6              B        |L2.36|
                  |L2.214|
0000d6  4842              LDR      r0,|L2.480|
0000d8  7800              LDRB     r0,[r0,#0]            ;524  ; OSSchedLockNestingCtr
0000da  b168              CBZ      r0,|L2.248|
0000dc  bf00              NOP                            ;525
0000de  f7fffffe          BL       CPU_IntDisMeasStop
0000e2  bf00              NOP                            ;525
0000e4  4658              MOV      r0,r11                ;525
0000e6  f7fffffe          BL       CPU_SR_Restore
0000ea  bf00              NOP                            ;525
0000ec  bf00              NOP                            ;525
0000ee  f6465063          MOV      r0,#0x6d63            ;529
0000f2  8020              STRH     r0,[r4,#0]            ;529
0000f4  2000              MOVS     r0,#0                 ;530
0000f6  e795              B        |L2.36|
                  |L2.248|
0000f8  464b              MOV      r3,r9                 ;535
0000fa  2205              MOVS     r2,#5                 ;535
0000fc  4639              MOV      r1,r7                 ;535
0000fe  a801              ADD      r0,sp,#4              ;535
000100  f7fffffe          BL       OS_Pend
000104  bf00              NOP                            ;539
000106  f7fffffe          BL       CPU_IntDisMeasStop
00010a  bf00              NOP                            ;539
00010c  4658              MOV      r0,r11                ;539
00010e  f7fffffe          BL       CPU_SR_Restore
000112  bf00              NOP                            ;539
000114  bf00              NOP                            ;539
000116  f7fffffe          BL       OSSched
00011a  bf00              NOP                            ;545
00011c  bf00              NOP                            ;545
00011e  f7fffffe          BL       CPU_SR_Save
000122  4683              MOV      r11,r0                ;545
000124  bf00              NOP                            ;545
000126  f7fffffe          BL       CPU_IntDisMeasStart
00012a  bf00              NOP                            ;545
00012c  482d              LDR      r0,|L2.484|
00012e  6800              LDR      r0,[r0,#0]            ;546  ; OSTCBCurPtr
000130  f8900035          LDRB     r0,[r0,#0x35]         ;546
000134  b130              CBZ      r0,|L2.324|
000136  2801              CMP      r0,#1                 ;546
000138  d015              BEQ      |L2.358|
00013a  2802              CMP      r0,#2                 ;546
00013c  d02a              BEQ      |L2.404|
00013e  2803              CMP      r0,#3                 ;546
000140  d135              BNE      |L2.430|
000142  e01d              B        |L2.384|
                  |L2.324|
000144  4827              LDR      r0,|L2.484|
000146  6800              LDR      r0,[r0,#0]            ;548  ; OSTCBCurPtr
000148  f8d0a058          LDR      r10,[r0,#0x58]        ;548
00014c  4825              LDR      r0,|L2.484|
00014e  6800              LDR      r0,[r0,#0]            ;549  ; OSTCBCurPtr
000150  f8b0005c          LDRH     r0,[r0,#0x5c]         ;549
000154  8030              STRH     r0,[r6,#0]            ;549
000156  b11d              CBZ      r5,|L2.352|
000158  4822              LDR      r0,|L2.484|
00015a  6800              LDR      r0,[r0,#0]            ;552  ; OSTCBCurPtr
00015c  6c80              LDR      r0,[r0,#0x48]         ;552
00015e  6028              STR      r0,[r5,#0]            ;552
                  |L2.352|
000160  2000              MOVS     r0,#0                 ;558
000162  8020              STRH     r0,[r4,#0]            ;558
000164  e02b              B        |L2.446|
                  |L2.358|
000166  f04f0a00          MOV      r10,#0                ;562
00016a  2000              MOVS     r0,#0                 ;563
00016c  8030              STRH     r0,[r6,#0]            ;563
00016e  b11d              CBZ      r5,|L2.376|
000170  481c              LDR      r0,|L2.484|
000172  6800              LDR      r0,[r0,#0]            ;566  ; OSTCBCurPtr
000174  6c80              LDR      r0,[r0,#0x48]         ;566
000176  6028              STR      r0,[r5,#0]            ;566
                  |L2.376|
000178  f24610a9          MOV      r0,#0x61a9            ;572
00017c  8020              STRH     r0,[r4,#0]            ;572
00017e  e01e              B        |L2.446|
                  |L2.384|
000180  f04f0a00          MOV      r10,#0                ;576
000184  2000              MOVS     r0,#0                 ;577
000186  8030              STRH     r0,[r6,#0]            ;577
000188  b105              CBZ      r5,|L2.396|
00018a  6028              STR      r0,[r5,#0]            ;579
                  |L2.396|
00018c  f24720d9          MOV      r0,#0x72d9            ;584
000190  8020              STRH     r0,[r4,#0]            ;584
000192  e014              B        |L2.446|
                  |L2.404|
000194  f04f0a00          MOV      r10,#0                ;588
000198  2000              MOVS     r0,#0                 ;589
00019a  8030              STRH     r0,[r6,#0]            ;589
00019c  b11d              CBZ      r5,|L2.422|
00019e  4811              LDR      r0,|L2.484|
0001a0  6800              LDR      r0,[r0,#0]            ;592  ; OSTCBCurPtr
0001a2  6c80              LDR      r0,[r0,#0x48]         ;592
0001a4  6028              STR      r0,[r5,#0]            ;592
                  |L2.422|
0001a6  f64550c2          MOV      r0,#0x5dc2            ;598
0001aa  8020              STRH     r0,[r4,#0]            ;598
0001ac  e007              B        |L2.446|
                  |L2.430|
0001ae  f04f0a00          MOV      r10,#0                ;602
0001b2  2000              MOVS     r0,#0                 ;603
0001b4  8030              STRH     r0,[r6,#0]            ;603
0001b6  f646602e          MOV      r0,#0x6e2e            ;607
0001ba  8020              STRH     r0,[r4,#0]            ;607
0001bc  bf00              NOP                            ;608
                  |L2.446|
0001be  bf00              NOP                            ;559
0001c0  bf00              NOP                            ;610
0001c2  f7fffffe          BL       CPU_IntDisMeasStop
0001c6  bf00              NOP                            ;610
0001c8  4658              MOV      r0,r11                ;610
0001ca  f7fffffe          BL       CPU_SR_Restore
0001ce  bf00              NOP                            ;610
0001d0  bf00              NOP                            ;610
0001d2  4650              MOV      r0,r10                ;611
0001d4  e726              B        |L2.36|
;;;613    
                          ENDP

0001d6  0000              DCW      0x0000
                  |L2.472|
                          DCD      OSIntNestingCtr
                  |L2.476|
                          DCD      0x55455551
                  |L2.480|
                          DCD      OSSchedLockNestingCtr
                  |L2.484|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=2

                  OSQPendAbort PROC
;;;649    #if (OS_CFG_Q_PEND_ABORT_EN == DEF_ENABLED)
;;;650    OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;651                              OS_OPT   opt,
;;;652                              OS_ERR  *p_err)
;;;653    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;654        OS_PEND_LIST  *p_pend_list;
;;;655        OS_TCB        *p_tcb;
;;;656        CPU_TS         ts;
;;;657        OS_OBJ_QTY     nbr_tasks;
;;;658        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;659    
;;;660    
;;;661    
;;;662    #ifdef OS_SAFETY_CRITICAL
;;;663        if (p_err == DEF_NULL) {
;;;664            OS_SAFETY_CRITICAL_EXCEPTION();
;;;665            return (0u);
;;;666        }
;;;667    #endif
;;;668    
;;;669    #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;670        if (OSIntNestingCtr > 0u) {                                 /* Not allowed to Pend Abort from an ISR                */
00000e  483a              LDR      r0,|L3.248|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  b128              CBZ      r0,|L3.32|
;;;671           *p_err =  OS_ERR_PEND_ABORT_ISR;
000014  f24610aa          MOV      r0,#0x61aa
000018  8020              STRH     r0,[r4,#0]
;;;672            return (0u);
00001a  2000              MOVS     r0,#0
                  |L3.28|
;;;673        }
;;;674    #endif
;;;675    
;;;676    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;677        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;678           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;679            return (0u);
;;;680        }
;;;681    #endif
;;;682    
;;;683    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;684        if (p_q == DEF_NULL) {                                      /* Validate 'p_q'                                       */
;;;685           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;686            return (0u);
;;;687        }
;;;688        switch (opt) {                                              /* Validate 'opt'                                       */
;;;689            case OS_OPT_PEND_ABORT_1:
;;;690            case OS_OPT_PEND_ABORT_ALL:
;;;691            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;692            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;693                 break;
;;;694    
;;;695            default:
;;;696                *p_err =  OS_ERR_OPT_INVALID;
;;;697                 return (0u);
;;;698        }
;;;699    #endif
;;;700    
;;;701    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;702        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure queue was created                          */
;;;703           *p_err =  OS_ERR_OBJ_TYPE;
;;;704            return (0u);
;;;705        }
;;;706    #endif
;;;707    
;;;708        CPU_CRITICAL_ENTER();
;;;709        p_pend_list = &p_q->PendList;
;;;710        if (p_pend_list->HeadPtr == DEF_NULL) {                     /* Any task waiting on queue?                           */
;;;711            CPU_CRITICAL_EXIT();                                    /* No                                                   */
;;;712           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;713            return (0u);
;;;714        }
;;;715    
;;;716        OS_CRITICAL_ENTER_CPU_EXIT();
;;;717        nbr_tasks = 0u;
;;;718    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;719        ts        = OS_TS_GET();                                    /* Get local time stamp so all tasks get the same time  */
;;;720    #else
;;;721        ts        = 0u;
;;;722    #endif
;;;723        while (p_pend_list->HeadPtr != DEF_NULL) {
;;;724            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;725            OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
;;;726                         p_tcb,
;;;727                         ts);
;;;728            nbr_tasks++;
;;;729            if (opt != OS_OPT_PEND_ABORT_ALL) {                     /* Pend abort all tasks waiting?                        */
;;;730                break;                                              /* No                                                   */
;;;731            }
;;;732        }
;;;733        OS_CRITICAL_EXIT_NO_SCHED();
;;;734    
;;;735        if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
;;;736            OSSched();                                              /* Run the scheduler                                    */
;;;737        }
;;;738    
;;;739       *p_err = OS_ERR_NONE;
;;;740        return (nbr_tasks);
;;;741    }
00001c  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.32|
000020  b925              CBNZ     r5,|L3.44|
000022  f64550c3          MOV      r0,#0x5dc3            ;685
000026  8020              STRH     r0,[r4,#0]            ;685
000028  2000              MOVS     r0,#0                 ;686
00002a  e7f7              B        |L3.28|
                  |L3.44|
00002c  b14e              CBZ      r6,|L3.66|
00002e  f5b67f80          CMP      r6,#0x100             ;688
000032  d007              BEQ      |L3.68|
000034  f5b64f00          CMP      r6,#0x8000            ;688
000038  d005              BEQ      |L3.70|
00003a  f5b64f01          CMP      r6,#0x8100            ;688
00003e  d104              BNE      |L3.74|
000040  e002              B        |L3.72|
                  |L3.66|
000042  bf00              NOP                            ;690
                  |L3.68|
000044  bf00              NOP                            ;691
                  |L3.70|
000046  bf00              NOP                            ;692
                  |L3.72|
000048  e004              B        |L3.84|
                  |L3.74|
00004a  f6456025          MOV      r0,#0x5e25            ;696
00004e  8020              STRH     r0,[r4,#0]            ;696
000050  2000              MOVS     r0,#0                 ;697
000052  e7e3              B        |L3.28|
                  |L3.84|
000054  bf00              NOP                            ;693
000056  4929              LDR      r1,|L3.252|
000058  6828              LDR      r0,[r5,#0]            ;702
00005a  4288              CMP      r0,r1                 ;702
00005c  d004              BEQ      |L3.104|
00005e  f64550c4          MOV      r0,#0x5dc4            ;703
000062  8020              STRH     r0,[r4,#0]            ;703
000064  2000              MOVS     r0,#0                 ;704
000066  e7d9              B        |L3.28|
                  |L3.104|
000068  bf00              NOP                            ;708
00006a  bf00              NOP                            ;708
00006c  f7fffffe          BL       CPU_SR_Save
000070  4682              MOV      r10,r0                ;708
000072  bf00              NOP                            ;708
000074  f7fffffe          BL       CPU_IntDisMeasStart
000078  bf00              NOP                            ;708
00007a  f1050708          ADD      r7,r5,#8              ;709
00007e  6838              LDR      r0,[r7,#0]            ;710
000080  b968              CBNZ     r0,|L3.158|
000082  bf00              NOP                            ;711
000084  f7fffffe          BL       CPU_IntDisMeasStop
000088  bf00              NOP                            ;711
00008a  4650              MOV      r0,r10                ;711
00008c  f7fffffe          BL       CPU_SR_Restore
000090  bf00              NOP                            ;711
000092  bf00              NOP                            ;711
000094  f24610ab          MOV      r0,#0x61ab            ;712
000098  8020              STRH     r0,[r4,#0]            ;712
00009a  2000              MOVS     r0,#0                 ;713
00009c  e7be              B        |L3.28|
                  |L3.158|
00009e  f04f0800          MOV      r8,#0                 ;717
0000a2  f7fffffe          BL       CPU_TS_TmrRd
0000a6  4683              MOV      r11,r0                ;719
0000a8  e00f              B        |L3.202|
                  |L3.170|
0000aa  6838              LDR      r0,[r7,#0]            ;724
0000ac  f8d09008          LDR      r9,[r0,#8]            ;724
0000b0  465a              MOV      r2,r11                ;725
0000b2  4649              MOV      r1,r9                 ;725
0000b4  4628              MOV      r0,r5                 ;725
0000b6  f7fffffe          BL       OS_PendAbort
0000ba  f1080001          ADD      r0,r8,#1              ;728
0000be  fa1ff880          UXTH     r8,r0                 ;728
0000c2  f5b67f80          CMP      r6,#0x100             ;729
0000c6  d000              BEQ      |L3.202|
0000c8  e002              B        |L3.208|
                  |L3.202|
0000ca  6838              LDR      r0,[r7,#0]            ;723
0000cc  2800              CMP      r0,#0                 ;723
0000ce  d1ec              BNE      |L3.170|
                  |L3.208|
0000d0  bf00              NOP                            ;730
0000d2  bf00              NOP                            ;733
0000d4  f7fffffe          BL       CPU_IntDisMeasStop
0000d8  bf00              NOP                            ;733
0000da  4650              MOV      r0,r10                ;733
0000dc  f7fffffe          BL       CPU_SR_Restore
0000e0  bf00              NOP                            ;733
0000e2  bf00              NOP                            ;733
0000e4  f4064000          AND      r0,r6,#0x8000         ;735
0000e8  b908              CBNZ     r0,|L3.238|
0000ea  f7fffffe          BL       OSSched
                  |L3.238|
0000ee  2000              MOVS     r0,#0                 ;739
0000f0  8020              STRH     r0,[r4,#0]            ;739
0000f2  4640              MOV      r0,r8                 ;740
0000f4  e792              B        |L3.28|
;;;742    #endif
                          ENDP

0000f6  0000              DCW      0x0000
                  |L3.248|
                          DCD      OSIntNestingCtr
                  |L3.252|
                          DCD      0x55455551

                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=2

                  OSQPost PROC
;;;798    
;;;799    void  OSQPost (OS_Q         *p_q,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;800                   void         *p_void,
;;;801                   OS_MSG_SIZE   msg_size,
;;;802                   OS_OPT        opt,
;;;803                   OS_ERR       *p_err)
;;;804    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;805        CPU_TS  ts;
;;;806    
;;;807    
;;;808    
;;;809    #ifdef OS_SAFETY_CRITICAL
;;;810        if (p_err == DEF_NULL) {
;;;811            OS_SAFETY_CRITICAL_EXCEPTION();
;;;812            return;
;;;813        }
;;;814    #endif
;;;815    
;;;816    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;817        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;818           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;819            return;
;;;820        }
;;;821    #endif
;;;822    
;;;823    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;824        if (p_q == DEF_NULL) {                                      /* Validate 'p_q'                                       */
00000e  b925              CBNZ     r5,|L4.26|
;;;825    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;826            TRACE_OS_Q_POST_FAILED(p_q);                            /* Record the event.                                    */
;;;827    #endif
;;;828           *p_err = OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
                  |L4.22|
;;;829            return;
;;;830        }
;;;831        switch (opt) {                                              /* Validate 'opt'                                       */
;;;832            case OS_OPT_POST_FIFO:
;;;833            case OS_OPT_POST_LIFO:
;;;834            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL:
;;;835            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
;;;836            case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
;;;837            case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
;;;838            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;839            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;840                 break;
;;;841    
;;;842            default:
;;;843    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;844                 TRACE_OS_Q_POST_FAILED(p_q);                       /* Record the event.                                    */
;;;845    #endif
;;;846                *p_err =  OS_ERR_OPT_INVALID;
;;;847                 return;
;;;848        }
;;;849    #endif
;;;850    
;;;851    #if (OS_CFG_OBJ_TYPE_CHK_EN == DEF_ENABLED)
;;;852        if (p_q->Type != OS_OBJ_TYPE_Q) {                           /* Make sure message queue was created                  */
;;;853    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;854            TRACE_OS_Q_POST_FAILED(p_q);                            /* Record the event.                                    */
;;;855    #endif
;;;856           *p_err = OS_ERR_OBJ_TYPE;
;;;857            return;
;;;858        }
;;;859    #endif
;;;860    #if (OS_CFG_TS_EN == DEF_ENABLED)
;;;861        ts = OS_TS_GET();                                           /* Get timestamp                                        */
;;;862    #else
;;;863        ts = 0u;
;;;864    #endif
;;;865    
;;;866    #if (OS_CFG_ISR_POST_DEFERRED_EN == DEF_ENABLED)
;;;867        if (OSIntNestingCtr > 0u) {
;;;868            OS_IntQPost(OS_OBJ_TYPE_Q,                              /* Post to ISR queue                                    */
;;;869                        (void      *)p_q,
;;;870                        (void      *)p_void,
;;;871                        msg_size,
;;;872                        0u,
;;;873                        opt,
;;;874                        ts,
;;;875                        p_err);
;;;876            return;
;;;877        }
;;;878    #endif
;;;879    #if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN == DEF_ENABLED))
;;;880        TRACE_OS_Q_POST(p_q);                                       /* Record the event.                                    */
;;;881    #endif
;;;882        OS_QPost(p_q,
;;;883                 p_void,
;;;884                 msg_size,
;;;885                 opt,
;;;886                 ts,
;;;887                 p_err);
;;;888    }
000016  e8bd87fc          POP      {r2-r10,pc}
                  |L4.26|
00001a  f5b64f00          CMP      r6,#0x8000            ;831
00001e  d019              BEQ      |L4.84|
000020  dc09              BGT      |L4.54|
000022  b19e              CBZ      r6,|L4.76|
000024  2e10              CMP      r6,#0x10              ;831
000026  d012              BEQ      |L4.78|
000028  f5b67f00          CMP      r6,#0x200             ;831
00002c  d010              BEQ      |L4.80|
00002e  f5b67f04          CMP      r6,#0x210             ;831
000032  d113              BNE      |L4.92|
000034  e00d              B        |L4.82|
                  |L4.54|
000036  f5a64000          SUB      r0,r6,#0x8000         ;831
00003a  3810              SUBS     r0,r0,#0x10           ;831
00003c  b158              CBZ      r0,|L4.86|
00003e  f5b07ff8          CMP      r0,#0x1f0             ;831
000042  d009              BEQ      |L4.88|
000044  f5b07f00          CMP      r0,#0x200             ;831
000048  d108              BNE      |L4.92|
00004a  e006              B        |L4.90|
                  |L4.76|
00004c  bf00              NOP                            ;833
                  |L4.78|
00004e  bf00              NOP                            ;834
                  |L4.80|
000050  bf00              NOP                            ;835
                  |L4.82|
000052  bf00              NOP                            ;836
                  |L4.84|
000054  bf00              NOP                            ;837
                  |L4.86|
000056  bf00              NOP                            ;838
                  |L4.88|
000058  bf00              NOP                            ;839
                  |L4.90|
00005a  e003              B        |L4.100|
                  |L4.92|
00005c  f6456025          MOV      r0,#0x5e25            ;846
000060  8020              STRH     r0,[r4,#0]            ;846
000062  e7d8              B        |L4.22|
                  |L4.100|
000064  bf00              NOP                            ;840
000066  490a              LDR      r1,|L4.144|
000068  6828              LDR      r0,[r5,#0]            ;852
00006a  4288              CMP      r0,r1                 ;852
00006c  d003              BEQ      |L4.118|
00006e  f64550c4          MOV      r0,#0x5dc4            ;856
000072  8020              STRH     r0,[r4,#0]            ;856
000074  e7cf              B        |L4.22|
                  |L4.118|
000076  f7fffffe          BL       CPU_TS_TmrRd
00007a  4607              MOV      r7,r0                 ;861
00007c  4633              MOV      r3,r6                 ;882
00007e  464a              MOV      r2,r9                 ;882
000080  4641              MOV      r1,r8                 ;882
000082  4628              MOV      r0,r5                 ;882
000084  e9cd7400          STRD     r7,r4,[sp,#0]         ;882
000088  f7fffffe          BL       OS_QPost
00008c  bf00              NOP      
00008e  e7c2              B        |L4.22|
;;;889    
                          ENDP

                  |L4.144|
                          DCD      0x55455551

                          AREA ||i.OS_QClr||, CODE, READONLY, ALIGN=2

                  OS_QClr PROC
;;;906    
;;;907    void  OS_QClr (OS_Q  *p_q)
000000  b510              PUSH     {r4,lr}
;;;908    {
000002  4604              MOV      r4,r0
;;;909        (void)OS_MsgQFreeAll (&p_q->MsgQ);                          /* Return all OS_MSGs to the free list                  */
000004  f1040020          ADD      r0,r4,#0x20
000008  f7fffffe          BL       OS_MsgQFreeAll
;;;910    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;911        p_q->Type    =  OS_OBJ_TYPE_NONE;                           /* Mark the data structure as a NONE                    */
00000c  4806              LDR      r0,|L5.40|
00000e  6020              STR      r0,[r4,#0]
;;;912    #endif
;;;913    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;914        p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
000010  a006              ADR      r0,|L5.44|
000012  6060              STR      r0,[r4,#4]
;;;915    #endif
;;;916        OS_MsgQInit (&p_q->MsgQ,                                    /* Initialize the list of OS_MSGs                       */
000014  2100              MOVS     r1,#0
000016  f1040020          ADD      r0,r4,#0x20
00001a  f7fffffe          BL       OS_MsgQInit
;;;917                     0u);
;;;918        OS_PendListInit (&p_q->PendList);                           /* Initialize the waiting list                          */
00001e  f1040008          ADD      r0,r4,#8
000022  f7fffffe          BL       OS_PendListInit
;;;919    }
000026  bd10              POP      {r4,pc}
;;;920    
                          ENDP

                  |L5.40|
                          DCD      0x454e4f4e
                  |L5.44|
00002c  3f5100            DCB      "?Q",0
00002f  00                DCB      0

                          AREA ||i.OS_QDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_QDbgListAdd PROC
;;;938    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;939    void  OS_QDbgListAdd (OS_Q  *p_q)
000000  a109              ADR      r1,|L6.40|
;;;940    {
;;;941        p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;942        p_q->DbgPrevPtr               = DEF_NULL;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;943        if (OSQDbgListPtr == DEF_NULL) {
000008  4908              LDR      r1,|L6.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00000c  b911              CBNZ     r1,|L6.20|
;;;944            p_q->DbgNextPtr           = DEF_NULL;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L6.32|
                  |L6.20|
;;;945        } else {
;;;946            p_q->DbgNextPtr           =  OSQDbgListPtr;
000014  4905              LDR      r1,|L6.44|
000016  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;947            OSQDbgListPtr->DbgPrevPtr =  p_q;
00001a  4904              LDR      r1,|L6.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L6.32|
;;;948        }
;;;949        OSQDbgListPtr                 =  p_q;
000020  4902              LDR      r1,|L6.44|
000022  6008              STR      r0,[r1,#0]  ; OSQDbgListPtr
;;;950    }
000024  4770              BX       lr
;;;951    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L6.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_QDbgListRemove PROC
;;;953    
;;;954    void  OS_QDbgListRemove (OS_Q  *p_q)
000000  6942              LDR      r2,[r0,#0x14]
;;;955    {
;;;956        OS_Q  *p_q_next;
;;;957        OS_Q  *p_q_prev;
;;;958    
;;;959    
;;;960        p_q_prev = p_q->DbgPrevPtr;
;;;961        p_q_next = p_q->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;962    
;;;963        if (p_q_prev == DEF_NULL) {
000004  b93a              CBNZ     r2,|L7.22|
;;;964            OSQDbgListPtr = p_q_next;
000006  4b09              LDR      r3,|L7.44|
000008  6019              STR      r1,[r3,#0]  ; OSQDbgListPtr
;;;965            if (p_q_next != DEF_NULL) {
00000a  b109              CBZ      r1,|L7.16|
;;;966                p_q_next->DbgPrevPtr = DEF_NULL;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L7.16|
;;;967            }
;;;968            p_q->DbgNextPtr = DEF_NULL;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L7.42|
                  |L7.22|
;;;969    
;;;970        } else if (p_q_next == DEF_NULL) {
000016  b919              CBNZ     r1,|L7.32|
;;;971            p_q_prev->DbgNextPtr = DEF_NULL;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;972            p_q->DbgPrevPtr      = DEF_NULL;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L7.42|
                  |L7.32|
;;;973    
;;;974        } else {
;;;975            p_q_prev->DbgNextPtr =  p_q_next;
000020  6191              STR      r1,[r2,#0x18]
;;;976            p_q_next->DbgPrevPtr =  p_q_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;977            p_q->DbgNextPtr      = DEF_NULL;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;978            p_q->DbgPrevPtr      = DEF_NULL;
000028  6143              STR      r3,[r0,#0x14]
                  |L7.42|
;;;979        }
;;;980    }
00002a  4770              BX       lr
;;;981    #endif
                          ENDP

                  |L7.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QPost||, CODE, READONLY, ALIGN=1

                  OS_QPost PROC
;;;1020   
;;;1021   void  OS_QPost (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1022                   void         *p_void,
;;;1023                   OS_MSG_SIZE   msg_size,
;;;1024                   OS_OPT        opt,
;;;1025                   CPU_TS        ts,
;;;1026                   OS_ERR       *p_err)
;;;1027   {
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  461c              MOV      r4,r3
00000e  f8ddb038          LDR      r11,[sp,#0x38]
;;;1028       OS_OPT         post_type;
;;;1029       OS_PEND_LIST  *p_pend_list;
;;;1030       OS_PEND_DATA  *p_pend_data;
;;;1031       OS_PEND_DATA  *p_pend_data_next;
;;;1032       OS_TCB        *p_tcb;
;;;1033       CPU_SR_ALLOC();
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;1034   
;;;1035   
;;;1036   
;;;1037       OS_CRITICAL_ENTER();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  f7fffffe          BL       CPU_SR_Save
00001e  9002              STR      r0,[sp,#8]
000020  bf00              NOP      
000022  f7fffffe          BL       CPU_IntDisMeasStart
000026  bf00              NOP      
;;;1038       p_pend_list = &p_q->PendList;
000028  f1060808          ADD      r8,r6,#8
;;;1039       if (p_pend_list->HeadPtr == DEF_NULL) {                     /* Any task waiting on message queue?                   */
00002c  f8d80000          LDR      r0,[r8,#0]
000030  b9d8              CBNZ     r0,|L8.106|
;;;1040           if ((opt & OS_OPT_POST_LIFO) == 0u) {                   /* Determine whether we post FIFO or LIFO               */
000032  f0040010          AND      r0,r4,#0x10
000036  b908              CBNZ     r0,|L8.60|
;;;1041               post_type = OS_OPT_POST_FIFO;
000038  2700              MOVS     r7,#0
00003a  e000              B        |L8.62|
                  |L8.60|
;;;1042           } else {
;;;1043               post_type = OS_OPT_POST_LIFO;
00003c  2710              MOVS     r7,#0x10
                  |L8.62|
;;;1044           }
;;;1045           OS_MsgQPut(&p_q->MsgQ,                                  /* Place message in the message queue                   */
00003e  980f              LDR      r0,[sp,#0x3c]
000040  463b              MOV      r3,r7
000042  4652              MOV      r2,r10
000044  4649              MOV      r1,r9
000046  e9cdb000          STRD     r11,r0,[sp,#0]
00004a  f1060020          ADD      r0,r6,#0x20
00004e  f7fffffe          BL       OS_MsgQPut
;;;1046                      p_void,
;;;1047                      msg_size,
;;;1048                      post_type,
;;;1049                      ts,
;;;1050                      p_err);
;;;1051           OS_CRITICAL_EXIT();
000052  bf00              NOP      
000054  f7fffffe          BL       CPU_IntDisMeasStop
000058  bf00              NOP      
00005a  9802              LDR      r0,[sp,#8]
00005c  f7fffffe          BL       CPU_SR_Restore
000060  bf00              NOP      
000062  bf00              NOP      
                  |L8.100|
;;;1052           return;
;;;1053       }
;;;1054   
;;;1055       p_pend_data = p_pend_list->HeadPtr;
;;;1056       while (p_pend_data != DEF_NULL) {
;;;1057           p_tcb            = p_pend_data->TCBPtr;
;;;1058           p_pend_data_next = p_pend_data->NextPtr;
;;;1059           OS_Post((OS_PEND_OBJ *)((void *)p_q),
;;;1060                   p_tcb,
;;;1061                   p_void,
;;;1062                   msg_size,
;;;1063                   ts);
;;;1064           if ((opt & OS_OPT_POST_ALL) == 0)  {                    /* Post message to all tasks waiting?                   */
;;;1065               break;                                              /* No                                                   */
;;;1066           }
;;;1067           p_pend_data = p_pend_data_next;
;;;1068       }
;;;1069       OS_CRITICAL_EXIT_NO_SCHED();
;;;1070       if ((opt & OS_OPT_POST_NO_SCHED) == 0u) {
;;;1071           OSSched();                                              /* Run the scheduler                                    */
;;;1072       }
;;;1073      *p_err = OS_ERR_NONE;
;;;1074   }
000064  b005              ADD      sp,sp,#0x14
000066  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.106|
00006a  f8d85000          LDR      r5,[r8,#0]            ;1055
00006e  e010              B        |L8.146|
                  |L8.112|
000070  68a8              LDR      r0,[r5,#8]            ;1057
000072  9003              STR      r0,[sp,#0xc]          ;1057
000074  6868              LDR      r0,[r5,#4]            ;1058
000076  9004              STR      r0,[sp,#0x10]         ;1058
000078  4653              MOV      r3,r10                ;1059
00007a  464a              MOV      r2,r9                 ;1059
00007c  f8cdb000          STR      r11,[sp,#0]           ;1059
000080  4630              MOV      r0,r6                 ;1059
000082  9903              LDR      r1,[sp,#0xc]          ;1059
000084  f7fffffe          BL       OS_Post
000088  f4047000          AND      r0,r4,#0x200          ;1064
00008c  b900              CBNZ     r0,|L8.144|
00008e  e002              B        |L8.150|
                  |L8.144|
000090  9d04              LDR      r5,[sp,#0x10]         ;1067
                  |L8.146|
000092  2d00              CMP      r5,#0                 ;1056
000094  d1ec              BNE      |L8.112|
                  |L8.150|
000096  bf00              NOP                            ;1065
000098  bf00              NOP                            ;1069
00009a  f7fffffe          BL       CPU_IntDisMeasStop
00009e  bf00              NOP                            ;1069
0000a0  9802              LDR      r0,[sp,#8]            ;1069
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;1069
0000a8  bf00              NOP                            ;1069
0000aa  f4044000          AND      r0,r4,#0x8000         ;1070
0000ae  b908              CBNZ     r0,|L8.180|
0000b0  f7fffffe          BL       OSSched
                  |L8.180|
0000b4  2100              MOVS     r1,#0                 ;1073
0000b6  980f              LDR      r0,[sp,#0x3c]         ;1073
0000b8  8001              STRH     r1,[r0,#0]            ;1073
0000ba  bf00              NOP      
0000bc  e7d2              B        |L8.100|
;;;1075   
                          ENDP

