; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_att7022eu.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_att7022eu.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\进行时\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_att7022eu.crf ..\..\User\bsp\src\bsp_att7022eu.c]
                          THUMB

                          AREA ||i.EMU_init||, CODE, READONLY, ALIGN=2

                  EMU_init PROC
;;;200    }
;;;201    void EMU_init(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203    
;;;204      Write_Att7022(0xD3,0x0000);     //rest
000002  2100              MOVS     r1,#0
000004  20d3              MOVS     r0,#0xd3
000006  f7fffffe          BL       Write_Att7022
;;;205      bsp_spiDelay(2);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       bsp_spiDelay
;;;206    	Write_Att7022(0xC3,0x000000);   //清除校表数据
000010  2100              MOVS     r1,#0
000012  20c3              MOVS     r0,#0xc3
000014  f7fffffe          BL       Write_Att7022
;;;207    	Write_Att7022(0xc9,0x00005A);   //使能校表
000018  215a              MOVS     r1,#0x5a
00001a  20c9              MOVS     r0,#0xc9
00001c  f7fffffe          BL       Write_Att7022
;;;208    	//Wr_Dat(0xC5,0x000000);        //关闭同步
;;;209    	Write_Att7022(0x01,0xB97E);     //配置模式寄存器
000020  f64b117e          MOV      r1,#0xb97e
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       Write_Att7022
;;;210    	Write_Att7022(0x03,0xF884);     //EMUcfg 读后清零	0xF884 和功率有关
00002a  f64f0184          MOV      r1,#0xf884
00002e  2003              MOVS     r0,#3
000030  f7fffffe          BL       Write_Att7022
;;;211    	Write_Att7022(0x02,0x0200);   	//电流增益1  电压8 
000034  f44f7100          MOV      r1,#0x200
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       Write_Att7022
;;;212    
;;;213    	//   Write_Att7022(0x30,0x0000); // 关闭所有中断
;;;214    	Write_Att7022(0x31,0x3437);      //模拟模块寄存器
00003e  f2434137          MOV      r1,#0x3437
000042  2031              MOVS     r0,#0x31
000044  f7fffffe          BL       Write_Att7022
;;;215    	Write_Att7022(0x6D, 0xFF00);     //Vrefgain 的补偿曲线系数TCcoffA ，TCcoffB ，TCcoffC(0x6D~0x6F)
000048  f44f417f          MOV      r1,#0xff00
00004c  206d              MOVS     r0,#0x6d
00004e  f7fffffe          BL       Write_Att7022
;;;216    	Write_Att7022(0x6E, 0x0DB8);     //Vrefgain 的补偿曲线系数TCcoffA ，TCcoffB ，TCcoffC(0x6D~0x6F)
000052  f64051b8          MOV      r1,#0xdb8
000056  206e              MOVS     r0,#0x6e
000058  f7fffffe          BL       Write_Att7022
;;;217    	Write_Att7022(0x6F, 0xD1DA);     //Vrefgain 的补偿曲线系数TCcoffA ，TCcoffB ，TCcoffC(0x6D~0x6F)
00005c  f24d11da          MOV      r1,#0xd1da
000060  206f              MOVS     r0,#0x6f
000062  f7fffffe          BL       Write_Att7022
;;;218    	Write_Att7022(0x1E,HFCONST);     // HFconst 3200  109	
000066  f2401171          MOV      r1,#0x171
00006a  201e              MOVS     r0,#0x1e
00006c  f7fffffe          BL       Write_Att7022
;;;219    	
;;;220    	Write_Att7022(0x17,(int)(0.98*32768));	//A相电压增益校准
000070  f6475170          MOV      r1,#0x7d70
000074  2017              MOVS     r0,#0x17
000076  f7fffffe          BL       Write_Att7022
;;;221    	Write_Att7022(0x18,(int)(0.98*32768));  //B 相电压增益校准
00007a  f6475170          MOV      r1,#0x7d70
00007e  2018              MOVS     r0,#0x18
000080  f7fffffe          BL       Write_Att7022
;;;222    	Write_Att7022(0x19,(int)(0.98*32768));  //C 相电压增益校准 
000084  f6475170          MOV      r1,#0x7d70
000088  2019              MOVS     r0,#0x19
00008a  f7fffffe          BL       Write_Att7022
;;;223    	
;;;224    	Write_Att7022(0x1A,1.918*32768); //A相电流增益   校准		
00008e  f24f5181          MOV      r1,#0xf581
000092  201a              MOVS     r0,#0x1a
000094  f7fffffe          BL       Write_Att7022
;;;225    	Write_Att7022(0x1B,1.918*32768); //B相电流增益   校准	
000098  f24f5181          MOV      r1,#0xf581
00009c  201b              MOVS     r0,#0x1b
00009e  f7fffffe          BL       Write_Att7022
;;;226    	Write_Att7022(0x1C,1.908*32768); //C相电流增益   校准
0000a2  f24f4139          MOV      r1,#0xf439
0000a6  201c              MOVS     r0,#0x1c
0000a8  f7fffffe          BL       Write_Att7022
;;;227    						
;;;228    	Write_Att7022(0x04,1.442*32768); //A有功率增益   校准    
0000ac  f64b0193          MOV      r1,#0xb893
0000b0  2004              MOVS     r0,#4
0000b2  f7fffffe          BL       Write_Att7022
;;;229    	Write_Att7022(0x07,1.442*32768); //A无功率增益   校准
0000b6  f64b0193          MOV      r1,#0xb893
0000ba  2007              MOVS     r0,#7
0000bc  f7fffffe          BL       Write_Att7022
;;;230    	Write_Att7022(0x0A,1.442*32768); //A视在功率增益 校准
0000c0  f64b0193          MOV      r1,#0xb893
0000c4  200a              MOVS     r0,#0xa
0000c6  f7fffffe          BL       Write_Att7022
;;;231    
;;;232    	Write_Att7022(0x05,1.442*32768); //B有功率增益   校准	
0000ca  f64b0193          MOV      r1,#0xb893
0000ce  2005              MOVS     r0,#5
0000d0  f7fffffe          BL       Write_Att7022
;;;233    	Write_Att7022(0x08,1.442*32768); //B无功率增益   校准
0000d4  f64b0193          MOV      r1,#0xb893
0000d8  2008              MOVS     r0,#8
0000da  f7fffffe          BL       Write_Att7022
;;;234    	Write_Att7022(0x0B,1.442*32768); //B视在功率增益 校准
0000de  f64b0193          MOV      r1,#0xb893
0000e2  200b              MOVS     r0,#0xb
0000e4  f7fffffe          BL       Write_Att7022
;;;235    		
;;;236    	Write_Att7022(0x06,1.43*32768);  //C有功率增益   校准
0000e8  f24b710a          MOV      r1,#0xb70a
0000ec  2006              MOVS     r0,#6
0000ee  f7fffffe          BL       Write_Att7022
;;;237    	Write_Att7022(0x09,1.43*32768);  //C无功率增益   校准1.378*(pow(2,15))
0000f2  f24b710a          MOV      r1,#0xb70a
0000f6  2009              MOVS     r0,#9
0000f8  f7fffffe          BL       Write_Att7022
;;;238    	Write_Att7022(0x0C,1.43*32768);  //C视在功率增益 校准1.378*(pow(2,15)
0000fc  f24b710a          MOV      r1,#0xb70a
000100  200c              MOVS     r0,#0xc
000102  f7fffffe          BL       Write_Att7022
;;;239    
;;;240    //	Write_Att7022(0x24,0x036C);    //A相电压有效值的校准0x036C
;;;241    //	Write_Att7022(0x25,0x0301);    //  B相电压有效值的校准0x0301
;;;242    //	Write_Att7022(0x26,0x02E2);    //  C相电压有效值的校准0x02E2
;;;243    
;;;244    	Write_Att7022(0x35,0x080F); 	   //   I/O
000106  f640010f          MOV      r1,#0x80f
00010a  2035              MOVS     r0,#0x35
00010c  f7fffffe          BL       Write_Att7022
;;;245    	Write_Att7022(0xC5,0x0002);			 ///打开同步
000110  2102              MOVS     r1,#2
000112  20c5              MOVS     r0,#0xc5
000114  f7fffffe          BL       Write_Att7022
;;;246    	Write_Att7022(0xc9,0x000000); 	 //Close the write protection
000118  2100              MOVS     r1,#0
00011a  20c9              MOVS     r0,#0xc9
00011c  f7fffffe          BL       Write_Att7022
;;;247    	Write_Att7022(0xC6,0x0000) ; 	   //打开计量寄存器数据
000120  2100              MOVS     r1,#0
000122  20c6              MOVS     r0,#0xc6
000124  f7fffffe          BL       Write_Att7022
;;;248      Device_ID = READ_Att7022(0x00);	 // Device ID 
000128  2000              MOVS     r0,#0
00012a  f7fffffe          BL       READ_Att7022
00012e  4901              LDR      r1,|L1.308|
000130  6008              STR      r0,[r1,#0]  ; Device_ID
;;;249    }
000132  bd10              POP      {r4,pc}
;;;250    void InitAmmeter(void)
                          ENDP

                  |L1.308|
                          DCD      Device_ID

                          AREA ||i.InitAmmeter||, CODE, READONLY, ALIGN=2

                  InitAmmeter PROC
;;;249    }
;;;250    void InitAmmeter(void)
000000  b510              PUSH     {r4,lr}
;;;251    {
;;;252    	bsp_InitAtt7022euHard(); //管脚初始化
000002  f7fffffe          BL       bsp_InitAtt7022euHard
;;;253    	EMU_init();    // 电表初始化
000006  f7fffffe          BL       EMU_init
;;;254    	Device_ID = READ_Att7022(0x00);	  // Device ID 
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       READ_Att7022
000010  4902              LDR      r1,|L2.28|
000012  6008              STR      r0,[r1,#0]  ; Device_ID
;;;255    	bsp_spiDelay(100);
000014  2064              MOVS     r0,#0x64
000016  f7fffffe          BL       bsp_spiDelay
;;;256    }
00001a  bd10              POP      {r4,pc}
;;;257    void ReadAmmeterData(void)
                          ENDP

                  |L2.28|
                          DCD      Device_ID

                          AREA ||i.ReadAmmeterData||, CODE, READONLY, ALIGN=2

                  ReadAmmeterData PROC
;;;256    }
;;;257    void ReadAmmeterData(void)
000000  b500              PUSH     {lr}
;;;258    {
000002  b0a3              SUB      sp,sp,#0x8c
;;;259    	uint8_t ReadPowerFlag = 0;//是否读取电量标志  //用户自己根据需要周期性的读取电量，读取之后芯片内部电量清理，用户自己做累计 
000004  2000              MOVS     r0,#0
000006  9022              STR      r0,[sp,#0x88]
;;;260    	
;;;261    	uint32_t Device_ID_buff;
;;;262    	uint32_t TempSSAPwoer[3];
;;;263    	uint32_t VolA = 0; // A  相电压
000008  901d              STR      r0,[sp,#0x74]
;;;264    	uint32_t CurrA = 0; //A 相电流
00000a  901c              STR      r0,[sp,#0x70]
;;;265    	uint32_t PA_Power = 0; //A 相有功功
00000c  901b              STR      r0,[sp,#0x6c]
;;;266    	uint32_t QA_Power = 0; //A 相无功功率
00000e  901a              STR      r0,[sp,#0x68]
;;;267    	uint32_t SA_Power = 0; //A 相视在功率
000010  9019              STR      r0,[sp,#0x64]
;;;268    	float PPA_Power = 0;
000012  9018              STR      r0,[sp,#0x60]
;;;269    	float QQA_Power = 0;
000014  9017              STR      r0,[sp,#0x5c]
;;;270    	float SSA_Power = 0;
000016  9016              STR      r0,[sp,#0x58]
;;;271    	uint32_t VolB = 0; // B 相电压
000018  9015              STR      r0,[sp,#0x54]
;;;272    	uint32_t CurrB = 0; //B 相电流
00001a  9014              STR      r0,[sp,#0x50]
;;;273    	uint32_t PB_Power = 0; //B 相有功功率
00001c  9013              STR      r0,[sp,#0x4c]
;;;274    	uint32_t QB_Power = 0; //B 相无功功率
00001e  9012              STR      r0,[sp,#0x48]
;;;275    	uint32_t SB_Power = 0; // B相视在功率
000020  9011              STR      r0,[sp,#0x44]
;;;276    	float PPB_Power = 0;
000022  9010              STR      r0,[sp,#0x40]
;;;277    	float QQB_Power = 0;
000024  900f              STR      r0,[sp,#0x3c]
;;;278    	float SSB_Power = 0;
000026  900e              STR      r0,[sp,#0x38]
;;;279    	uint32_t VolC = 0;      // C  相电压
000028  900d              STR      r0,[sp,#0x34]
;;;280    	uint32_t CurrC = 0;     //C 相电流
00002a  900c              STR      r0,[sp,#0x30]
;;;281    	uint32_t PC_Power = 0;  //C 相有功功率
00002c  900b              STR      r0,[sp,#0x2c]
;;;282    	uint32_t QC_Power = 0;  //C 相无功功率
00002e  900a              STR      r0,[sp,#0x28]
;;;283    	uint32_t SC_Power = 0;  //C相视在功率
000030  9009              STR      r0,[sp,#0x24]
;;;284      
;;;285    	float PPC_Power = 0;
000032  9008              STR      r0,[sp,#0x20]
;;;286    	float QQC_Power = 0;
000034  9007              STR      r0,[sp,#0x1c]
;;;287    	float SSC_Power = 0;
000036  9006              STR      r0,[sp,#0x18]
;;;288    	/*************A 相********************************/
;;;289    	
;;;290    		Device_ID_buff = READ_Att7022(0x00);	  // Device ID 
000038  f7fffffe          BL       READ_Att7022
00003c  9021              STR      r0,[sp,#0x84]
;;;291    	  bsp_spiDelay(100);
00003e  2064              MOVS     r0,#0x64
000040  f7fffffe          BL       bsp_spiDelay
;;;292    		if (Device_ID_buff != Device_ID)
000044  49fe              LDR      r1,|L3.1088|
000046  9821              LDR      r0,[sp,#0x84]
000048  6809              LDR      r1,[r1,#0]  ; Device_ID
00004a  4288              CMP      r0,r1
00004c  d007              BEQ      |L3.94|
;;;293    		{
;;;294    				EMU_init();    // 电表初始化
00004e  f7fffffe          BL       EMU_init
;;;295    				bsp_spiDelay(500);	
000052  f44f70fa          MOV      r0,#0x1f4
000056  f7fffffe          BL       bsp_spiDelay
                  |L3.90|
;;;296             return;
;;;297    		}
;;;298    
;;;299    	  VolA =  READ_Att7022(0x0D);  //Vp2 A电压 ,
;;;300    	  bsp_spiDelay(100);
;;;301    	  CurrA = READ_Att7022(0x10);   //Vp5 C电压  Vp1 A电压
;;;302    	  bsp_spiDelay(100);
;;;303    	  PA_Power = READ_Att7022(0x01);  //A相有功功率
;;;304    	  bsp_spiDelay(100);  
;;;305    	  QA_Power = READ_Att7022(0x05);  //A相无功功率
;;;306    	  bsp_spiDelay(100); 
;;;307    	  SA_Power = READ_Att7022(0x09);  //A相视在功率
;;;308    	  bsp_spiDelay(100); 
;;;309    //	  PA_Q = (READ_Att7022(0x35))/3200;  //A相视在电能
;;;310    //	  delay_us(100);
;;;311    	  VoltageA = (uint8_t)(VolA/8192)	;   //电压有效值   								
;;;312    	   CurrentA = ((float)CurrA/8192)/UI_K;   //A相电流有效值
;;;313    	//  CurrentA = (float)(CurrA/(pow(2,13)))/176;   //A相电流有效值
;;;314    //	  CurrentA =CurrentA*10;
;;;315    	  bsp_spiDelay(100);
;;;316    	  TempA = READ_Att7022(0x14); //A相功率因数
;;;317    	  if(TempA > 8388608)
;;;318    	  {
;;;319    	  	TempA =(float) 	((16777216 - TempA)/8388608);
;;;320    	  }
;;;321    	  else 
;;;322    		{
;;;323    			TempA = (float) (TempA /8388608);
;;;324    		}
;;;325      
;;;326    	  if(PA_Power > 8388608) //         A相有功功率
;;;327    	  {
;;;328    	     PPA_Power = ((16777216 - (PA_Power))*P_K);//	
;;;329    		  
;;;330    		 // PPA_Power = ((PA_Power)- ((pow(2,24))))*P_K;
;;;331    	  } 
;;;332    	  else 
;;;333    		{
;;;334    	    PPA_Power =  (PA_Power)*P_K;		   //*0.000865
;;;335    		}
;;;336    	   if (QA_Power > 8388608)	 //         A相无功功率
;;;337    	   {
;;;338    	   		QQA_Power = ((16777216 - QA_Power )*P_K);
;;;339    	   }
;;;340    	   else 
;;;341    		 {
;;;342    	   		QQA_Power = (QA_Power*P_K);
;;;343    		 }
;;;344    
;;;345    	    if (SA_Power> 8388608)	//         A相视在功功率
;;;346    	   {
;;;347    	   		SSA_Power = ((16777216 - SA_Power )*P_K);
;;;348    	   }
;;;349    	   else 
;;;350             {
;;;351                    SSA_Power = (SA_Power*P_K);	
;;;352             }
;;;353    	   	
;;;354    	   Up_VolA = (unsigned int)VoltageA;          						//上传电压
;;;355    	   Up_CurrentA = (unsigned int)(CurrentA*Huganqibeilv + 0.5);     						//上电流
;;;356    	   Up_PA_Power = (unsigned int)(PPA_Power*Huganqibeilv + 0.5);		       			    //有功功率
;;;357             
;;;358    //      UsartSend_Bit3(Up_PA_Power,0);
;;;359    //      UsartSend_Bit3((Up_PA_Power>>8),0);
;;;360    //      UsartSend_Bit3(Up_PA_Power>>16,0);
;;;361    //      UsartSend_Bit3((Up_PA_Power>>24),0);
;;;362    	   Up_QA_Power = (unsigned int)(QQA_Power*Huganqibeilv + 0.5);			   			    //无功功率 
;;;363             
;;;364    //	   CurrentElectricA = PA_Q*Huganqibeilv;							//A相视在电电量
;;;365    	   
;;;366    	   TempSSAPwoer[0] = (unsigned int)(SSA_Power*Huganqibeilv + 0.5);			    	    //倍率后的视在功率
;;;367    //	   UsartSend_Bit3(TempSSAPwoer[0],0);
;;;368    //      UsartSend_Bit3((TempSSAPwoer[0]>>8),0);
;;;369    //      UsartSend_Bit3(TempSSAPwoer[0]>>16,0);
;;;370    //      UsartSend_Bit3((TempSSAPwoer[0]>>24),0);
;;;371    	  /***********B相**************************/
;;;372    
;;;373    	  VolB =  READ_Att7022(0x0E);  //Vp4 B电压 ,
;;;374    	  bsp_spiDelay(100);
;;;375    	  CurrB = READ_Att7022(0x11);   //Vp5 C电压  Vp1 A电压	  VP3 B
;;;376    	  bsp_spiDelay(100);
;;;377    	  PB_Power = READ_Att7022(0x02);  //B相有功功率
;;;378    	  bsp_spiDelay(100);  
;;;379    	  QB_Power = READ_Att7022(0x06);  //B相无功功率
;;;380    	  bsp_spiDelay(100); 
;;;381    //	  PB_Q =(READ_Att7022(0x36))/3200;   //B相有功电能+PB_Q
;;;382    //	  delay_us(100);
;;;383    	  SB_Power = READ_Att7022(0x0A);
;;;384    	  VoltageB = (uint8_t)(VolB/8192)	;   //电压有效值   有待
;;;385    	  CurrentB = ((float)CurrB/8192)/UI_K;  //         B相电流有效值
;;;386    	  bsp_spiDelay(100);
;;;387    	  TempB = READ_Att7022(0x15); //A相功率因数
;;;388    	  if(TempB > 8388608)
;;;389    	  {
;;;390    	  	TempB =(float)((16777216 - TempB)/8388608);
;;;391    	  }
;;;392    	  else 
;;;393    		{
;;;394    		  TempB = (float)(TempB /8388608) ; 
;;;395    		}
;;;396    					
;;;397    	  if(PB_Power > 8388608)    //B相有功功率
;;;398    	  {
;;;399    	     PPB_Power = (float)((16777216- PB_Power  )*P_K);
;;;400    	  } 
;;;401    	  else 
;;;402    		{
;;;403    	      PPB_Power = (float) (PB_Power*P_K);
;;;404    		}
;;;405    
;;;406    	   if (QB_Power> 8388608)	  //B相无功功率
;;;407    	   {
;;;408    	   		QQB_Power = (float)((16777216 - QB_Power)*P_K);
;;;409    	   }
;;;410    	   else 
;;;411    		 {
;;;412    	   		QQB_Power = (float)(QB_Power*P_K);
;;;413    		 }
;;;414    
;;;415    	   if (SB_Power> 8388608)	 //B相视在功功率
;;;416    	   {
;;;417    	   		SSB_Power = (float)((16777216- SB_Power )*P_K);
;;;418    	   }
;;;419    	   else 
;;;420    		 {
;;;421    	   		SSB_Power = (float)(SB_Power*P_K);	 
;;;422    		 }
;;;423    		   
;;;424    	   
;;;425    	   Up_VolB = (unsigned int)VoltageB;          						//上传电压
;;;426    	   Up_CurrentB = (unsigned int)(CurrentB*Huganqibeilv + 0.5);     						//上电流
;;;427    	   Up_PB_Power = (unsigned int)(PPB_Power*Huganqibeilv + 0.5);		       			    //有功功率
;;;428    //      UsartSend_Bit3(Up_PB_Power,0);
;;;429    //      UsartSend_Bit3((Up_PB_Power>>8),0);
;;;430    //      UsartSend_Bit3(Up_PB_Power>>16,0);
;;;431    //      UsartSend_Bit3((Up_PB_Power>>24),0);
;;;432    	   Up_QB_Power = (unsigned int)(QQB_Power*Huganqibeilv + 0.5);			   			    //无功功率 
;;;433    //	   CurrentElectricB = PB_Q*Huganqibeilv;							//A相视在电电量
;;;434    	   
;;;435     	   TempSSAPwoer[1] = (unsigned int)(SSB_Power*Huganqibeilv + 0.5);			    	    //倍率后的视在功率
;;;436    //	   UsartSend_Bit3(TempSSAPwoer[1],0);
;;;437    //      UsartSend_Bit3((TempSSAPwoer[1]>>8),0);
;;;438    //      UsartSend_Bit3(TempSSAPwoer[1]>>16,0);
;;;439    //      UsartSend_Bit3((TempSSAPwoer[1]>>24),0);
;;;440    	  /********************C相*************************/
;;;441    
;;;442    	  VolC =  READ_Att7022(0x0F);  //Vp4 C电压 ,
;;;443    	  bsp_spiDelay(100);
;;;444    	  CurrC = READ_Att7022(0x12);   //Vp5 C电压  Vp1 A电压	  VP3 B
;;;445    	  bsp_spiDelay(100);
;;;446    	  PC_Power = READ_Att7022(0x03);  //C相有功功率
;;;447    	  bsp_spiDelay(100);  
;;;448    	  QC_Power = READ_Att7022(0x07);  //C相无功功率
;;;449    	  bsp_spiDelay(100); 
;;;450    //	  PC_Q = (READ_Att7022(0x37));   //C相视在电能/3200+PC_Q
;;;451    //	  delay_us(100);
;;;452    	  SC_Power = READ_Att7022(0x0B);		//c相视在功率	 
;;;453    	  VoltageC = (uint8_t)(VolC/8192);   //电压有效值   有待
;;;454    	  CurrentC = ((float)CurrC/8192)/UI_K;  //C 相电流有效
;;;455    	  bsp_spiDelay(100);
;;;456    	  TempC = READ_Att7022(0x16); //A相功率因数
;;;457    	  if(TempC > 8388608)
;;;458    	  {
;;;459    	  	TempC =(float) 	((16777216 - TempC)/8388608);
;;;460    	  }
;;;461    	  else 
;;;462    		{
;;;463    			TempC = (float) (TempC /8388608) ; 
;;;464    
;;;465    		}
;;;466    		
;;;467    	  if(PC_Power > 8388608)   //C相有功功率
;;;468    	  {
;;;469    	     PPC_Power = (float)((16777216 - PC_Power )*P_K);
;;;470    	  } 
;;;471    	  else 
;;;472    		{
;;;473    	     PPC_Power = (float) (PC_Power*P_K);
;;;474    		}
;;;475    
;;;476    	   if (QC_Power> 8388608)  //C相无功功率
;;;477    	   {
;;;478    	   		QQC_Power = (float)((16777216 - QC_Power)*P_K);
;;;479    	   }
;;;480    	   else 
;;;481    		 {
;;;482    				QQC_Power = (float)(QC_Power*P_K);
;;;483    		 }
;;;484    	   		
;;;485    	    if (SC_Power> 8388608)	    //C相视在功功率
;;;486    	   {
;;;487    	   		SSC_Power = (float)((16777216 - SC_Power)*P_K);
;;;488    	   }
;;;489    	   else 
;;;490    		 {
;;;491    				SSC_Power = (float)(SC_Power*P_K);
;;;492    		 }
;;;493    		 
;;;494    		if (ReadPowerFlag)							//整点之前读电量以便整点时上报
;;;495    		{
;;;496    			 EST_Q = READ_Att7022(0x38);
;;;497    			
;;;498    			 bsp_spiDelay(100);
;;;499    			
;;;500    			 EST_Q_buff += ((EST_Q+16)>>5)*Huganqibeilv;						//	 
;;;501    			 CurrentElectric = EST_Q_buff/100;			//上传电量	
;;;502    		}
;;;503    		 
;;;504    	   Up_VolC = (unsigned int)VoltageC;          						//上传电压
;;;505    	   Up_CurrentC = (unsigned int)(CurrentC*Huganqibeilv + 0.5);     						//上电流
;;;506    	   Up_PC_Power = (unsigned int)(PPC_Power*Huganqibeilv + 0.5);		       			    //有功功率
;;;507         
;;;508    //	UsartSend_Bit3(Up_PC_Power,0);
;;;509    //     UsartSend_Bit3((Up_PC_Power>>8),0);
;;;510    //     UsartSend_Bit3(Up_PC_Power>>16,0);
;;;511    //     UsartSend_Bit3((Up_PC_Power>>24),0);
;;;512    	   Up_QC_Power = (unsigned int)(QQC_Power*Huganqibeilv + 0.5);			   			    //无功功率 
;;;513    //	   CurrentElectricC = PC_Q*Huganqibeilv;							//B相视在电电量
;;;514    	   
;;;515    	   TempSSAPwoer[2] = (unsigned int)(SSC_Power*Huganqibeilv + 0.5);			    	    //倍率后的视在功率
;;;516    //     UsartSend_Bit3(TempSSAPwoer[2],0);
;;;517    //     UsartSend_Bit3((TempSSAPwoer[2]>>8),0);
;;;518    //     UsartSend_Bit3(TempSSAPwoer[2]>>16,0);
;;;519    //     UsartSend_Bit3((TempSSAPwoer[2]>>24),1);
;;;520    //	   CurrentElectric = CurrentElectricC+CurrentElectricB+CurrentElectricA; //总电能
;;;521    	   
;;;522    	   	   
;;;523    }
00005a  b023              ADD      sp,sp,#0x8c
00005c  bd00              POP      {pc}
                  |L3.94|
00005e  200d              MOVS     r0,#0xd               ;299
000060  f7fffffe          BL       READ_Att7022
000064  901d              STR      r0,[sp,#0x74]         ;299
000066  2064              MOVS     r0,#0x64              ;300
000068  f7fffffe          BL       bsp_spiDelay
00006c  2010              MOVS     r0,#0x10              ;301
00006e  f7fffffe          BL       READ_Att7022
000072  901c              STR      r0,[sp,#0x70]         ;301
000074  2064              MOVS     r0,#0x64              ;302
000076  f7fffffe          BL       bsp_spiDelay
00007a  2001              MOVS     r0,#1                 ;303
00007c  f7fffffe          BL       READ_Att7022
000080  901b              STR      r0,[sp,#0x6c]         ;303
000082  2064              MOVS     r0,#0x64              ;304
000084  f7fffffe          BL       bsp_spiDelay
000088  2005              MOVS     r0,#5                 ;305
00008a  f7fffffe          BL       READ_Att7022
00008e  901a              STR      r0,[sp,#0x68]         ;305
000090  2064              MOVS     r0,#0x64              ;306
000092  f7fffffe          BL       bsp_spiDelay
000096  2009              MOVS     r0,#9                 ;307
000098  f7fffffe          BL       READ_Att7022
00009c  9019              STR      r0,[sp,#0x64]         ;307
00009e  2064              MOVS     r0,#0x64              ;308
0000a0  f7fffffe          BL       bsp_spiDelay
0000a4  981d              LDR      r0,[sp,#0x74]         ;311
0000a6  f3c03047          UBFX     r0,r0,#13,#8          ;311
0000aa  49e6              LDR      r1,|L3.1092|
0000ac  7008              STRB     r0,[r1,#0]            ;311
0000ae  981c              LDR      r0,[sp,#0x70]         ;312
0000b0  f7fffffe          BL       __aeabi_ui2f
0000b4  f04f418c          MOV      r1,#0x46000000        ;312
0000b8  9000              STR      r0,[sp,#0]            ;312
0000ba  f7fffffe          BL       __aeabi_fdiv
0000be  9001              STR      r0,[sp,#4]            ;312
0000c0  f7fffffe          BL       __aeabi_f2d
0000c4  4ae0              LDR      r2,|L3.1096|
0000c6  4be1              LDR      r3,|L3.1100|
0000c8  e9cd0102          STRD     r0,r1,[sp,#8]         ;312
0000cc  f7fffffe          BL       __aeabi_ddiv
0000d0  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;312
0000d4  f7fffffe          BL       __aeabi_d2f
0000d8  49dd              LDR      r1,|L3.1104|
0000da  6008              STR      r0,[r1,#0]            ;312  ; CurrentA
0000dc  2064              MOVS     r0,#0x64              ;315
0000de  f7fffffe          BL       bsp_spiDelay
0000e2  2014              MOVS     r0,#0x14              ;316
0000e4  f7fffffe          BL       READ_Att7022
0000e8  9005              STR      r0,[sp,#0x14]         ;316
0000ea  f7fffffe          BL       __aeabi_i2f
0000ee  49d9              LDR      r1,|L3.1108|
0000f0  6008              STR      r0,[r1,#0]            ;316  ; TempA
0000f2  f04f4196          MOV      r1,#0x4b000000        ;317
0000f6  48d7              LDR      r0,|L3.1108|
0000f8  6800              LDR      r0,[r0,#0]            ;317  ; TempA
0000fa  f7fffffe          BL       __aeabi_cfrcmple
0000fe  d20d              BCS      |L3.284|
000100  48d4              LDR      r0,|L3.1108|
000102  6801              LDR      r1,[r0,#0]            ;319  ; TempA
000104  f04f4097          MOV      r0,#0x4b800000        ;319
000108  f7fffffe          BL       __aeabi_fsub
00010c  f04f4196          MOV      r1,#0x4b000000        ;319
000110  9005              STR      r0,[sp,#0x14]         ;319
000112  f7fffffe          BL       __aeabi_fdiv
000116  49cf              LDR      r1,|L3.1108|
000118  6008              STR      r0,[r1,#0]            ;319  ; TempA
00011a  e007              B        |L3.300|
                  |L3.284|
00011c  f04f4196          MOV      r1,#0x4b000000        ;323
000120  48cc              LDR      r0,|L3.1108|
000122  6800              LDR      r0,[r0,#0]            ;323  ; TempA
000124  f7fffffe          BL       __aeabi_fdiv
000128  49ca              LDR      r1,|L3.1108|
00012a  6008              STR      r0,[r1,#0]            ;323  ; TempA
                  |L3.300|
00012c  981b              LDR      r0,[sp,#0x6c]         ;326
00012e  f5b00f00          CMP      r0,#0x800000          ;326
000132  d911              BLS      |L3.344|
000134  981b              LDR      r0,[sp,#0x6c]         ;328
000136  f1c07080          RSB      r0,r0,#0x1000000      ;328
00013a  9001              STR      r0,[sp,#4]            ;328
00013c  f7fffffe          BL       __aeabi_ui2d
000140  4ac5              LDR      r2,|L3.1112|
000142  4bc6              LDR      r3,|L3.1116|
000144  e9cd0102          STRD     r0,r1,[sp,#8]         ;328
000148  f7fffffe          BL       __aeabi_dmul
00014c  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;328
000150  f7fffffe          BL       __aeabi_d2f
000154  9018              STR      r0,[sp,#0x60]         ;328
000156  e00d              B        |L3.372|
                  |L3.344|
000158  981b              LDR      r0,[sp,#0x6c]         ;334
00015a  f7fffffe          BL       __aeabi_ui2d
00015e  4abe              LDR      r2,|L3.1112|
000160  4bbe              LDR      r3,|L3.1116|
000162  e9cd0102          STRD     r0,r1,[sp,#8]         ;334
000166  f7fffffe          BL       __aeabi_dmul
00016a  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;334
00016e  f7fffffe          BL       __aeabi_d2f
000172  9018              STR      r0,[sp,#0x60]         ;334
                  |L3.372|
000174  981a              LDR      r0,[sp,#0x68]         ;336
000176  f5b00f00          CMP      r0,#0x800000          ;336
00017a  d911              BLS      |L3.416|
00017c  981a              LDR      r0,[sp,#0x68]         ;338
00017e  f1c07080          RSB      r0,r0,#0x1000000      ;338
000182  9001              STR      r0,[sp,#4]            ;338
000184  f7fffffe          BL       __aeabi_ui2d
000188  4ab3              LDR      r2,|L3.1112|
00018a  4bb4              LDR      r3,|L3.1116|
00018c  e9cd0102          STRD     r0,r1,[sp,#8]         ;338
000190  f7fffffe          BL       __aeabi_dmul
000194  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;338
000198  f7fffffe          BL       __aeabi_d2f
00019c  9017              STR      r0,[sp,#0x5c]         ;338
00019e  e00d              B        |L3.444|
                  |L3.416|
0001a0  981a              LDR      r0,[sp,#0x68]         ;342
0001a2  f7fffffe          BL       __aeabi_ui2d
0001a6  4aac              LDR      r2,|L3.1112|
0001a8  4bac              LDR      r3,|L3.1116|
0001aa  e9cd0102          STRD     r0,r1,[sp,#8]         ;342
0001ae  f7fffffe          BL       __aeabi_dmul
0001b2  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;342
0001b6  f7fffffe          BL       __aeabi_d2f
0001ba  9017              STR      r0,[sp,#0x5c]         ;342
                  |L3.444|
0001bc  9819              LDR      r0,[sp,#0x64]         ;345
0001be  f5b00f00          CMP      r0,#0x800000          ;345
0001c2  d911              BLS      |L3.488|
0001c4  9819              LDR      r0,[sp,#0x64]         ;347
0001c6  f1c07080          RSB      r0,r0,#0x1000000      ;347
0001ca  9001              STR      r0,[sp,#4]            ;347
0001cc  f7fffffe          BL       __aeabi_ui2d
0001d0  4aa1              LDR      r2,|L3.1112|
0001d2  4ba2              LDR      r3,|L3.1116|
0001d4  e9cd0102          STRD     r0,r1,[sp,#8]         ;347
0001d8  f7fffffe          BL       __aeabi_dmul
0001dc  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;347
0001e0  f7fffffe          BL       __aeabi_d2f
0001e4  9016              STR      r0,[sp,#0x58]         ;347
0001e6  e00d              B        |L3.516|
                  |L3.488|
0001e8  9819              LDR      r0,[sp,#0x64]         ;351
0001ea  f7fffffe          BL       __aeabi_ui2d
0001ee  4a9a              LDR      r2,|L3.1112|
0001f0  4b9a              LDR      r3,|L3.1116|
0001f2  e9cd0102          STRD     r0,r1,[sp,#8]         ;351
0001f6  f7fffffe          BL       __aeabi_dmul
0001fa  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;351
0001fe  f7fffffe          BL       __aeabi_d2f
000202  9016              STR      r0,[sp,#0x58]         ;351
                  |L3.516|
000204  488f              LDR      r0,|L3.1092|
000206  7800              LDRB     r0,[r0,#0]            ;354  ; VoltageA
000208  4995              LDR      r1,|L3.1120|
00020a  6008              STR      r0,[r1,#0]            ;354  ; Up_VolA
00020c  4895              LDR      r0,|L3.1124|
00020e  8800              LDRH     r0,[r0,#0]            ;355  ; Huganqibeilv
000210  f7fffffe          BL       __aeabi_ui2f
000214  9000              STR      r0,[sp,#0]            ;355
000216  488e              LDR      r0,|L3.1104|
000218  6801              LDR      r1,[r0,#0]            ;355  ; CurrentA
00021a  9800              LDR      r0,[sp,#0]            ;355
00021c  f7fffffe          BL       __aeabi_fmul
000220  9001              STR      r0,[sp,#4]            ;355
000222  f7fffffe          BL       __aeabi_f2d
000226  2200              MOVS     r2,#0                 ;355
000228  4b8f              LDR      r3,|L3.1128|
00022a  e9cd0102          STRD     r0,r1,[sp,#8]         ;355
00022e  f7fffffe          BL       __aeabi_dadd
000232  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;355
000236  f7fffffe          BL       __aeabi_d2uiz
00023a  498c              LDR      r1,|L3.1132|
00023c  6008              STR      r0,[r1,#0]            ;355  ; Up_CurrentA
00023e  4889              LDR      r0,|L3.1124|
000240  8800              LDRH     r0,[r0,#0]            ;356  ; Huganqibeilv
000242  f7fffffe          BL       __aeabi_ui2f
000246  9000              STR      r0,[sp,#0]            ;356
000248  9918              LDR      r1,[sp,#0x60]         ;356
00024a  f7fffffe          BL       __aeabi_fmul
00024e  9001              STR      r0,[sp,#4]            ;356
000250  f7fffffe          BL       __aeabi_f2d
000254  2200              MOVS     r2,#0                 ;356
000256  4b84              LDR      r3,|L3.1128|
000258  e9cd0102          STRD     r0,r1,[sp,#8]         ;356
00025c  f7fffffe          BL       __aeabi_dadd
000260  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;356
000264  f7fffffe          BL       __aeabi_d2uiz
000268  4981              LDR      r1,|L3.1136|
00026a  6008              STR      r0,[r1,#0]            ;356  ; Up_PA_Power
00026c  487d              LDR      r0,|L3.1124|
00026e  8800              LDRH     r0,[r0,#0]            ;362  ; Huganqibeilv
000270  f7fffffe          BL       __aeabi_ui2f
000274  9000              STR      r0,[sp,#0]            ;362
000276  9917              LDR      r1,[sp,#0x5c]         ;362
000278  f7fffffe          BL       __aeabi_fmul
00027c  9001              STR      r0,[sp,#4]            ;362
00027e  f7fffffe          BL       __aeabi_f2d
000282  2200              MOVS     r2,#0                 ;362
000284  4b78              LDR      r3,|L3.1128|
000286  e9cd0102          STRD     r0,r1,[sp,#8]         ;362
00028a  f7fffffe          BL       __aeabi_dadd
00028e  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;362
000292  f7fffffe          BL       __aeabi_d2uiz
000296  4977              LDR      r1,|L3.1140|
000298  6008              STR      r0,[r1,#0]            ;362  ; Up_QA_Power
00029a  4872              LDR      r0,|L3.1124|
00029c  8800              LDRH     r0,[r0,#0]            ;366  ; Huganqibeilv
00029e  f7fffffe          BL       __aeabi_ui2f
0002a2  9000              STR      r0,[sp,#0]            ;366
0002a4  9916              LDR      r1,[sp,#0x58]         ;366
0002a6  f7fffffe          BL       __aeabi_fmul
0002aa  9001              STR      r0,[sp,#4]            ;366
0002ac  f7fffffe          BL       __aeabi_f2d
0002b0  2200              MOVS     r2,#0                 ;366
0002b2  4b6d              LDR      r3,|L3.1128|
0002b4  e9cd0102          STRD     r0,r1,[sp,#8]         ;366
0002b8  f7fffffe          BL       __aeabi_dadd
0002bc  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;366
0002c0  f7fffffe          BL       __aeabi_d2uiz
0002c4  901e              STR      r0,[sp,#0x78]         ;366
0002c6  200e              MOVS     r0,#0xe               ;373
0002c8  f7fffffe          BL       READ_Att7022
0002cc  9015              STR      r0,[sp,#0x54]         ;373
0002ce  2064              MOVS     r0,#0x64              ;374
0002d0  f7fffffe          BL       bsp_spiDelay
0002d4  2011              MOVS     r0,#0x11              ;375
0002d6  f7fffffe          BL       READ_Att7022
0002da  9014              STR      r0,[sp,#0x50]         ;375
0002dc  2064              MOVS     r0,#0x64              ;376
0002de  f7fffffe          BL       bsp_spiDelay
0002e2  2002              MOVS     r0,#2                 ;377
0002e4  f7fffffe          BL       READ_Att7022
0002e8  9013              STR      r0,[sp,#0x4c]         ;377
0002ea  2064              MOVS     r0,#0x64              ;378
0002ec  f7fffffe          BL       bsp_spiDelay
0002f0  2006              MOVS     r0,#6                 ;379
0002f2  f7fffffe          BL       READ_Att7022
0002f6  9012              STR      r0,[sp,#0x48]         ;379
0002f8  2064              MOVS     r0,#0x64              ;380
0002fa  f7fffffe          BL       bsp_spiDelay
0002fe  200a              MOVS     r0,#0xa               ;383
000300  f7fffffe          BL       READ_Att7022
000304  9011              STR      r0,[sp,#0x44]         ;383
000306  9815              LDR      r0,[sp,#0x54]         ;384
000308  f3c03047          UBFX     r0,r0,#13,#8          ;384
00030c  495a              LDR      r1,|L3.1144|
00030e  7008              STRB     r0,[r1,#0]            ;384
000310  9814              LDR      r0,[sp,#0x50]         ;385
000312  f7fffffe          BL       __aeabi_ui2f
000316  f04f418c          MOV      r1,#0x46000000        ;385
00031a  9000              STR      r0,[sp,#0]            ;385
00031c  f7fffffe          BL       __aeabi_fdiv
000320  9001              STR      r0,[sp,#4]            ;385
000322  f7fffffe          BL       __aeabi_f2d
000326  4a48              LDR      r2,|L3.1096|
000328  4b48              LDR      r3,|L3.1100|
00032a  e9cd0102          STRD     r0,r1,[sp,#8]         ;385
00032e  f7fffffe          BL       __aeabi_ddiv
000332  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;385
000336  f7fffffe          BL       __aeabi_d2f
00033a  4950              LDR      r1,|L3.1148|
00033c  6008              STR      r0,[r1,#0]            ;385  ; CurrentB
00033e  2064              MOVS     r0,#0x64              ;386
000340  f7fffffe          BL       bsp_spiDelay
000344  2015              MOVS     r0,#0x15              ;387
000346  f7fffffe          BL       READ_Att7022
00034a  9005              STR      r0,[sp,#0x14]         ;387
00034c  f7fffffe          BL       __aeabi_i2f
000350  494b              LDR      r1,|L3.1152|
000352  6008              STR      r0,[r1,#0]            ;387  ; TempB
000354  f04f4196          MOV      r1,#0x4b000000        ;388
000358  4849              LDR      r0,|L3.1152|
00035a  6800              LDR      r0,[r0,#0]            ;388  ; TempB
00035c  f7fffffe          BL       __aeabi_cfrcmple
000360  d20d              BCS      |L3.894|
000362  4847              LDR      r0,|L3.1152|
000364  6801              LDR      r1,[r0,#0]            ;390  ; TempB
000366  f04f4097          MOV      r0,#0x4b800000        ;390
00036a  f7fffffe          BL       __aeabi_fsub
00036e  f04f4196          MOV      r1,#0x4b000000        ;390
000372  9005              STR      r0,[sp,#0x14]         ;390
000374  f7fffffe          BL       __aeabi_fdiv
000378  4941              LDR      r1,|L3.1152|
00037a  6008              STR      r0,[r1,#0]            ;390  ; TempB
00037c  e007              B        |L3.910|
                  |L3.894|
00037e  f04f4196          MOV      r1,#0x4b000000        ;394
000382  483f              LDR      r0,|L3.1152|
000384  6800              LDR      r0,[r0,#0]            ;394  ; TempB
000386  f7fffffe          BL       __aeabi_fdiv
00038a  493d              LDR      r1,|L3.1152|
00038c  6008              STR      r0,[r1,#0]            ;394  ; TempB
                  |L3.910|
00038e  9813              LDR      r0,[sp,#0x4c]         ;397
000390  f5b00f00          CMP      r0,#0x800000          ;397
000394  d911              BLS      |L3.954|
000396  9813              LDR      r0,[sp,#0x4c]         ;399
000398  f1c07080          RSB      r0,r0,#0x1000000      ;399
00039c  9001              STR      r0,[sp,#4]            ;399
00039e  f7fffffe          BL       __aeabi_ui2d
0003a2  4a2d              LDR      r2,|L3.1112|
0003a4  4b2d              LDR      r3,|L3.1116|
0003a6  e9cd0102          STRD     r0,r1,[sp,#8]         ;399
0003aa  f7fffffe          BL       __aeabi_dmul
0003ae  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;399
0003b2  f7fffffe          BL       __aeabi_d2f
0003b6  9010              STR      r0,[sp,#0x40]         ;399
0003b8  e00d              B        |L3.982|
                  |L3.954|
0003ba  9813              LDR      r0,[sp,#0x4c]         ;403
0003bc  f7fffffe          BL       __aeabi_ui2d
0003c0  4a25              LDR      r2,|L3.1112|
0003c2  4b26              LDR      r3,|L3.1116|
0003c4  e9cd0102          STRD     r0,r1,[sp,#8]         ;403
0003c8  f7fffffe          BL       __aeabi_dmul
0003cc  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;403
0003d0  f7fffffe          BL       __aeabi_d2f
0003d4  9010              STR      r0,[sp,#0x40]         ;403
                  |L3.982|
0003d6  9812              LDR      r0,[sp,#0x48]         ;406
0003d8  f5b00f00          CMP      r0,#0x800000          ;406
0003dc  d911              BLS      |L3.1026|
0003de  9812              LDR      r0,[sp,#0x48]         ;408
0003e0  f1c07080          RSB      r0,r0,#0x1000000      ;408
0003e4  9001              STR      r0,[sp,#4]            ;408
0003e6  f7fffffe          BL       __aeabi_ui2d
0003ea  4a1b              LDR      r2,|L3.1112|
0003ec  4b1b              LDR      r3,|L3.1116|
0003ee  e9cd0102          STRD     r0,r1,[sp,#8]         ;408
0003f2  f7fffffe          BL       __aeabi_dmul
0003f6  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;408
0003fa  f7fffffe          BL       __aeabi_d2f
0003fe  900f              STR      r0,[sp,#0x3c]         ;408
000400  e00d              B        |L3.1054|
                  |L3.1026|
000402  9812              LDR      r0,[sp,#0x48]         ;412
000404  f7fffffe          BL       __aeabi_ui2d
000408  4a13              LDR      r2,|L3.1112|
00040a  4b14              LDR      r3,|L3.1116|
00040c  e9cd0102          STRD     r0,r1,[sp,#8]         ;412
000410  f7fffffe          BL       __aeabi_dmul
000414  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;412
000418  f7fffffe          BL       __aeabi_d2f
00041c  900f              STR      r0,[sp,#0x3c]         ;412
                  |L3.1054|
00041e  9811              LDR      r0,[sp,#0x44]         ;415
000420  f5b00f00          CMP      r0,#0x800000          ;415
000424  d934              BLS      |L3.1168|
000426  9811              LDR      r0,[sp,#0x44]         ;417
000428  f1c07080          RSB      r0,r0,#0x1000000      ;417
00042c  9001              STR      r0,[sp,#4]            ;417
00042e  f7fffffe          BL       __aeabi_ui2d
000432  4a09              LDR      r2,|L3.1112|
000434  4b09              LDR      r3,|L3.1116|
000436  e9cd0102          STRD     r0,r1,[sp,#8]         ;417
00043a  f7fffffe          BL       __aeabi_dmul
00043e  e021              B        |L3.1156|
                  |L3.1088|
                          DCD      Device_ID
                  |L3.1092|
                          DCD      VoltageA
                  |L3.1096|
                          DCD      0xcccccccd
                  |L3.1100|
                          DCD      0x4033cccc
                  |L3.1104|
                          DCD      CurrentA
                  |L3.1108|
                          DCD      TempA
                  |L3.1112|
                          DCD      0x93dd97f6
                  |L3.1116|
                          DCD      0x3f9a8587
                  |L3.1120|
                          DCD      Up_VolA
                  |L3.1124|
                          DCD      Huganqibeilv
                  |L3.1128|
                          DCD      0x3fe00000
                  |L3.1132|
                          DCD      Up_CurrentA
                  |L3.1136|
                          DCD      Up_PA_Power
                  |L3.1140|
                          DCD      Up_QA_Power
                  |L3.1144|
                          DCD      VoltageB
                  |L3.1148|
                          DCD      CurrentB
                  |L3.1152|
                          DCD      TempB
                  |L3.1156|
000484  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;417
000488  f7fffffe          BL       __aeabi_d2f
00048c  900e              STR      r0,[sp,#0x38]         ;417
00048e  e00d              B        |L3.1196|
                  |L3.1168|
000490  9811              LDR      r0,[sp,#0x44]         ;421
000492  f7fffffe          BL       __aeabi_ui2d
000496  4ade              LDR      r2,|L3.2064|
000498  4bde              LDR      r3,|L3.2068|
00049a  e9cd0102          STRD     r0,r1,[sp,#8]         ;421
00049e  f7fffffe          BL       __aeabi_dmul
0004a2  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;421
0004a6  f7fffffe          BL       __aeabi_d2f
0004aa  900e              STR      r0,[sp,#0x38]         ;421
                  |L3.1196|
0004ac  48da              LDR      r0,|L3.2072|
0004ae  7800              LDRB     r0,[r0,#0]            ;425  ; VoltageB
0004b0  49da              LDR      r1,|L3.2076|
0004b2  6008              STR      r0,[r1,#0]            ;425  ; Up_VolB
0004b4  48da              LDR      r0,|L3.2080|
0004b6  8800              LDRH     r0,[r0,#0]            ;426  ; Huganqibeilv
0004b8  f7fffffe          BL       __aeabi_ui2f
0004bc  9000              STR      r0,[sp,#0]            ;426
0004be  48d9              LDR      r0,|L3.2084|
0004c0  6801              LDR      r1,[r0,#0]            ;426  ; CurrentB
0004c2  9800              LDR      r0,[sp,#0]            ;426
0004c4  f7fffffe          BL       __aeabi_fmul
0004c8  9001              STR      r0,[sp,#4]            ;426
0004ca  f7fffffe          BL       __aeabi_f2d
0004ce  2200              MOVS     r2,#0                 ;426
0004d0  4bd5              LDR      r3,|L3.2088|
0004d2  e9cd0102          STRD     r0,r1,[sp,#8]         ;426
0004d6  f7fffffe          BL       __aeabi_dadd
0004da  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;426
0004de  f7fffffe          BL       __aeabi_d2uiz
0004e2  49d2              LDR      r1,|L3.2092|
0004e4  6008              STR      r0,[r1,#0]            ;426  ; Up_CurrentB
0004e6  48ce              LDR      r0,|L3.2080|
0004e8  8800              LDRH     r0,[r0,#0]            ;427  ; Huganqibeilv
0004ea  f7fffffe          BL       __aeabi_ui2f
0004ee  9000              STR      r0,[sp,#0]            ;427
0004f0  9910              LDR      r1,[sp,#0x40]         ;427
0004f2  f7fffffe          BL       __aeabi_fmul
0004f6  9001              STR      r0,[sp,#4]            ;427
0004f8  f7fffffe          BL       __aeabi_f2d
0004fc  2200              MOVS     r2,#0                 ;427
0004fe  4bca              LDR      r3,|L3.2088|
000500  e9cd0102          STRD     r0,r1,[sp,#8]         ;427
000504  f7fffffe          BL       __aeabi_dadd
000508  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;427
00050c  f7fffffe          BL       __aeabi_d2uiz
000510  49c7              LDR      r1,|L3.2096|
000512  6008              STR      r0,[r1,#0]            ;427  ; Up_PB_Power
000514  48c2              LDR      r0,|L3.2080|
000516  8800              LDRH     r0,[r0,#0]            ;432  ; Huganqibeilv
000518  f7fffffe          BL       __aeabi_ui2f
00051c  9000              STR      r0,[sp,#0]            ;432
00051e  990f              LDR      r1,[sp,#0x3c]         ;432
000520  f7fffffe          BL       __aeabi_fmul
000524  9001              STR      r0,[sp,#4]            ;432
000526  f7fffffe          BL       __aeabi_f2d
00052a  2200              MOVS     r2,#0                 ;432
00052c  4bbe              LDR      r3,|L3.2088|
00052e  e9cd0102          STRD     r0,r1,[sp,#8]         ;432
000532  f7fffffe          BL       __aeabi_dadd
000536  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;432
00053a  f7fffffe          BL       __aeabi_d2uiz
00053e  49bd              LDR      r1,|L3.2100|
000540  6008              STR      r0,[r1,#0]            ;432  ; Up_QB_Power
000542  48b7              LDR      r0,|L3.2080|
000544  8800              LDRH     r0,[r0,#0]            ;435  ; Huganqibeilv
000546  f7fffffe          BL       __aeabi_ui2f
00054a  9000              STR      r0,[sp,#0]            ;435
00054c  990e              LDR      r1,[sp,#0x38]         ;435
00054e  f7fffffe          BL       __aeabi_fmul
000552  9001              STR      r0,[sp,#4]            ;435
000554  f7fffffe          BL       __aeabi_f2d
000558  2200              MOVS     r2,#0                 ;435
00055a  4bb3              LDR      r3,|L3.2088|
00055c  e9cd0102          STRD     r0,r1,[sp,#8]         ;435
000560  f7fffffe          BL       __aeabi_dadd
000564  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;435
000568  f7fffffe          BL       __aeabi_d2uiz
00056c  901f              STR      r0,[sp,#0x7c]         ;435
00056e  200f              MOVS     r0,#0xf               ;442
000570  f7fffffe          BL       READ_Att7022
000574  900d              STR      r0,[sp,#0x34]         ;442
000576  2064              MOVS     r0,#0x64              ;443
000578  f7fffffe          BL       bsp_spiDelay
00057c  2012              MOVS     r0,#0x12              ;444
00057e  f7fffffe          BL       READ_Att7022
000582  900c              STR      r0,[sp,#0x30]         ;444
000584  2064              MOVS     r0,#0x64              ;445
000586  f7fffffe          BL       bsp_spiDelay
00058a  2003              MOVS     r0,#3                 ;446
00058c  f7fffffe          BL       READ_Att7022
000590  900b              STR      r0,[sp,#0x2c]         ;446
000592  2064              MOVS     r0,#0x64              ;447
000594  f7fffffe          BL       bsp_spiDelay
000598  2007              MOVS     r0,#7                 ;448
00059a  f7fffffe          BL       READ_Att7022
00059e  900a              STR      r0,[sp,#0x28]         ;448
0005a0  2064              MOVS     r0,#0x64              ;449
0005a2  f7fffffe          BL       bsp_spiDelay
0005a6  200b              MOVS     r0,#0xb               ;452
0005a8  f7fffffe          BL       READ_Att7022
0005ac  9009              STR      r0,[sp,#0x24]         ;452
0005ae  980d              LDR      r0,[sp,#0x34]         ;453
0005b0  f3c03047          UBFX     r0,r0,#13,#8          ;453
0005b4  49a0              LDR      r1,|L3.2104|
0005b6  7008              STRB     r0,[r1,#0]            ;453
0005b8  980c              LDR      r0,[sp,#0x30]         ;454
0005ba  f7fffffe          BL       __aeabi_ui2f
0005be  f04f418c          MOV      r1,#0x46000000        ;454
0005c2  9000              STR      r0,[sp,#0]            ;454
0005c4  f7fffffe          BL       __aeabi_fdiv
0005c8  9001              STR      r0,[sp,#4]            ;454
0005ca  f7fffffe          BL       __aeabi_f2d
0005ce  4a9b              LDR      r2,|L3.2108|
0005d0  4b9b              LDR      r3,|L3.2112|
0005d2  e9cd0102          STRD     r0,r1,[sp,#8]         ;454
0005d6  f7fffffe          BL       __aeabi_ddiv
0005da  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;454
0005de  f7fffffe          BL       __aeabi_d2f
0005e2  4998              LDR      r1,|L3.2116|
0005e4  6008              STR      r0,[r1,#0]            ;454  ; CurrentC
0005e6  2064              MOVS     r0,#0x64              ;455
0005e8  f7fffffe          BL       bsp_spiDelay
0005ec  2016              MOVS     r0,#0x16              ;456
0005ee  f7fffffe          BL       READ_Att7022
0005f2  9005              STR      r0,[sp,#0x14]         ;456
0005f4  f7fffffe          BL       __aeabi_i2f
0005f8  4993              LDR      r1,|L3.2120|
0005fa  6008              STR      r0,[r1,#0]            ;456  ; TempC
0005fc  f04f4196          MOV      r1,#0x4b000000        ;457
000600  4891              LDR      r0,|L3.2120|
000602  6800              LDR      r0,[r0,#0]            ;457  ; TempC
000604  f7fffffe          BL       __aeabi_cfrcmple
000608  d20d              BCS      |L3.1574|
00060a  488f              LDR      r0,|L3.2120|
00060c  6801              LDR      r1,[r0,#0]            ;459  ; TempC
00060e  f04f4097          MOV      r0,#0x4b800000        ;459
000612  f7fffffe          BL       __aeabi_fsub
000616  f04f4196          MOV      r1,#0x4b000000        ;459
00061a  9005              STR      r0,[sp,#0x14]         ;459
00061c  f7fffffe          BL       __aeabi_fdiv
000620  4989              LDR      r1,|L3.2120|
000622  6008              STR      r0,[r1,#0]            ;459  ; TempC
000624  e007              B        |L3.1590|
                  |L3.1574|
000626  f04f4196          MOV      r1,#0x4b000000        ;463
00062a  4887              LDR      r0,|L3.2120|
00062c  6800              LDR      r0,[r0,#0]            ;463  ; TempC
00062e  f7fffffe          BL       __aeabi_fdiv
000632  4985              LDR      r1,|L3.2120|
000634  6008              STR      r0,[r1,#0]            ;463  ; TempC
                  |L3.1590|
000636  980b              LDR      r0,[sp,#0x2c]         ;467
000638  f5b00f00          CMP      r0,#0x800000          ;467
00063c  d911              BLS      |L3.1634|
00063e  980b              LDR      r0,[sp,#0x2c]         ;469
000640  f1c07080          RSB      r0,r0,#0x1000000      ;469
000644  9001              STR      r0,[sp,#4]            ;469
000646  f7fffffe          BL       __aeabi_ui2d
00064a  4a71              LDR      r2,|L3.2064|
00064c  4b71              LDR      r3,|L3.2068|
00064e  e9cd0102          STRD     r0,r1,[sp,#8]         ;469
000652  f7fffffe          BL       __aeabi_dmul
000656  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;469
00065a  f7fffffe          BL       __aeabi_d2f
00065e  9008              STR      r0,[sp,#0x20]         ;469
000660  e00d              B        |L3.1662|
                  |L3.1634|
000662  980b              LDR      r0,[sp,#0x2c]         ;473
000664  f7fffffe          BL       __aeabi_ui2d
000668  4a69              LDR      r2,|L3.2064|
00066a  4b6a              LDR      r3,|L3.2068|
00066c  e9cd0102          STRD     r0,r1,[sp,#8]         ;473
000670  f7fffffe          BL       __aeabi_dmul
000674  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;473
000678  f7fffffe          BL       __aeabi_d2f
00067c  9008              STR      r0,[sp,#0x20]         ;473
                  |L3.1662|
00067e  980a              LDR      r0,[sp,#0x28]         ;476
000680  f5b00f00          CMP      r0,#0x800000          ;476
000684  d911              BLS      |L3.1706|
000686  980a              LDR      r0,[sp,#0x28]         ;478
000688  f1c07080          RSB      r0,r0,#0x1000000      ;478
00068c  9001              STR      r0,[sp,#4]            ;478
00068e  f7fffffe          BL       __aeabi_ui2d
000692  4a5f              LDR      r2,|L3.2064|
000694  4b5f              LDR      r3,|L3.2068|
000696  e9cd0102          STRD     r0,r1,[sp,#8]         ;478
00069a  f7fffffe          BL       __aeabi_dmul
00069e  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;478
0006a2  f7fffffe          BL       __aeabi_d2f
0006a6  9007              STR      r0,[sp,#0x1c]         ;478
0006a8  e00d              B        |L3.1734|
                  |L3.1706|
0006aa  980a              LDR      r0,[sp,#0x28]         ;482
0006ac  f7fffffe          BL       __aeabi_ui2d
0006b0  4a57              LDR      r2,|L3.2064|
0006b2  4b58              LDR      r3,|L3.2068|
0006b4  e9cd0102          STRD     r0,r1,[sp,#8]         ;482
0006b8  f7fffffe          BL       __aeabi_dmul
0006bc  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;482
0006c0  f7fffffe          BL       __aeabi_d2f
0006c4  9007              STR      r0,[sp,#0x1c]         ;482
                  |L3.1734|
0006c6  9809              LDR      r0,[sp,#0x24]         ;485
0006c8  f5b00f00          CMP      r0,#0x800000          ;485
0006cc  d911              BLS      |L3.1778|
0006ce  9809              LDR      r0,[sp,#0x24]         ;487
0006d0  f1c07080          RSB      r0,r0,#0x1000000      ;487
0006d4  9001              STR      r0,[sp,#4]            ;487
0006d6  f7fffffe          BL       __aeabi_ui2d
0006da  4a4d              LDR      r2,|L3.2064|
0006dc  4b4d              LDR      r3,|L3.2068|
0006de  e9cd0102          STRD     r0,r1,[sp,#8]         ;487
0006e2  f7fffffe          BL       __aeabi_dmul
0006e6  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;487
0006ea  f7fffffe          BL       __aeabi_d2f
0006ee  9006              STR      r0,[sp,#0x18]         ;487
0006f0  e00d              B        |L3.1806|
                  |L3.1778|
0006f2  9809              LDR      r0,[sp,#0x24]         ;491
0006f4  f7fffffe          BL       __aeabi_ui2d
0006f8  4a45              LDR      r2,|L3.2064|
0006fa  4b46              LDR      r3,|L3.2068|
0006fc  e9cd0102          STRD     r0,r1,[sp,#8]         ;491
000700  f7fffffe          BL       __aeabi_dmul
000704  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;491
000708  f7fffffe          BL       __aeabi_d2f
00070c  9006              STR      r0,[sp,#0x18]         ;491
                  |L3.1806|
00070e  9822              LDR      r0,[sp,#0x88]         ;494
000710  b1d0              CBZ      r0,|L3.1864|
000712  2038              MOVS     r0,#0x38              ;496
000714  f7fffffe          BL       READ_Att7022
000718  494c              LDR      r1,|L3.2124|
00071a  6008              STR      r0,[r1,#0]            ;496  ; EST_Q
00071c  2064              MOVS     r0,#0x64              ;498
00071e  f7fffffe          BL       bsp_spiDelay
000722  484a              LDR      r0,|L3.2124|
000724  6800              LDR      r0,[r0,#0]            ;500  ; EST_Q
000726  3010              ADDS     r0,r0,#0x10           ;500
000728  0940              LSRS     r0,r0,#5              ;500
00072a  493d              LDR      r1,|L3.2080|
00072c  8809              LDRH     r1,[r1,#0]            ;500  ; Huganqibeilv
00072e  4a48              LDR      r2,|L3.2128|
000730  6812              LDR      r2,[r2,#0]            ;500  ; EST_Q_buff
000732  fb002001          MLA      r0,r0,r1,r2           ;500
000736  4946              LDR      r1,|L3.2128|
000738  6008              STR      r0,[r1,#0]            ;500  ; EST_Q_buff
00073a  4608              MOV      r0,r1                 ;501
00073c  6800              LDR      r0,[r0,#0]            ;501  ; EST_Q_buff
00073e  2164              MOVS     r1,#0x64              ;501
000740  fbb0f0f1          UDIV     r0,r0,r1              ;501
000744  4943              LDR      r1,|L3.2132|
000746  6008              STR      r0,[r1,#0]            ;501  ; CurrentElectric
                  |L3.1864|
000748  483b              LDR      r0,|L3.2104|
00074a  7800              LDRB     r0,[r0,#0]            ;504  ; VoltageC
00074c  4942              LDR      r1,|L3.2136|
00074e  6008              STR      r0,[r1,#0]            ;504  ; Up_VolC
000750  4833              LDR      r0,|L3.2080|
000752  8800              LDRH     r0,[r0,#0]            ;505  ; Huganqibeilv
000754  f7fffffe          BL       __aeabi_ui2f
000758  9000              STR      r0,[sp,#0]            ;505
00075a  483a              LDR      r0,|L3.2116|
00075c  6801              LDR      r1,[r0,#0]            ;505  ; CurrentC
00075e  9800              LDR      r0,[sp,#0]            ;505
000760  f7fffffe          BL       __aeabi_fmul
000764  9001              STR      r0,[sp,#4]            ;505
000766  f7fffffe          BL       __aeabi_f2d
00076a  2200              MOVS     r2,#0                 ;505
00076c  4b2e              LDR      r3,|L3.2088|
00076e  e9cd0102          STRD     r0,r1,[sp,#8]         ;505
000772  f7fffffe          BL       __aeabi_dadd
000776  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;505
00077a  f7fffffe          BL       __aeabi_d2uiz
00077e  4937              LDR      r1,|L3.2140|
000780  6008              STR      r0,[r1,#0]            ;505  ; Up_CurrentC
000782  4827              LDR      r0,|L3.2080|
000784  8800              LDRH     r0,[r0,#0]            ;506  ; Huganqibeilv
000786  f7fffffe          BL       __aeabi_ui2f
00078a  9000              STR      r0,[sp,#0]            ;506
00078c  9908              LDR      r1,[sp,#0x20]         ;506
00078e  f7fffffe          BL       __aeabi_fmul
000792  9001              STR      r0,[sp,#4]            ;506
000794  f7fffffe          BL       __aeabi_f2d
000798  2200              MOVS     r2,#0                 ;506
00079a  4b23              LDR      r3,|L3.2088|
00079c  e9cd0102          STRD     r0,r1,[sp,#8]         ;506
0007a0  f7fffffe          BL       __aeabi_dadd
0007a4  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;506
0007a8  f7fffffe          BL       __aeabi_d2uiz
0007ac  492c              LDR      r1,|L3.2144|
0007ae  6008              STR      r0,[r1,#0]            ;506  ; Up_PC_Power
0007b0  481b              LDR      r0,|L3.2080|
0007b2  8800              LDRH     r0,[r0,#0]            ;512  ; Huganqibeilv
0007b4  f7fffffe          BL       __aeabi_ui2f
0007b8  9000              STR      r0,[sp,#0]            ;512
0007ba  9907              LDR      r1,[sp,#0x1c]         ;512
0007bc  f7fffffe          BL       __aeabi_fmul
0007c0  9001              STR      r0,[sp,#4]            ;512
0007c2  f7fffffe          BL       __aeabi_f2d
0007c6  2200              MOVS     r2,#0                 ;512
0007c8  4b17              LDR      r3,|L3.2088|
0007ca  e9cd0102          STRD     r0,r1,[sp,#8]         ;512
0007ce  f7fffffe          BL       __aeabi_dadd
0007d2  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;512
0007d6  f7fffffe          BL       __aeabi_d2uiz
0007da  4922              LDR      r1,|L3.2148|
0007dc  6008              STR      r0,[r1,#0]            ;512  ; Up_QC_Power
0007de  4810              LDR      r0,|L3.2080|
0007e0  8800              LDRH     r0,[r0,#0]            ;515  ; Huganqibeilv
0007e2  f7fffffe          BL       __aeabi_ui2f
0007e6  9000              STR      r0,[sp,#0]            ;515
0007e8  9906              LDR      r1,[sp,#0x18]         ;515
0007ea  f7fffffe          BL       __aeabi_fmul
0007ee  9001              STR      r0,[sp,#4]            ;515
0007f0  f7fffffe          BL       __aeabi_f2d
0007f4  2200              MOVS     r2,#0                 ;515
0007f6  4b0c              LDR      r3,|L3.2088|
0007f8  e9cd0102          STRD     r0,r1,[sp,#8]         ;515
0007fc  f7fffffe          BL       __aeabi_dadd
000800  e9cd0104          STRD     r0,r1,[sp,#0x10]      ;515
000804  f7fffffe          BL       __aeabi_d2uiz
000808  9020              STR      r0,[sp,#0x80]         ;515
00080a  bf00              NOP      
00080c  e425              B        |L3.90|
;;;524    
                          ENDP

00080e  0000              DCW      0x0000
                  |L3.2064|
                          DCD      0x93dd97f6
                  |L3.2068|
                          DCD      0x3f9a8587
                  |L3.2072|
                          DCD      VoltageB
                  |L3.2076|
                          DCD      Up_VolB
                  |L3.2080|
                          DCD      Huganqibeilv
                  |L3.2084|
                          DCD      CurrentB
                  |L3.2088|
                          DCD      0x3fe00000
                  |L3.2092|
                          DCD      Up_CurrentB
                  |L3.2096|
                          DCD      Up_PB_Power
                  |L3.2100|
                          DCD      Up_QB_Power
                  |L3.2104|
                          DCD      VoltageC
                  |L3.2108|
                          DCD      0xcccccccd
                  |L3.2112|
                          DCD      0x4033cccc
                  |L3.2116|
                          DCD      CurrentC
                  |L3.2120|
                          DCD      TempC
                  |L3.2124|
                          DCD      EST_Q
                  |L3.2128|
                          DCD      EST_Q_buff
                  |L3.2132|
                          DCD      CurrentElectric
                  |L3.2136|
                          DCD      Up_VolC
                  |L3.2140|
                          DCD      Up_CurrentC
                  |L3.2144|
                          DCD      Up_PC_Power
                  |L3.2148|
                          DCD      Up_QC_Power

                          AREA ||i.Write_Att7022||, CODE, READONLY, ALIGN=2

                  Write_Att7022 PROC
;;;155    
;;;156    void Write_Att7022(uint8_t Address, uint32_t dwData)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;158    uint8_t i, bTemp;
;;;159    uint32_t dwTemp;
;;;160    
;;;161    SPI_CS_HIGH();
000008  f44f5180          MOV      r1,#0x1000
00000c  4835              LDR      r0,|L4.228|
00000e  f7fffffe          BL       GPIO_SetBits
;;;162    SPI_CLK_LOW();
000012  f44f5100          MOV      r1,#0x2000
000016  4833              LDR      r0,|L4.228|
000018  f7fffffe          BL       GPIO_ResetBits
;;;163    SPI_CS_LOW();	 //开启SPI传输
00001c  f44f5180          MOV      r1,#0x1000
000020  4830              LDR      r0,|L4.228|
000022  f7fffffe          BL       GPIO_ResetBits
;;;164    
;;;165    Address |= 0x80;//write
000026  f0450580          ORR      r5,r5,#0x80
;;;166    bTemp = 0x80;
00002a  f04f0880          MOV      r8,#0x80
;;;167    for(i=0; i<8; i++)         //Write the Address
00002e  2400              MOVS     r4,#0
000030  e021              B        |L4.118|
                  |L4.50|
;;;168    {
;;;169    SPI_CLK_HIGH();
000032  f44f5100          MOV      r1,#0x2000
000036  482b              LDR      r0,|L4.228|
000038  f7fffffe          BL       GPIO_SetBits
;;;170    if(Address & bTemp)
00003c  ea050008          AND      r0,r5,r8
000040  b128              CBZ      r0,|L4.78|
;;;171    {
;;;172    SPI_DI_HIGH();
000042  f44f4100          MOV      r1,#0x8000
000046  4827              LDR      r0,|L4.228|
000048  f7fffffe          BL       GPIO_SetBits
00004c  e004              B        |L4.88|
                  |L4.78|
;;;173    }
;;;174    else
;;;175    SPI_DI_LOW();
00004e  f44f4100          MOV      r1,#0x8000
000052  4824              LDR      r0,|L4.228|
000054  f7fffffe          BL       GPIO_ResetBits
                  |L4.88|
;;;176    bTemp >>= 1;
000058  ea4f0868          ASR      r8,r8,#1
;;;177    bsp_spiDelay(1) ;
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       bsp_spiDelay
;;;178    SPI_CLK_LOW();
000062  f44f5100          MOV      r1,#0x2000
000066  481f              LDR      r0,|L4.228|
000068  f7fffffe          BL       GPIO_ResetBits
;;;179    bsp_spiDelay(1) ;
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       bsp_spiDelay
000072  1c60              ADDS     r0,r4,#1              ;167
000074  b2c4              UXTB     r4,r0                 ;167
                  |L4.118|
000076  2c08              CMP      r4,#8                 ;167
000078  dbdb              BLT      |L4.50|
;;;180    }
;;;181    bsp_spiDelay(3);
00007a  2003              MOVS     r0,#3
00007c  f7fffffe          BL       bsp_spiDelay
;;;182    
;;;183    dwTemp = 0x00800000;
000080  f44f0600          MOV      r6,#0x800000
;;;184    for(i=0; i<24; i++)  //Write Data
000084  2400              MOVS     r4,#0
000086  e020              B        |L4.202|
                  |L4.136|
;;;185    {
;;;186    if(dwData & dwTemp)
000088  ea070006          AND      r0,r7,r6
00008c  b128              CBZ      r0,|L4.154|
;;;187    {
;;;188    SPI_DI_HIGH();
00008e  f44f4100          MOV      r1,#0x8000
000092  4814              LDR      r0,|L4.228|
000094  f7fffffe          BL       GPIO_SetBits
000098  e004              B        |L4.164|
                  |L4.154|
;;;189    }
;;;190    else
;;;191    SPI_DI_LOW();
00009a  f44f4100          MOV      r1,#0x8000
00009e  4811              LDR      r0,|L4.228|
0000a0  f7fffffe          BL       GPIO_ResetBits
                  |L4.164|
;;;192    SPI_CLK_HIGH();
0000a4  f44f5100          MOV      r1,#0x2000
0000a8  480e              LDR      r0,|L4.228|
0000aa  f7fffffe          BL       GPIO_SetBits
;;;193    bsp_spiDelay(1);
0000ae  2001              MOVS     r0,#1
0000b0  f7fffffe          BL       bsp_spiDelay
;;;194    SPI_CLK_LOW();
0000b4  f44f5100          MOV      r1,#0x2000
0000b8  480a              LDR      r0,|L4.228|
0000ba  f7fffffe          BL       GPIO_ResetBits
;;;195    bsp_spiDelay(1);
0000be  2001              MOVS     r0,#1
0000c0  f7fffffe          BL       bsp_spiDelay
;;;196    dwTemp >>= 1;
0000c4  0876              LSRS     r6,r6,#1
0000c6  1c60              ADDS     r0,r4,#1              ;184
0000c8  b2c4              UXTB     r4,r0                 ;184
                  |L4.202|
0000ca  2c18              CMP      r4,#0x18              ;184
0000cc  dbdc              BLT      |L4.136|
;;;197    }
;;;198    SPI_CS_HIGH();	    //结束传输
0000ce  f44f5180          MOV      r1,#0x1000
0000d2  4804              LDR      r0,|L4.228|
0000d4  f7fffffe          BL       GPIO_SetBits
;;;199    bsp_spiDelay(2);
0000d8  2002              MOVS     r0,#2
0000da  f7fffffe          BL       bsp_spiDelay
;;;200    }
0000de  e8bd81f0          POP      {r4-r8,pc}
;;;201    void EMU_init(void)
                          ENDP

0000e2  0000              DCW      0x0000
                  |L4.228|
                          DCD      0x40010c00

                          AREA ||i.bsp_InitAtt7022euHard||, CODE, READONLY, ALIGN=2

                  bsp_InitAtt7022euHard PROC
;;;73     */
;;;74     void bsp_InitAtt7022euHard(void)
000000  b508              PUSH     {r3,lr}
;;;75     {		
;;;76       GPIO_InitTypeDef GPIO_InitStructure;
;;;77     
;;;78     	RCC_APB2PeriphClockCmd(RCC_ATT7022EU, ENABLE); 
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;79     	
;;;80     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;81     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;82     														   
;;;83     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_SPI_CS;	
000016  f44f5080          MOV      r0,#0x1000
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;84     	GPIO_Init(GPIO_PORT_SPI_CS, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4813              LDR      r0,|L5.112|
000022  f7fffffe          BL       GPIO_Init
;;;85       
;;;86       GPIO_InitStructure.GPIO_Pin = GPIO_PIN_SPI_DI;	
000026  f44f4000          MOV      r0,#0x8000
00002a  f8ad0000          STRH     r0,[sp,#0]
;;;87     	GPIO_Init(GPIO_PORT_SPI_DI, &GPIO_InitStructure);
00002e  4669              MOV      r1,sp
000030  480f              LDR      r0,|L5.112|
000032  f7fffffe          BL       GPIO_Init
;;;88       
;;;89       GPIO_InitStructure.GPIO_Pin = GPIO_PIN_SPI_DO;	
000036  f44f4080          MOV      r0,#0x4000
00003a  f8ad0000          STRH     r0,[sp,#0]
;;;90     	GPIO_Init(GPIO_PORT_SPI_DO, &GPIO_InitStructure);
00003e  4669              MOV      r1,sp
000040  480b              LDR      r0,|L5.112|
000042  f7fffffe          BL       GPIO_Init
;;;91       
;;;92       GPIO_InitStructure.GPIO_Pin = GPIO_PIN_SPI_CLK;	
000046  f44f5000          MOV      r0,#0x2000
00004a  f8ad0000          STRH     r0,[sp,#0]
;;;93     	GPIO_Init(GPIO_PORT_SPI_CLK, &GPIO_InitStructure);
00004e  4669              MOV      r1,sp
000050  4807              LDR      r0,|L5.112|
000052  f7fffffe          BL       GPIO_Init
;;;94     																   
;;;95     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_SPI_DO;
000056  f44f4080          MOV      r0,#0x4000
00005a  f8ad0000          STRH     r0,[sp,#0]
;;;96     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;	
00005e  2048              MOVS     r0,#0x48
000060  f88d0003          STRB     r0,[sp,#3]
;;;97     	GPIO_Init(GPIO_PORT_SPI_DO, &GPIO_InitStructure);
000064  4669              MOV      r1,sp
000066  4802              LDR      r0,|L5.112|
000068  f7fffffe          BL       GPIO_Init
;;;98     }
00006c  bd08              POP      {r3,pc}
;;;99     
                          ENDP

00006e  0000              DCW      0x0000
                  |L5.112|
                          DCD      0x40010c00

                          AREA ||i.bsp_ReadAtt7022||, CODE, READONLY, ALIGN=2

                  bsp_ReadAtt7022 PROC
;;;107    */
;;;108    uint32_t bsp_ReadAtt7022(uint8_t Address)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;109    {
000004  4607              MOV      r7,r0
;;;110    	uint8_t i, bTemp;
;;;111      uint32_t dwData;
;;;112    
;;;113      SPI_CS_HIGH();
000006  f44f5180          MOV      r1,#0x1000
00000a  482f              LDR      r0,|L6.200|
00000c  f7fffffe          BL       GPIO_SetBits
;;;114      SPI_CLK_LOW();
000010  f44f5100          MOV      r1,#0x2000
000014  482c              LDR      r0,|L6.200|
000016  f7fffffe          BL       GPIO_ResetBits
;;;115      SPI_CS_LOW();    // 开启SPI传输
00001a  f44f5180          MOV      r1,#0x1000
00001e  482a              LDR      r0,|L6.200|
000020  f7fffffe          BL       GPIO_ResetBits
;;;116      bTemp = 0x80;
000024  2680              MOVS     r6,#0x80
;;;117      for(i=0; i<8; i++)   //Write the Address
000026  2400              MOVS     r4,#0
000028  e020              B        |L6.108|
                  |L6.42|
;;;118      {
;;;119    		SPI_CLK_HIGH();		
00002a  f44f5100          MOV      r1,#0x2000
00002e  4826              LDR      r0,|L6.200|
000030  f7fffffe          BL       GPIO_SetBits
;;;120        if(Address & bTemp)
000034  ea070006          AND      r0,r7,r6
000038  b128              CBZ      r0,|L6.70|
;;;121    		{
;;;122    			SPI_DI_HIGH();
00003a  f44f4100          MOV      r1,#0x8000
00003e  4822              LDR      r0,|L6.200|
000040  f7fffffe          BL       GPIO_SetBits
000044  e004              B        |L6.80|
                  |L6.70|
;;;123    		}
;;;124        else
;;;125        SPI_DI_LOW();
000046  f44f4100          MOV      r1,#0x8000
00004a  481f              LDR      r0,|L6.200|
00004c  f7fffffe          BL       GPIO_ResetBits
                  |L6.80|
;;;126        bTemp >>= 1;
000050  1076              ASRS     r6,r6,#1
;;;127    		
;;;128    		bsp_spiDelay(1);
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       bsp_spiDelay
;;;129        SPI_CLK_LOW();
000058  f44f5100          MOV      r1,#0x2000
00005c  481a              LDR      r0,|L6.200|
00005e  f7fffffe          BL       GPIO_ResetBits
;;;130    		bsp_spiDelay(1);
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       bsp_spiDelay
000068  1c60              ADDS     r0,r4,#1              ;117
00006a  b2c4              UXTB     r4,r0                 ;117
                  |L6.108|
00006c  2c08              CMP      r4,#8                 ;117
00006e  dbdc              BLT      |L6.42|
;;;131      }
;;;132      bsp_spiDelay(3);
000070  2003              MOVS     r0,#3
000072  f7fffffe          BL       bsp_spiDelay
;;;133    
;;;134      dwData = 0x00000000;//Read 24bit
000076  2500              MOVS     r5,#0
;;;135      for(i=0; i<24; i++)
000078  2400              MOVS     r4,#0
00007a  e017              B        |L6.172|
                  |L6.124|
;;;136      {
;;;137    		dwData <<= 1;
00007c  006d              LSLS     r5,r5,#1
;;;138        SPI_CLK_HIGH();
00007e  f44f5100          MOV      r1,#0x2000
000082  4811              LDR      r0,|L6.200|
000084  f7fffffe          BL       GPIO_SetBits
;;;139        // Delay_us(3);
;;;140        if (RDSPIData)
000088  f44f4180          MOV      r1,#0x4000
00008c  480e              LDR      r0,|L6.200|
00008e  f7fffffe          BL       GPIO_ReadInputDataBit
000092  b108              CBZ      r0,|L6.152|
;;;141        {
;;;142    			dwData |= 1;
000094  f0450501          ORR      r5,r5,#1
                  |L6.152|
;;;143        }
;;;144        else
;;;145                            ;
;;;146    		//	Delay_us(1);
;;;147        SPI_CLK_LOW();
000098  f44f5100          MOV      r1,#0x2000
00009c  480a              LDR      r0,|L6.200|
00009e  f7fffffe          BL       GPIO_ResetBits
;;;148    		bsp_spiDelay(1);
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       bsp_spiDelay
0000a8  1c60              ADDS     r0,r4,#1              ;135
0000aa  b2c4              UXTB     r4,r0                 ;135
                  |L6.172|
0000ac  2c18              CMP      r4,#0x18              ;135
0000ae  dbe5              BLT      |L6.124|
;;;149            }
;;;150            SPI_CS_HIGH();	  //关闭SPI传输
0000b0  f44f5180          MOV      r1,#0x1000
0000b4  4804              LDR      r0,|L6.200|
0000b6  f7fffffe          BL       GPIO_SetBits
;;;151            bsp_spiDelay(2);
0000ba  2002              MOVS     r0,#2
0000bc  f7fffffe          BL       bsp_spiDelay
;;;152            return dwData;
0000c0  4628              MOV      r0,r5
;;;153    }
0000c2  e8bd81f0          POP      {r4-r8,pc}
;;;154    /**************************Wr_Dat******************************/
                          ENDP

0000c6  0000              DCW      0x0000
                  |L6.200|
                          DCD      0x40010c00

                          AREA ||i.bsp_spiDelay||, CODE, READONLY, ALIGN=1

                  bsp_spiDelay PROC
;;;58     */
;;;59     void bsp_spiDelay(uint16_t _ucData)
000000  2100              MOVS     r1,#0
;;;60     {
;;;61     	uint32_t i;
;;;62     
;;;63     	for (i = 0; i < 2*_ucData; i++);
000002  e000              B        |L7.6|
                  |L7.4|
000004  1c49              ADDS     r1,r1,#1
                  |L7.6|
000006  0042              LSLS     r2,r0,#1
000008  428a              CMP      r2,r1
00000a  d8fb              BHI      |L7.4|
;;;64     }
00000c  4770              BX       lr
;;;65     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  CurrentElectric
                          DCD      0x00000000
                  Device_ID
                          DCD      0x00000000
                  VoltageA
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  CurrentA
00000c  00000000          DCFS     0x00000000 ; 0
                  TempA
000010  00000000          DCFS     0x00000000 ; 0
                  Up_VolA
                          DCD      0x00000000
                  Up_CurrentA
                          DCD      0x00000000
                  Up_PA_Q
                          DCD      0x00000000
                  Up_PA_Power
                          DCD      0x00000000
                  Up_QA_Power
                          DCD      0x00000000
                  VoltageB
000028  00000000          DCB      0x00,0x00,0x00,0x00
                  CurrentB
00002c  00000000          DCFS     0x00000000 ; 0
                  TempB
000030  00000000          DCFS     0x00000000 ; 0
                  Up_VolB
                          DCD      0x00000000
                  Up_CurrentB
                          DCD      0x00000000
                  Up_PB_Q
                          DCD      0x00000000
                  Up_PB_Power
                          DCD      0x00000000
                  Up_QB_Power
                          DCD      0x00000000
                  VoltageC
000048  00000000          DCB      0x00,0x00,0x00,0x00
                  CurrentC
00004c  00000000          DCFS     0x00000000 ; 0
                  TempC
000050  00000000          DCFS     0x00000000 ; 0
                  Up_VolC
                          DCD      0x00000000
                  Up_CurrentC
                          DCD      0x00000000
                  Up_PC_Q
                          DCD      0x00000000
                  Up_PC_Power
                          DCD      0x00000000
                  Up_QC_Power
                          DCD      0x00000000
                  Huganqibeilv
000068  0001              DCW      0x0001
00006a  0000              DCB      0x00,0x00
                  EST_Q
                          DCD      0x00000000
                  EST_Q_buff
                          DCD      0x00000000
                  SetGainData
000074  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_att7022eu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_att7022eu_c_b8bf411d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_att7022eu_c_b8bf411d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_att7022eu_c_b8bf411d____REVSH|
#line 128
|__asm___15_bsp_att7022eu_c_b8bf411d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
