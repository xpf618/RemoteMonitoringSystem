; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\app.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\app.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\进行时\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\app.crf ..\..\User\app.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;301    */
;;;302    static  void  AppObjCreate (void)
000000  b508              PUSH     {r3,lr}
;;;303    {
;;;304    	OS_ERR      err;
;;;305    	
;;;306    	/* 
;;;307    	   创建信号量数值为1的时候可以实现互斥功能，也就是只有一个资源可以使用 
;;;308    	   本例程是将串口1的打印函数作为保护的资源。防止串口打印的时候被其它任务抢占
;;;309    	   造成串口打印错乱。
;;;310    	*/
;;;311    	OSSemCreate((OS_SEM    *)&SEM_MUTEX,
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  a102              ADR      r1,|L1.16|
000008  4804              LDR      r0,|L1.28|
00000a  f7fffffe          BL       OSSemCreate
;;;312    				(CPU_CHAR  *)"SEM_MUTEX",
;;;313    				(OS_SEM_CTR )1,
;;;314    				(OS_ERR    *)&err);
;;;315    }
00000e  bd08              POP      {r3,pc}
;;;316    
                          ENDP

                  |L1.16|
000010  53454d5f          DCB      "SEM_MUTEX",0
000014  4d555445
000018  5800    
00001a  00                DCB      0
00001b  00                DCB      0
                  |L1.28|
                          DCD      SEM_MUTEX

                          AREA ||i.AppTaskCOM||, CODE, READONLY, ALIGN=1

                  AppTaskCOM PROC
;;;172    */
;;;173    static void AppTaskCOM(void *p_arg)
000000  b508              PUSH     {r3,lr}
;;;174    {	
;;;175    	OS_ERR      	err;
;;;176    	(void)p_arg;
;;;177    	 
;;;178    	while(1)
000002  e008              B        |L2.22|
                  |L2.4|
;;;179    	{
;;;180    	  bsp_LedToggle(1);
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       bsp_LedToggle
;;;181    	  OSTimeDly(500, OS_OPT_TIME_DLY, &err);
00000a  466a              MOV      r2,sp
00000c  2100              MOVS     r1,#0
00000e  f44f70fa          MOV      r0,#0x1f4
000012  f7fffffe          BL       OSTimeDly
                  |L2.22|
000016  e7f5              B        |L2.4|
;;;182    	} 						  	 	       											   
;;;183    }
;;;184    
                          ENDP


                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;242    */
;;;243    static  void  AppTaskCreate (void)
000000  b500              PUSH     {lr}
;;;244    {
000002  b08b              SUB      sp,sp,#0x2c
;;;245    	OS_ERR      err;
;;;246    	
;;;247    	/**************创建MsgPro任务*********************/
;;;248    	OSTaskCreate((OS_TCB       *)&AppTaskMsgProTCB,             
000004  a80a              ADD      r0,sp,#0x28
000006  2103              MOVS     r1,#3
000008  2200              MOVS     r2,#0
00000a  9205              STR      r2,[sp,#0x14]
00000c  e9cd2106          STRD     r2,r1,[sp,#0x18]
000010  9008              STR      r0,[sp,#0x20]
000012  2005              MOVS     r0,#5
000014  f44f7180          MOV      r1,#0x100
000018  2219              MOVS     r2,#0x19
00001a  4b1f              LDR      r3,|L3.152|
00001c  e9cd3201          STRD     r3,r2,[sp,#4]
000020  e9cd1003          STRD     r1,r0,[sp,#0xc]
000024  2003              MOVS     r0,#3
000026  2300              MOVS     r3,#0
000028  4a1c              LDR      r2,|L3.156|
00002a  a11d              ADR      r1,|L3.160|
00002c  9000              STR      r0,[sp,#0]
00002e  481f              LDR      r0,|L3.172|
000030  f7fffffe          BL       OSTaskCreate
;;;249                     (CPU_CHAR     *)"App Msp Pro",
;;;250                     (OS_TASK_PTR   )AppTaskMsgPro, 
;;;251                     (void         *)0,
;;;252                     (OS_PRIO       )APP_CFG_TASK_MsgPro_PRIO,
;;;253                     (CPU_STK      *)&AppTaskMsgProStk[0],
;;;254                     (CPU_STK_SIZE  )APP_CFG_TASK_MsgPro_STK_SIZE / 10,
;;;255                     (CPU_STK_SIZE  )APP_CFG_TASK_MsgPro_STK_SIZE,
;;;256                     (OS_MSG_QTY    )5,
;;;257                     (OS_TICK       )0,
;;;258                     (void         *)0,
;;;259                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;260                     (OS_ERR       *)&err);
;;;261    
;;;262    	/**************创建COM任务*********************/
;;;263    	OSTaskCreate((OS_TCB       *)&AppTaskCOMTCB,            
000034  a80a              ADD      r0,sp,#0x28
000036  2103              MOVS     r1,#3
000038  2200              MOVS     r2,#0
00003a  9205              STR      r2,[sp,#0x14]
00003c  e9cd2106          STRD     r2,r1,[sp,#0x18]
000040  9008              STR      r0,[sp,#0x20]
000042  4610              MOV      r0,r2
000044  f44f7180          MOV      r1,#0x100
000048  2219              MOVS     r2,#0x19
00004a  4b19              LDR      r3,|L3.176|
00004c  e9cd3201          STRD     r3,r2,[sp,#4]
000050  e9cd1003          STRD     r1,r0,[sp,#0xc]
000054  2004              MOVS     r0,#4
000056  2300              MOVS     r3,#0
000058  4a16              LDR      r2,|L3.180|
00005a  a117              ADR      r1,|L3.184|
00005c  9000              STR      r0,[sp,#0]
00005e  481a              LDR      r0,|L3.200|
000060  f7fffffe          BL       OSTaskCreate
;;;264                     (CPU_CHAR     *)"App Task COM",
;;;265                     (OS_TASK_PTR   )AppTaskCOM, 
;;;266                     (void         *)0,
;;;267                     (OS_PRIO       )APP_CFG_TASK_COM_PRIO,
;;;268                     (CPU_STK      *)&AppTaskCOMStk[0],
;;;269                     (CPU_STK_SIZE  )APP_CFG_TASK_COM_STK_SIZE / 10,
;;;270                     (CPU_STK_SIZE  )APP_CFG_TASK_COM_STK_SIZE,
;;;271                     (OS_MSG_QTY    )0,
;;;272                     (OS_TICK       )0,
;;;273                     (void         *)0,
;;;274                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;275                     (OS_ERR       *)&err);
;;;276    	
;;;277    	/**************创建USER IF任务*********************/
;;;278    	OSTaskCreate((OS_TCB       *)&AppTaskUserIFTCB,             
000064  a80a              ADD      r0,sp,#0x28
000066  2103              MOVS     r1,#3
000068  2200              MOVS     r2,#0
00006a  9205              STR      r2,[sp,#0x14]
00006c  e9cd2106          STRD     r2,r1,[sp,#0x18]
000070  9008              STR      r0,[sp,#0x20]
000072  4610              MOV      r0,r2
000074  f44f7180          MOV      r1,#0x100
000078  2219              MOVS     r2,#0x19
00007a  4b14              LDR      r3,|L3.204|
00007c  e9cd3201          STRD     r3,r2,[sp,#4]
000080  e9cd1003          STRD     r1,r0,[sp,#0xc]
000084  2005              MOVS     r0,#5
000086  2300              MOVS     r3,#0
000088  4a11              LDR      r2,|L3.208|
00008a  a112              ADR      r1,|L3.212|
00008c  9000              STR      r0,[sp,#0]
00008e  4815              LDR      r0,|L3.228|
000090  f7fffffe          BL       OSTaskCreate
;;;279                     (CPU_CHAR     *)"App Task UserIF",
;;;280                     (OS_TASK_PTR   )AppTaskUserIF, 
;;;281                     (void         *)0,
;;;282                     (OS_PRIO       )APP_CFG_TASK_USER_IF_PRIO,
;;;283                     (CPU_STK      *)&AppTaskUserIFStk[0],
;;;284                     (CPU_STK_SIZE  )APP_CFG_TASK_USER_IF_STK_SIZE / 10,
;;;285                     (CPU_STK_SIZE  )APP_CFG_TASK_USER_IF_STK_SIZE,
;;;286                     (OS_MSG_QTY    )0,
;;;287                     (OS_TICK       )0,
;;;288                     (void         *)0,
;;;289                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;290                     (OS_ERR       *)&err);
;;;291    		 
;;;292    }
000094  b00b              ADD      sp,sp,#0x2c
000096  bd00              POP      {pc}
;;;293    
                          ENDP

                  |L3.152|
                          DCD      AppTaskMsgProStk
                  |L3.156|
                          DCD      AppTaskMsgPro
                  |L3.160|
0000a0  41707020          DCB      "App Msp Pro",0
0000a4  4d737020
0000a8  50726f00
                  |L3.172|
                          DCD      AppTaskMsgProTCB
                  |L3.176|
                          DCD      AppTaskCOMStk
                  |L3.180|
                          DCD      AppTaskCOM
                  |L3.184|
0000b8  41707020          DCB      "App Task COM",0
0000bc  5461736b
0000c0  20434f4d
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L3.200|
                          DCD      AppTaskCOMTCB
                  |L3.204|
                          DCD      AppTaskUserIFStk
                  |L3.208|
                          DCD      AppTaskUserIF
                  |L3.212|
0000d4  41707020          DCB      "App Task UserIF",0
0000d8  5461736b
0000dc  20557365
0000e0  72494600
                  |L3.228|
                          DCD      AppTaskUserIFTCB

                          AREA ||i.AppTaskMsgPro||, CODE, READONLY, ALIGN=2

                  AppTaskMsgPro PROC
;;;132    */
;;;133    static void AppTaskMsgPro(void *p_arg)
000000  b51f              PUSH     {r0-r4,lr}
;;;134    {
;;;135    	OS_ERR       err;
;;;136    	CPU_TS	     ts;
;;;137    	OS_MSG_SIZE	 msg_size;
;;;138    	void		*p_msg;
;;;139    	uint8_t		 *ucReceive, i;
;;;140    
;;;141    	(void)p_arg;
;;;142    		  
;;;143    	while(1)
000002  e01b              B        |L4.60|
                  |L4.4|
;;;144    	{	
;;;145    		/* 接受数据 */
;;;146    		p_msg = OSTaskQPend(0,
000004  a803              ADD      r0,sp,#0xc
000006  ab02              ADD      r3,sp,#8
000008  aa01              ADD      r2,sp,#4
00000a  2100              MOVS     r1,#0
00000c  9000              STR      r0,[sp,#0]
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       OSTaskQPend
000014  4604              MOV      r4,r0
;;;147    							OS_OPT_PEND_BLOCKING,
;;;148    							&msg_size,
;;;149    							&ts,
;;;150    							&err);
;;;151    		
;;;152    		if(err == OS_ERR_NONE)
000016  f8bd000c          LDRH     r0,[sp,#0xc]
00001a  b978              CBNZ     r0,|L4.60|
;;;153    		{
;;;154    			ucReceive = (uint8_t *)p_msg;
00001c  4625              MOV      r5,r4
;;;155    			/* 将接受到数据打印出来 */
;;;156    			for(i = 0; i < msg_size; i++)
00001e  2600              MOVS     r6,#0
000020  e008              B        |L4.52|
                  |L4.34|
;;;157    			{
;;;158    				App_Printf("ucReceive = %d msg_size = %d\r\n", *ucReceive++, msg_size);
000022  f8151b01          LDRB     r1,[r5],#1
000026  f8bd2004          LDRH     r2,[sp,#4]
00002a  a005              ADR      r0,|L4.64|
00002c  f7fffffe          BL       App_Printf
000030  1c70              ADDS     r0,r6,#1              ;156
000032  b2c6              UXTB     r6,r0                 ;156
                  |L4.52|
000034  f8bd0004          LDRH     r0,[sp,#4]            ;156
000038  4286              CMP      r6,r0                 ;156
00003a  dbf2              BLT      |L4.34|
                  |L4.60|
00003c  e7e2              B        |L4.4|
;;;159    			}
;;;160    		}								  	 	       											  
;;;161    	}   
;;;162    }
;;;163    
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
000040  75635265          DCB      "ucReceive = %d msg_size = %d\r\n",0
000044  63656976
000048  65203d20
00004c  2564206d
000050  73675f73
000054  697a6520
000058  3d202564
00005c  0d0a00  
00005f  00                DCB      0

                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=1

                  AppTaskStart PROC
;;;91     */
;;;92     static  void  AppTaskStart (void *p_arg)
000000  b508              PUSH     {r3,lr}
;;;93     {
;;;94     	OS_ERR      err;
;;;95     
;;;96        (void)p_arg;
;;;97     	
;;;98     	CPU_Init();
000002  f7fffffe          BL       CPU_Init
;;;99      	bsp_Init();
000006  f7fffffe          BL       bsp_Init
;;;100    	BSP_Tick_Init();
00000a  f7fffffe          BL       BSP_Tick_Init
;;;101    	
;;;102    #if OS_CFG_STAT_TASK_EN > 0u
;;;103         OSStatTaskCPUUsageInit(&err);   
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       OSStatTaskCPUUsageInit
;;;104    #endif
;;;105    
;;;106    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;107        CPU_IntDisMeasMaxCurReset();
000014  f7fffffe          BL       CPU_IntDisMeasMaxCurReset
;;;108    #endif
;;;109        
;;;110    	/* 创建任务 */
;;;111        AppTaskCreate();
000018  f7fffffe          BL       AppTaskCreate
;;;112    
;;;113    	/* 创建任务通信组件 */
;;;114    	AppObjCreate();
00001c  f7fffffe          BL       AppObjCreate
;;;115    	
;;;116    	
;;;117        while (1)
000020  e006              B        |L5.48|
                  |L5.34|
;;;118    	{  
;;;119    		bsp_KeyScan();
000022  f7fffffe          BL       bsp_KeyScan
;;;120    		OSTimeDly(10, OS_OPT_TIME_DLY, &err);
000026  466a              MOV      r2,sp
000028  2100              MOVS     r1,#0
00002a  200a              MOVS     r0,#0xa
00002c  f7fffffe          BL       OSTimeDly
                  |L5.48|
000030  e7f7              B        |L5.34|
;;;121        }
;;;122    }
;;;123    
                          ENDP


                          AREA ||i.AppTaskUserIF||, CODE, READONLY, ALIGN=1

                  AppTaskUserIF PROC
;;;193    */
;;;194    static void AppTaskUserIF(void *p_arg)
000000  b508              PUSH     {r3,lr}
;;;195    {
;;;196    	OS_ERR      err;
;;;197    	uint8_t  ucKeyCode;
;;;198    	uint8_t  ucMsg[4], ucTemp = 0;
000002  bf00              NOP      
;;;199    	
;;;200    	(void)p_arg;	              /* 避免编译器报警 */
;;;201      
;;;202    	while (1) 
000004  e004              B        |L6.16|
                  |L6.6|
;;;203    	{   		
;;;204    //		ucKeyCode = bsp_GetKey();
;;;205    //		
;;;206    //		if (ucKeyCode != KEY_NONE)
;;;207    //		{
;;;208    //			switch (ucKeyCode)
;;;209    //			{
;;;210    //				case KEY_DOWN_K1:			  /* K1键按下 打印任务执行情况 */
;;;211    //					DispTaskInfo();	     
;;;212    //					break;
;;;213    
;;;214    //				case KEY_DOWN_K2:			 /* K2键按下 通过函数OSTaskQPost，给任务AppTaskMsgPro发数据 */
;;;215    //					ucMsg[0] = ucTemp++;
;;;216    //				  ucMsg[1] = ucTemp++;
;;;217    //					ucMsg[2] = ucTemp++;
;;;218    //					ucMsg[3] = ucTemp++;
;;;219    //					OSTaskQPost(&AppTaskMsgProTCB,
;;;220    //								(void *)ucMsg,
;;;221    //								 sizeof(ucMsg),
;;;222    //								 OS_OPT_POST_FIFO,
;;;223    //								 &err);
;;;224    //					break;
;;;225    //				
;;;226    //				default:                    /* 其他的键值不处理 */
;;;227    //					break;
;;;228    //			}
;;;229    //		}
;;;230    		
;;;231    		OSTimeDly(20, OS_OPT_TIME_DLY, &err);
000006  466a              MOV      r2,sp
000008  2100              MOVS     r1,#0
00000a  2014              MOVS     r0,#0x14
00000c  f7fffffe          BL       OSTimeDly
                  |L6.16|
000010  e7f9              B        |L6.6|
;;;232    	}
;;;233    }
;;;234    
                          ENDP


                          AREA ||i.App_Printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  App_Printf PROC
;;;325    */
;;;326    void  App_Printf(CPU_CHAR *format, ...)
000000  b40f              PUSH     {r0-r3}
;;;327    {
000002  b500              PUSH     {lr}
000004  b099              SUB      sp,sp,#0x64
;;;328        CPU_CHAR  buf_str[80 + 1];
;;;329        va_list   v_args;
;;;330        OS_ERR    os_err;
;;;331    
;;;332    
;;;333        va_start(v_args, format);
000006  a81b              ADD      r0,sp,#0x6c
000008  9003              STR      r0,[sp,#0xc]
;;;334       (void)vsnprintf((char       *)&buf_str[0],
00000a  2151              MOVS     r1,#0x51
00000c  a804              ADD      r0,sp,#0x10
00000e  9b03              LDR      r3,[sp,#0xc]
000010  9a1a              LDR      r2,[sp,#0x68]
000012  f7fffffe          BL       __c89vsnprintf
;;;335                       (size_t      ) sizeof(buf_str),
;;;336                       (char const *) format,
;;;337                                      v_args);
;;;338        va_end(v_args);
000016  2000              MOVS     r0,#0
000018  9003              STR      r0,[sp,#0xc]
;;;339    
;;;340    	/* 互斥操作 */
;;;341        OSSemPend((OS_SEM  *)&SEM_MUTEX,
00001a  a802              ADD      r0,sp,#8
00001c  2300              MOVS     r3,#0
00001e  461a              MOV      r2,r3
000020  4619              MOV      r1,r3
000022  9000              STR      r0,[sp,#0]
000024  4807              LDR      r0,|L7.68|
000026  f7fffffe          BL       OSSemPend
;;;342                  (OS_TICK  )0u,
;;;343                  (OS_OPT   )OS_OPT_PEND_BLOCKING,
;;;344                  (CPU_TS  *)0,
;;;345                  (OS_ERR  *)&os_err);
;;;346    
;;;347        printf("%s", buf_str);
00002a  a904              ADD      r1,sp,#0x10
00002c  a006              ADR      r0,|L7.72|
00002e  f7fffffe          BL       __2printf
;;;348    
;;;349       (void)OSSemPost((OS_SEM  *)&SEM_MUTEX,
000032  aa02              ADD      r2,sp,#8
000034  2100              MOVS     r1,#0
000036  4803              LDR      r0,|L7.68|
000038  f7fffffe          BL       OSSemPost
;;;350                       (OS_OPT   )OS_OPT_POST_1,
;;;351                       (OS_ERR  *)&os_err);
;;;352    
;;;353    }
00003c  b019              ADD      sp,sp,#0x64
00003e  f85dfb14          LDR      pc,[sp],#0x14
;;;354    
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      SEM_MUTEX
                  |L7.72|
000048  257300            DCB      "%s",0
00004b  00                DCB      0

                          AREA ||i.DispTaskInfo||, CODE, READONLY, ALIGN=2

                  DispTaskInfo PROC
;;;362    */
;;;363    static void DispTaskInfo(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;364    {
000004  b085              SUB      sp,sp,#0x14
;;;365    	OS_TCB      *p_tcb;	        /* 定义一个任务控制块指针, TCB = TASK CONTROL BLOCK */
;;;366    	float CPU = 0.0f;
000006  2500              MOVS     r5,#0
;;;367    	CPU_SR_ALLOC();
000008  2600              MOVS     r6,#0
;;;368    
;;;369    	CPU_CRITICAL_ENTER();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SR_Save
000012  4606              MOV      r6,r0
000014  bf00              NOP      
000016  f7fffffe          BL       CPU_IntDisMeasStart
00001a  bf00              NOP      
;;;370        p_tcb = OSTaskDbgListPtr;
00001c  4828              LDR      r0,|L8.192|
00001e  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;371        CPU_CRITICAL_EXIT();
000020  bf00              NOP      
000022  f7fffffe          BL       CPU_IntDisMeasStop
000026  bf00              NOP      
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       CPU_SR_Restore
00002e  bf00              NOP      
000030  bf00              NOP      
;;;372    	
;;;373    	/* 打印标题 */
;;;374    	App_Printf("===============================================================\r\n");
000032  4824              LDR      r0,|L8.196|
000034  f7fffffe          BL       App_Printf
;;;375    	App_Printf(" 优先级 使用栈 剩余栈 百分比 利用率   任务名\r\n");
000038  a023              ADR      r0,|L8.200|
00003a  f7fffffe          BL       App_Printf
;;;376    	App_Printf("  Prio   Used  Free   Per    CPU     Taskname\r\n");
00003e  a02e              ADR      r0,|L8.248|
000040  f7fffffe          BL       App_Printf
;;;377    
;;;378    	/* 遍历任务控制块列表(TCB list)，打印所有的任务的优先级和名称 */
;;;379    	while (p_tcb != (OS_TCB *)0) 
000044  e037              B        |L8.182|
                  |L8.70|
;;;380    	{
;;;381    		CPU = (float)p_tcb->CPUUsage / 100;
000046  f8340f88          LDRH     r0,[r4,#0x88]!
00004a  f7fffffe          BL       __aeabi_ui2f
00004e  4607              MOV      r7,r0
000050  4935              LDR      r1,|L8.296|
000052  f7fffffe          BL       __aeabi_fdiv
000056  4605              MOV      r5,r0
;;;382    		App_Printf("   %2d  %5d  %5d   %02d%%   %5.2f%%   %s\r\n", 
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       __aeabi_f2d
00005e  4607              MOV      r7,r0
000060  4688              MOV      r8,r1
000062  e9d40108          LDRD     r0,r1,[r4,#0x20]
000066  4401              ADD      r1,r1,r0
000068  2264              MOVS     r2,#0x64
00006a  4350              MULS     r0,r2,r0
00006c  fbb0f9f1          UDIV     r9,r0,r1
000070  f8540c80          LDR      r0,[r4,#-0x80]
000074  f8cd9000          STR      r9,[sp,#0]
000078  e9cd7802          STRD     r7,r8,[sp,#8]
00007c  9004              STR      r0,[sp,#0x10]
00007e  f8141c51          LDRB     r1,[r4,#-0x51]
000082  e9d42308          LDRD     r2,r3,[r4,#0x20]
000086  3c88              SUBS     r4,r4,#0x88
000088  a028              ADR      r0,|L8.300|
00008a  f7fffffe          BL       App_Printf
;;;383    		p_tcb->Prio, 
;;;384    		p_tcb->StkUsed, 
;;;385    		p_tcb->StkFree, 
;;;386    		(p_tcb->StkUsed * 100) / (p_tcb->StkUsed + p_tcb->StkFree),
;;;387    		CPU,
;;;388    		p_tcb->NamePtr);		
;;;389    	 	
;;;390    		CPU_CRITICAL_ENTER();
00008e  bf00              NOP      
000090  bf00              NOP      
000092  f7fffffe          BL       CPU_SR_Save
000096  4606              MOV      r6,r0
000098  bf00              NOP      
00009a  f7fffffe          BL       CPU_IntDisMeasStart
00009e  bf00              NOP      
;;;391            p_tcb = p_tcb->DbgNextPtr;
0000a0  f8d440b8          LDR      r4,[r4,#0xb8]
;;;392            CPU_CRITICAL_EXIT();
0000a4  bf00              NOP      
0000a6  f7fffffe          BL       CPU_IntDisMeasStop
0000aa  bf00              NOP      
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       CPU_SR_Restore
0000b2  bf00              NOP      
0000b4  bf00              NOP      
                  |L8.182|
0000b6  2c00              CMP      r4,#0                 ;379
0000b8  d1c5              BNE      |L8.70|
;;;393    	}
;;;394    }
0000ba  b005              ADD      sp,sp,#0x14
0000bc  e8bd83f0          POP      {r4-r9,pc}
;;;395    
                          ENDP

                  |L8.192|
                          DCD      OSTaskDbgListPtr
                  |L8.196|
                          DCD      ||.conststring||
                  |L8.200|
0000c8  20d3c5cf          DCB      " ",211,197,207,200,188,182," ",202,185,211,195,213,187," "
0000cc  c8bcb620
0000d0  cab9d3c3
0000d4  d5bb20  
0000d7  caa3d3e0          DCB      202,163,211,224,213,187," ",176,217,183,214,177,200," ",192
0000db  d5bb20b0
0000df  d9b7d6b1
0000e3  c820c0  
0000e6  fbd3c3c2          DCB      251,211,195,194,202,"   ",200,206,206,241,195,251,"\r\n",0
0000ea  ca202020
0000ee  c8cecef1
0000f2  c3fb0d0a
0000f6  00      
0000f7  00                DCB      0
                  |L8.248|
0000f8  20205072          DCB      "  Prio   Used  Free   Per    CPU     Taskname\r\n",0
0000fc  696f2020
000100  20557365
000104  64202046
000108  72656520
00010c  20205065
000110  72202020
000114  20435055
000118  20202020
00011c  20546173
000120  6b6e616d
000124  650d0a00
                  |L8.296|
                          DCD      0x42c80000
                  |L8.300|
00012c  20202025          DCB      "   %2d  %5d  %5d   %02d%%   %5.2f%%   %s\r\n",0
000130  32642020
000134  25356420
000138  20253564
00013c  20202025
000140  30326425
000144  25202020
000148  25352e32
00014c  66252520
000150  20202573
000154  0d0a00  
000157  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;46     */
;;;47     int main(void)
000000  b500              PUSH     {lr}
;;;48     {
000002  b08b              SUB      sp,sp,#0x2c
;;;49         OS_ERR  err;  
;;;50     	
;;;51     	/* 初始化uC/OS-III 内核 */
;;;52         OSInit(&err);  
000004  a80a              ADD      r0,sp,#0x28
000006  f7fffffe          BL       OSInit
;;;53     
;;;54     	/* 创建一个启动任务（也就是主任务）。启动任务会创建所有的应用程序任务 */
;;;55     	OSTaskCreate((OS_TCB       *)&AppTaskStartTCB,  /* 任务控制块地址 */           
00000a  a80a              ADD      r0,sp,#0x28
00000c  2103              MOVS     r1,#3
00000e  2200              MOVS     r2,#0
000010  9205              STR      r2,[sp,#0x14]
000012  e9cd2106          STRD     r2,r1,[sp,#0x18]
000016  9008              STR      r0,[sp,#0x20]
000018  4610              MOV      r0,r2
00001a  f44f7180          MOV      r1,#0x100
00001e  2219              MOVS     r2,#0x19
000020  4b09              LDR      r3,|L9.72|
000022  e9cd3201          STRD     r3,r2,[sp,#4]
000026  e9cd1003          STRD     r1,r0,[sp,#0xc]
00002a  2002              MOVS     r0,#2
00002c  2300              MOVS     r3,#0
00002e  4a07              LDR      r2,|L9.76|
000030  a107              ADR      r1,|L9.80|
000032  9000              STR      r0,[sp,#0]
000034  480a              LDR      r0,|L9.96|
000036  f7fffffe          BL       OSTaskCreate
;;;56                      (CPU_CHAR     *)"App Task Start",  /* 任务名 */
;;;57                      (OS_TASK_PTR   )AppTaskStart,      /* 启动任务函数地址 */
;;;58                      (void         *)0,                 /* 传递给任务的参数 */
;;;59                      (OS_PRIO       )APP_CFG_TASK_START_PRIO, /* 任务优先级 */
;;;60                      (CPU_STK      *)&AppTaskStartStk[0],     /* 堆栈基地址 */
;;;61                      (CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE / 10, /* 堆栈监测区，这里表示后10%作为监测区 */
;;;62                      (CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,  /* 堆栈空间大小 */
;;;63                      (OS_MSG_QTY    )0,  /* 本任务支持接受的最大消息数 */
;;;64                      (OS_TICK       )0,  /* 设置时间片 */
;;;65                      (void         *)0,  /* 堆栈空间大小 */  
;;;66                      (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;67     		
;;;68     				 /*  定义如下：
;;;69     					OS_TASK_OPT_STK_CHK      使能检测任务栈，统计任务栈已用的和未用的
;;;70     					OS_TASK_OPT_STK_CLR      在创建任务时，清零任务栈
;;;71     					OS_TASK_OPT_SAVE_FP      如果CPU有浮点寄存器，则在任务切换时保存浮点寄存器的内容
;;;72     				 */  
;;;73                      (OS_ERR       *)&err);
;;;74     
;;;75     	/* 启动多任务系统，控制权交给uC/OS-III */
;;;76         OSStart(&err);                                               
00003a  a80a              ADD      r0,sp,#0x28
00003c  f7fffffe          BL       OSStart
;;;77         
;;;78         (void)&err;
;;;79         
;;;80         return (0);
000040  2000              MOVS     r0,#0
;;;81     }
000042  b00b              ADD      sp,sp,#0x2c
000044  bd00              POP      {pc}
;;;82     
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      AppTaskStartStk
                  |L9.76|
                          DCD      AppTaskStart
                  |L9.80|
000050  41707020          DCB      "App Task Start",0
000054  5461736b
000058  20537461
00005c  727400  
00005f  00                DCB      0
                  |L9.96|
                          DCD      AppTaskStartTCB

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  AppTaskStartTCB
                          %        192
                  AppTaskStartStk
                          %        1024
                  AppTaskMsgProTCB
                          %        192
                  AppTaskMsgProStk
                          %        1024
                  AppTaskCOMTCB
                          %        192
                  AppTaskCOMStk
                          %        1024
                  AppTaskUserIFTCB
                          %        192
                  AppTaskUserIFStk
                          %        1024
                  SEM_MUTEX
                          %        40

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  3d3d3d3d          DCB      "======================================================="
000004  3d3d3d3d
000008  3d3d3d3d
00000c  3d3d3d3d
000010  3d3d3d3d
000014  3d3d3d3d
000018  3d3d3d3d
00001c  3d3d3d3d
000020  3d3d3d3d
000024  3d3d3d3d
000028  3d3d3d3d
00002c  3d3d3d3d
000030  3d3d3d3d
000034  3d3d3d  
000037  3d3d3d3d          DCB      "========\r\n",0
00003b  3d3d3d3d
00003f  0d0a00  

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_app_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_app_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_app_c_main____REVSH|
#line 128
|__asm___5_app_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
