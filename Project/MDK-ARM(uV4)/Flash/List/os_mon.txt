; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_mon.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_mon.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M3\RealView -IH:\ฝ๘ะะสฑ\CS_System_Program\Project\MDK-ARM(uV4)\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=521 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\os_mon.crf ..\..\uCOS-III\uCOS-III\Source\os_mon.c]
                          THUMB

                          AREA ||i.OSMonCreate||, CODE, READONLY, ALIGN=2

                  OSMonCreate PROC
;;;73     
;;;74     void  OSMonCreate (OS_MON   *p_mon,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;75                        CPU_CHAR *p_name,
;;;76                        void     *p_mon_data,
;;;77                        OS_ERR   *p_err)
;;;78     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;79         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;80     
;;;81     
;;;82     #ifdef OS_SAFETY_CRITICAL
;;;83         if (p_err == DEF_NULL) {
;;;84             OS_SAFETY_CRITICAL_EXCEPTION();
;;;85             return;
;;;86         }
;;;87     #endif
;;;88     
;;;89     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;90         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;91            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;92             return;
;;;93         }
;;;94     #endif
;;;95     
;;;96     #if (OS_CFG_CALLED_FROM_ISR_CHK_EN == DEF_ENABLED)
;;;97         if (OSIntNestingCtr > 0u) {                                 /* Not allowed to be called from an ISR                 */
000010  4819              LDR      r0,|L1.120|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  b120              CBZ      r0,|L1.32|
;;;98            *p_err = OS_ERR_CREATE_ISR;
000016  f64260e1          MOV      r0,#0x2ee1
00001a  8028              STRH     r0,[r5,#0]
                  |L1.28|
;;;99             return;
;;;100        }
;;;101    #endif
;;;102    
;;;103    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;104        if (p_mon == DEF_NULL) {                                    /* Validate 'p_mon'                                     */
;;;105           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;106            return;
;;;107        }
;;;108    #endif
;;;109    
;;;110        CPU_CRITICAL_ENTER();
;;;111    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;112        p_mon->Type    = OS_OBJ_TYPE_MON;                           /* Mark the data structure as a monitor                 */
;;;113    #endif
;;;114    
;;;115    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;116        p_mon->NamePtr = p_name;                                    /* Save the name of the monitor                         */
;;;117    #else
;;;118        (void)&p_name;
;;;119    #endif
;;;120    
;;;121        OS_PendListInit(&p_mon->PendList);
;;;122    
;;;123    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;124        OS_MonDbgListAdd(p_mon);
;;;125        OSMonQty++;
;;;126    #endif
;;;127    
;;;128        if (p_mon_data != DEF_NULL) {
;;;129            p_mon->MonDataPtr = p_mon_data;
;;;130        }
;;;131    
;;;132        CPU_CRITICAL_EXIT();
;;;133    
;;;134       *p_err = OS_ERR_NONE;
;;;135    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  b91c              CBNZ     r4,|L1.42|
000022  f64550c3          MOV      r0,#0x5dc3            ;105
000026  8028              STRH     r0,[r5,#0]            ;105
000028  e7f8              B        |L1.28|
                  |L1.42|
00002a  bf00              NOP                            ;110
00002c  bf00              NOP                            ;110
00002e  f7fffffe          BL       CPU_SR_Save
000032  4680              MOV      r8,r0                 ;110
000034  bf00              NOP                            ;110
000036  f7fffffe          BL       CPU_IntDisMeasStart
00003a  bf00              NOP                            ;110
00003c  480f              LDR      r0,|L1.124|
00003e  6020              STR      r0,[r4,#0]            ;112
000040  6067              STR      r7,[r4,#4]            ;116
000042  f1040008          ADD      r0,r4,#8              ;121
000046  f7fffffe          BL       OS_PendListInit
00004a  4620              MOV      r0,r4                 ;124
00004c  f7fffffe          BL       OS_MonDbgListAdd
000050  480b              LDR      r0,|L1.128|
000052  8800              LDRH     r0,[r0,#0]            ;125  ; OSMonQty
000054  1c40              ADDS     r0,r0,#1              ;125
000056  490a              LDR      r1,|L1.128|
000058  8008              STRH     r0,[r1,#0]            ;125
00005a  b106              CBZ      r6,|L1.94|
00005c  6226              STR      r6,[r4,#0x20]         ;129
                  |L1.94|
00005e  bf00              NOP                            ;132
000060  f7fffffe          BL       CPU_IntDisMeasStop
000064  bf00              NOP                            ;132
000066  4640              MOV      r0,r8                 ;132
000068  f7fffffe          BL       CPU_SR_Restore
00006c  bf00              NOP                            ;132
00006e  bf00              NOP                            ;132
000070  2000              MOVS     r0,#0                 ;134
000072  8028              STRH     r0,[r5,#0]            ;134
000074  bf00              NOP      
000076  e7d1              B        |L1.28|
;;;136    
                          ENDP

                  |L1.120|
                          DCD      OSIntNestingCtr
                  |L1.124|
                          DCD      0x204e4f4d
                  |L1.128|
                          DCD      OSMonQty

                          AREA ||i.OSMonOp||, CODE, READONLY, ALIGN=2

                  OSMonOp PROC
;;;308    
;;;309    void  OSMonOp (OS_MON               *p_mon,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;310                   OS_TICK               timeout,
;;;311                   void                 *p_arg,
;;;312                   OS_MON_ON_ENTER_PTR   p_on_enter,
;;;313                   OS_MON_ON_EVAL_PTR    p_on_eval,
;;;314                   OS_OPT                opt,
;;;315                   OS_ERR               *p_err)
;;;316    {
000004  b091              SUB      sp,sp,#0x44
000006  4607              MOV      r7,r0
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8dda078          LDR      r10,[sp,#0x78]
000010  9c20              LDR      r4,[sp,#0x80]
;;;317        CPU_INT32U        op_res;
;;;318        CPU_INT32U        mon_res;
;;;319        OS_PEND_LIST     *p_pend_list;
;;;320        OS_PEND_DATA     *p_pend_data;
;;;321        OS_PEND_DATA     *p_pend_data_next;
;;;322        OS_PEND_DATA      pend_data;
;;;323        OS_MON_DATA       mon_data;
;;;324        OS_MON_DATA      *p_data;
;;;325        void             *p_eval_data;
;;;326        CPU_BOOLEAN       sched;
;;;327        CPU_SR_ALLOC();
000012  2000              MOVS     r0,#0
000014  9001              STR      r0,[sp,#4]
;;;328    
;;;329    
;;;330    #ifdef OS_SAFETY_CRITICAL
;;;331        if (p_err == DEF_NULL) {
;;;332            OS_SAFETY_CRITICAL_EXCEPTION();
;;;333            return;
;;;334        }
;;;335    #endif
;;;336    
;;;337    #if (OS_CFG_INVALID_OS_CALLS_CHK_EN == DEF_ENABLED)             /* Is the kernel running?                               */
;;;338        if (OSRunning != OS_STATE_OS_RUNNING) {
;;;339           *p_err = OS_ERR_OS_NOT_RUNNING;
;;;340            return;
;;;341        }
;;;342    #endif
;;;343    
;;;344    #if (OS_CFG_ARG_CHK_EN == DEF_ENABLED)
;;;345        if (p_mon == DEF_NULL) {                                    /* Validate 'p_mon'                                     */
000016  b92f              CBNZ     r7,|L2.36|
;;;346           *p_err  = OS_ERR_OBJ_PTR_NULL;
000018  f64550c3          MOV      r0,#0x5dc3
00001c  8020              STRH     r0,[r4,#0]
                  |L2.30|
;;;347            return;
;;;348        }
;;;349    #endif
;;;350    
;;;351        sched = DEF_NO;
;;;352    
;;;353        CPU_CRITICAL_ENTER();
;;;354    
;;;355        if (p_on_enter != DEF_NULL) {
;;;356            op_res = (*p_on_enter)(p_mon, p_arg);
;;;357        } else {
;;;358            op_res = OS_MON_RES_BLOCK | OS_MON_RES_STOP_EVAL;
;;;359        }
;;;360    
;;;361        if (DEF_BIT_IS_SET(op_res, OS_MON_RES_BLOCK) == DEF_YES) {
;;;362            OS_Pend(&pend_data,                                     /* Block task pending on Condition Variable             */
;;;363                    (OS_PEND_OBJ *)(p_mon),
;;;364                    OS_TASK_PEND_ON_COND_VAR,
;;;365                    timeout);
;;;366    
;;;367            sched = DEF_YES;
;;;368        }
;;;369    
;;;370    
;;;371        pend_data.RdyMsgPtr  = &mon_data;
;;;372        mon_data.p_eval_data = p_arg;
;;;373        mon_data.p_on_eval   = p_on_eval;
;;;374    
;;;375        if (DEF_BIT_IS_CLR(op_res, OS_MON_RES_STOP_EVAL) == DEF_YES) {
;;;376            p_pend_list = &p_mon->PendList;
;;;377            if (p_pend_list->HeadPtr != DEF_NULL) {
;;;378                p_pend_data = p_pend_list->HeadPtr;
;;;379                while (p_pend_data != DEF_NULL) {
;;;380                    p_pend_data_next = p_pend_data->NextPtr;
;;;381    
;;;382                    p_data = (OS_MON_DATA *)p_pend_data->RdyMsgPtr;
;;;383                    p_on_eval = p_data->p_on_eval;
;;;384                    p_eval_data = p_data->p_eval_data;
;;;385    
;;;386                    if (p_on_eval != DEF_NULL) {
;;;387                        mon_res = (*p_on_eval)(p_mon, p_eval_data, p_arg);
;;;388                    } else {
;;;389                        mon_res = OS_MON_RES_STOP_EVAL;
;;;390                    }
;;;391    
;;;392                    if (DEF_BIT_IS_CLR(mon_res, OS_MON_RES_BLOCK) == DEF_YES) {
;;;393                        OS_Post((OS_PEND_OBJ *)(p_mon), p_pend_data->TCBPtr, DEF_NULL, 0u, 0u);
;;;394                        if (DEF_BIT_IS_CLR(opt, OS_OPT_POST_NO_SCHED) == DEF_YES) {
;;;395                            sched = DEF_YES;
;;;396                        }
;;;397                    }
;;;398    
;;;399                    if (DEF_BIT_IS_SET(mon_res, OS_MON_RES_STOP_EVAL) == DEF_YES) {
;;;400                        break;
;;;401                    }
;;;402    
;;;403                    p_pend_data = p_pend_data_next;
;;;404                }
;;;405    
;;;406            }
;;;407    
;;;408        }
;;;409    
;;;410        CPU_CRITICAL_EXIT();
;;;411    
;;;412        if (sched == DEF_YES) {
;;;413            OSSched();                                              /* Find the next highest priority task ready to run     */
;;;414        }
;;;415    
;;;416        if (DEF_BIT_IS_SET(op_res, OS_MON_RES_BLOCK) == DEF_YES) {
;;;417        CPU_CRITICAL_ENTER();
;;;418            switch (OSTCBCurPtr->PendStatus) {
;;;419                case OS_STATUS_PEND_OK:                             /* We got the monitor                                   */
;;;420                    *p_err = OS_ERR_NONE;
;;;421                     break;
;;;422    
;;;423                case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                             */
;;;424                    *p_err = OS_ERR_PEND_ABORT;
;;;425                     break;
;;;426    
;;;427                case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get monitor within timeout   */
;;;428                    *p_err = OS_ERR_TIMEOUT;
;;;429                     break;
;;;430    
;;;431                case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted      */
;;;432                    *p_err = OS_ERR_OBJ_DEL;
;;;433                     break;
;;;434    
;;;435                default:
;;;436                    *p_err = OS_ERR_STATUS_INVALID;
;;;437            }
;;;438        CPU_CRITICAL_EXIT();
;;;439        } else {
;;;440           *p_err = OS_ERR_NONE;
;;;441        }
;;;442    }
00001e  b015              ADD      sp,sp,#0x54
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.36|
000024  2000              MOVS     r0,#0                 ;351
000026  9002              STR      r0,[sp,#8]            ;351
000028  bf00              NOP                            ;353
00002a  bf00              NOP                            ;353
00002c  f7fffffe          BL       CPU_SR_Save
000030  9001              STR      r0,[sp,#4]            ;353
000032  bf00              NOP                            ;353
000034  f7fffffe          BL       CPU_IntDisMeasStart
000038  bf00              NOP                            ;353
00003a  f1b90f00          CMP      r9,#0                 ;355
00003e  d004              BEQ      |L2.74|
000040  4641              MOV      r1,r8                 ;356
000042  4638              MOV      r0,r7                 ;356
000044  47c8              BLX      r9                    ;356
000046  4605              MOV      r5,r0                 ;356
000048  e000              B        |L2.76|
                  |L2.74|
00004a  2503              MOVS     r5,#3                 ;358
                  |L2.76|
00004c  f0050001          AND      r0,r5,#1              ;361
000050  b110              CBZ      r0,|L2.88|
000052  bf00              NOP                            ;361
000054  2001              MOVS     r0,#1                 ;361
000056  e000              B        |L2.90|
                  |L2.88|
000058  2000              MOVS     r0,#0                 ;361
                  |L2.90|
00005a  2801              CMP      r0,#1                 ;361
00005c  d107              BNE      |L2.110|
00005e  2208              MOVS     r2,#8                 ;362
000060  4639              MOV      r1,r7                 ;362
000062  a807              ADD      r0,sp,#0x1c           ;362
000064  9b12              LDR      r3,[sp,#0x48]         ;362
000066  f7fffffe          BL       OS_Pend
00006a  2001              MOVS     r0,#1                 ;367
00006c  9002              STR      r0,[sp,#8]            ;367
                  |L2.110|
00006e  a805              ADD      r0,sp,#0x14           ;371
000070  900c              STR      r0,[sp,#0x30]         ;371
000072  f8cd8014          STR      r8,[sp,#0x14]         ;372
000076  f8cda018          STR      r10,[sp,#0x18]        ;373
00007a  f0050002          AND      r0,r5,#2              ;375
00007e  b910              CBNZ     r0,|L2.134|
000080  bf00              NOP                            ;375
000082  2001              MOVS     r0,#1                 ;375
000084  e000              B        |L2.136|
                  |L2.134|
000086  2000              MOVS     r0,#0                 ;375
                  |L2.136|
000088  2801              CMP      r0,#1                 ;375
00008a  d14a              BNE      |L2.290|
00008c  f1070b08          ADD      r11,r7,#8             ;376
000090  f8db0000          LDR      r0,[r11,#0]           ;377
000094  2800              CMP      r0,#0                 ;377
000096  d044              BEQ      |L2.290|
000098  f8db6000          LDR      r6,[r11,#0]           ;378
00009c  e03e              B        |L2.284|
                  |L2.158|
00009e  6870              LDR      r0,[r6,#4]            ;380
0000a0  900f              STR      r0,[sp,#0x3c]         ;380
0000a2  6970              LDR      r0,[r6,#0x14]         ;382
0000a4  9004              STR      r0,[sp,#0x10]         ;382
0000a6  9804              LDR      r0,[sp,#0x10]         ;383
0000a8  f8d0a004          LDR      r10,[r0,#4]           ;383
0000ac  9804              LDR      r0,[sp,#0x10]         ;384
0000ae  6800              LDR      r0,[r0,#0]            ;384
0000b0  9003              STR      r0,[sp,#0xc]          ;384
0000b2  f1ba0f00          CMP      r10,#0                ;386
0000b6  d005              BEQ      |L2.196|
0000b8  4642              MOV      r2,r8                 ;387
0000ba  4638              MOV      r0,r7                 ;387
0000bc  9903              LDR      r1,[sp,#0xc]          ;387
0000be  47d0              BLX      r10                   ;387
0000c0  9010              STR      r0,[sp,#0x40]         ;387
0000c2  e001              B        |L2.200|
                  |L2.196|
0000c4  2002              MOVS     r0,#2                 ;389
0000c6  9010              STR      r0,[sp,#0x40]         ;389
                  |L2.200|
0000c8  9810              LDR      r0,[sp,#0x40]         ;392
0000ca  f0000001          AND      r0,r0,#1              ;392
0000ce  b910              CBNZ     r0,|L2.214|
0000d0  bf00              NOP                            ;392
0000d2  2001              MOVS     r0,#1                 ;392
0000d4  e000              B        |L2.216|
                  |L2.214|
0000d6  2000              MOVS     r0,#0                 ;392
                  |L2.216|
0000d8  2801              CMP      r0,#1                 ;392
0000da  d112              BNE      |L2.258|
0000dc  2000              MOVS     r0,#0                 ;393
0000de  9000              STR      r0,[sp,#0]            ;393
0000e0  4603              MOV      r3,r0                 ;393
0000e2  4602              MOV      r2,r0                 ;393
0000e4  4638              MOV      r0,r7                 ;393
0000e6  68b1              LDR      r1,[r6,#8]            ;393
0000e8  f7fffffe          BL       OS_Post
0000ec  981f              LDR      r0,[sp,#0x7c]         ;394
0000ee  f4004000          AND      r0,r0,#0x8000         ;394
0000f2  b910              CBNZ     r0,|L2.250|
0000f4  bf00              NOP                            ;394
0000f6  2001              MOVS     r0,#1                 ;394
0000f8  e000              B        |L2.252|
                  |L2.250|
0000fa  2000              MOVS     r0,#0                 ;394
                  |L2.252|
0000fc  2801              CMP      r0,#1                 ;394
0000fe  d100              BNE      |L2.258|
000100  9002              STR      r0,[sp,#8]            ;395
                  |L2.258|
000102  9810              LDR      r0,[sp,#0x40]         ;399
000104  f0000002          AND      r0,r0,#2              ;399
000108  2802              CMP      r0,#2                 ;399
00010a  d102              BNE      |L2.274|
00010c  bf00              NOP                            ;399
00010e  2001              MOVS     r0,#1                 ;399
000110  e000              B        |L2.276|
                  |L2.274|
000112  2000              MOVS     r0,#0                 ;399
                  |L2.276|
000114  2801              CMP      r0,#1                 ;399
000116  d100              BNE      |L2.282|
000118  e002              B        |L2.288|
                  |L2.282|
00011a  9e0f              LDR      r6,[sp,#0x3c]         ;403
                  |L2.284|
00011c  2e00              CMP      r6,#0                 ;379
00011e  d1be              BNE      |L2.158|
                  |L2.288|
000120  bf00              NOP                            ;400
                  |L2.290|
000122  bf00              NOP                            ;410
000124  f7fffffe          BL       CPU_IntDisMeasStop
000128  bf00              NOP                            ;410
00012a  9801              LDR      r0,[sp,#4]            ;410
00012c  f7fffffe          BL       CPU_SR_Restore
000130  bf00              NOP                            ;410
000132  bf00              NOP                            ;410
000134  9802              LDR      r0,[sp,#8]            ;412
000136  2801              CMP      r0,#1                 ;412
000138  d101              BNE      |L2.318|
00013a  f7fffffe          BL       OSSched
                  |L2.318|
00013e  f0050001          AND      r0,r5,#1              ;416
000142  b110              CBZ      r0,|L2.330|
000144  bf00              NOP                            ;416
000146  2001              MOVS     r0,#1                 ;416
000148  e000              B        |L2.332|
                  |L2.330|
00014a  2000              MOVS     r0,#0                 ;416
                  |L2.332|
00014c  2801              CMP      r0,#1                 ;416
00014e  d131              BNE      |L2.436|
000150  bf00              NOP                            ;417
000152  bf00              NOP                            ;417
000154  f7fffffe          BL       CPU_SR_Save
000158  9001              STR      r0,[sp,#4]            ;417
00015a  bf00              NOP                            ;417
00015c  f7fffffe          BL       CPU_IntDisMeasStart
000160  bf00              NOP                            ;417
000162  4816              LDR      r0,|L2.444|
000164  6800              LDR      r0,[r0,#0]            ;418  ; OSTCBCurPtr
000166  f8900035          LDRB     r0,[r0,#0x35]         ;418
00016a  b130              CBZ      r0,|L2.378|
00016c  2801              CMP      r0,#1                 ;418
00016e  d007              BEQ      |L2.384|
000170  2802              CMP      r0,#2                 ;418
000172  d00d              BEQ      |L2.400|
000174  2803              CMP      r0,#3                 ;418
000176  d10f              BNE      |L2.408|
000178  e006              B        |L2.392|
                  |L2.378|
00017a  2000              MOVS     r0,#0                 ;420
00017c  8020              STRH     r0,[r4,#0]            ;420
00017e  e00f              B        |L2.416|
                  |L2.384|
000180  f24610a9          MOV      r0,#0x61a9            ;424
000184  8020              STRH     r0,[r4,#0]            ;424
000186  e00b              B        |L2.416|
                  |L2.392|
000188  f24720d9          MOV      r0,#0x72d9            ;428
00018c  8020              STRH     r0,[r4,#0]            ;428
00018e  e007              B        |L2.416|
                  |L2.400|
000190  f64550c2          MOV      r0,#0x5dc2            ;432
000194  8020              STRH     r0,[r4,#0]            ;432
000196  e003              B        |L2.416|
                  |L2.408|
000198  f646602e          MOV      r0,#0x6e2e            ;436
00019c  8020              STRH     r0,[r4,#0]            ;436
00019e  bf00              NOP                            ;418
                  |L2.416|
0001a0  bf00              NOP                            ;421
0001a2  bf00              NOP                            ;438
0001a4  f7fffffe          BL       CPU_IntDisMeasStop
0001a8  bf00              NOP                            ;438
0001aa  9801              LDR      r0,[sp,#4]            ;438
0001ac  f7fffffe          BL       CPU_SR_Restore
0001b0  bf00              NOP                            ;438
0001b2  e001              B        |L2.440|
                  |L2.436|
0001b4  2000              MOVS     r0,#0                 ;440
0001b6  8020              STRH     r0,[r4,#0]            ;440
                  |L2.440|
0001b8  bf00              NOP      
0001ba  e730              B        |L2.30|
;;;443    
                          ENDP

                  |L2.444|
                          DCD      OSTCBCurPtr

                          AREA ||i.OS_MonClr||, CODE, READONLY, ALIGN=2

                  OS_MonClr PROC
;;;460    
;;;461    void  OS_MonClr (OS_MON  *p_mon)
000000  b510              PUSH     {r4,lr}
;;;462    {
000002  4604              MOV      r4,r0
;;;463    #if (OS_OBJ_TYPE_REQ == DEF_ENABLED)
;;;464        p_mon->Type       = OS_OBJ_TYPE_NONE;                       /* Mark the data structure as a NONE                    */
000004  4805              LDR      r0,|L3.28|
000006  6020              STR      r0,[r4,#0]
;;;465    #endif
;;;466        p_mon->MonDataPtr = DEF_NULL;
000008  2000              MOVS     r0,#0
00000a  6220              STR      r0,[r4,#0x20]
;;;467    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;468        p_mon->NamePtr    = (CPU_CHAR *)((void *)"?MON");
00000c  a004              ADR      r0,|L3.32|
00000e  6060              STR      r0,[r4,#4]
;;;469    #endif
;;;470        OS_PendListInit(&p_mon->PendList);                          /* Initialize the waiting list                          */
000010  f1040008          ADD      r0,r4,#8
000014  f7fffffe          BL       OS_PendListInit
;;;471    }
000018  bd10              POP      {r4,pc}
;;;472    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x454e4f4e
                  |L3.32|
000020  3f4d4f4e          DCB      "?MON",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.OS_MonDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_MonDbgListAdd PROC
;;;488    #if (OS_CFG_DBG_EN == DEF_ENABLED)
;;;489    void  OS_MonDbgListAdd (OS_MON  *p_mon)
000000  a109              ADR      r1,|L4.40|
;;;490    {
;;;491        p_mon->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;492        p_mon->DbgPrevPtr               = DEF_NULL;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;493        if (OSMonDbgListPtr == DEF_NULL) {
000008  4908              LDR      r1,|L4.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSMonDbgListPtr
00000c  b911              CBNZ     r1,|L4.20|
;;;494            p_mon->DbgNextPtr           = DEF_NULL;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L4.32|
                  |L4.20|
;;;495        } else {
;;;496            p_mon->DbgNextPtr           =  OSMonDbgListPtr;
000014  4905              LDR      r1,|L4.44|
000016  6809              LDR      r1,[r1,#0]  ; OSMonDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;497            OSMonDbgListPtr->DbgPrevPtr =  p_mon;
00001a  4904              LDR      r1,|L4.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSMonDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L4.32|
;;;498        }
;;;499        OSMonDbgListPtr                 =  p_mon;
000020  4902              LDR      r1,|L4.44|
000022  6008              STR      r0,[r1,#0]  ; OSMonDbgListPtr
;;;500    }
000024  4770              BX       lr
;;;501    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L4.44|
                          DCD      OSMonDbgListPtr

                          AREA ||i.OS_MonDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_MonDbgListRemove PROC
;;;503    
;;;504    void  OS_MonDbgListRemove (OS_MON  *p_mon)
000000  6942              LDR      r2,[r0,#0x14]
;;;505    {
;;;506        OS_MON  *p_mon_next;
;;;507        OS_MON  *p_mon_prev;
;;;508    
;;;509    
;;;510        p_mon_prev = p_mon->DbgPrevPtr;
;;;511        p_mon_next = p_mon->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;512    
;;;513        if (p_mon_prev == DEF_NULL) {
000004  b93a              CBNZ     r2,|L5.22|
;;;514            OSMonDbgListPtr = p_mon_next;
000006  4b09              LDR      r3,|L5.44|
000008  6019              STR      r1,[r3,#0]  ; OSMonDbgListPtr
;;;515            if (p_mon_next != DEF_NULL) {
00000a  b109              CBZ      r1,|L5.16|
;;;516                p_mon_next->DbgPrevPtr = DEF_NULL;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L5.16|
;;;517            }
;;;518            p_mon->DbgNextPtr = DEF_NULL;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L5.42|
                  |L5.22|
;;;519    
;;;520        } else if (p_mon_next == DEF_NULL) {
000016  b919              CBNZ     r1,|L5.32|
;;;521            p_mon_prev->DbgNextPtr = DEF_NULL;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;522            p_mon->DbgPrevPtr      = DEF_NULL;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L5.42|
                  |L5.32|
;;;523    
;;;524        } else {
;;;525            p_mon_prev->DbgNextPtr =  p_mon_next;
000020  6191              STR      r1,[r2,#0x18]
;;;526            p_mon_next->DbgPrevPtr =  p_mon_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;527            p_mon->DbgNextPtr      = DEF_NULL;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;528            p_mon->DbgPrevPtr      = DEF_NULL;
000028  6143              STR      r3,[r0,#0x14]
                  |L5.42|
;;;529        }
;;;530    }
00002a  4770              BX       lr
;;;531    #endif
                          ENDP

                  |L5.44|
                          DCD      OSMonDbgListPtr
